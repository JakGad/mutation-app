//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from java/java20/Java20Parser.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class Java20Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EXPORTS=1, MODULE=2, NONSEALED=3, OACA=4, OPEN=5, OPENS=6, PERMITS=7, 
		PROVIDES=8, RECORD=9, REQUIRES=10, SEALED=11, TO=12, TRANSITIVE=13, USES=14, 
		VAR=15, WITH=16, YIELD=17, ABSTRACT=18, ASSERT=19, BOOLEAN=20, BREAK=21, 
		BYTE=22, CASE=23, CATCH=24, CHAR=25, CLASS=26, CONST=27, CONTINUE=28, 
		DEFAULT=29, DO=30, DOUBLE=31, ELSE=32, ENUM=33, EXTENDS=34, FINAL=35, 
		FINALLY=36, FLOAT=37, FOR=38, IF=39, GOTO=40, IMPLEMENTS=41, IMPORT=42, 
		INSTANCEOF=43, INT=44, INTERFACE=45, LONG=46, NATIVE=47, NEW=48, PACKAGE=49, 
		PRIVATE=50, PROTECTED=51, PUBLIC=52, RETURN=53, SHORT=54, STATIC=55, STRICTFP=56, 
		SUPER=57, SWITCH=58, SYNCHRONIZED=59, THIS=60, THROW=61, THROWS=62, TRANSIENT=63, 
		TRY=64, VOID=65, VOLATILE=66, WHILE=67, UNDER_SCORE=68, IntegerLiteral=69, 
		FloatingPointLiteral=70, BooleanLiteral=71, CharacterLiteral=72, StringLiteral=73, 
		TextBlock=74, NullLiteral=75, LPAREN=76, RPAREN=77, LBRACE=78, RBRACE=79, 
		LBRACK=80, RBRACK=81, SEMI=82, COMMA=83, DOT=84, ELLIPSIS=85, AT=86, COLONCOLON=87, 
		ASSIGN=88, GT=89, LT=90, BANG=91, TILDE=92, QUESTION=93, COLON=94, ARROW=95, 
		EQUAL=96, LE=97, GE=98, NOTEQUAL=99, AND=100, OR=101, INC=102, DEC=103, 
		ADD=104, SUB=105, MUL=106, DIV=107, BITAND=108, BITOR=109, CARET=110, 
		MOD=111, ADD_ASSIGN=112, SUB_ASSIGN=113, MUL_ASSIGN=114, DIV_ASSIGN=115, 
		AND_ASSIGN=116, OR_ASSIGN=117, XOR_ASSIGN=118, MOD_ASSIGN=119, LSHIFT_ASSIGN=120, 
		RSHIFT_ASSIGN=121, URSHIFT_ASSIGN=122, Identifier=123, WS=124, COMMENT=125, 
		LINE_COMMENT=126;
	public const int
		RULE_start = 0, RULE_literal = 1, RULE_typeIdentifier = 2, RULE_unqualifiedMethodIdentifier = 3, 
		RULE_primitiveType = 4, RULE_numericType = 5, RULE_integralType = 6, RULE_floatingPointType = 7, 
		RULE_referenceType = 8, RULE_coit = 9, RULE_classOrInterfaceType = 10, 
		RULE_classType = 11, RULE_interfaceType = 12, RULE_typeVariable = 13, 
		RULE_arrayType = 14, RULE_dims = 15, RULE_typeParameter = 16, RULE_typeParameterModifier = 17, 
		RULE_typeBound = 18, RULE_additionalBound = 19, RULE_typeArguments = 20, 
		RULE_typeArgumentList = 21, RULE_typeArgument = 22, RULE_wildcard = 23, 
		RULE_wildcardBounds = 24, RULE_moduleName = 25, RULE_packageName = 26, 
		RULE_typeName = 27, RULE_packageOrTypeName = 28, RULE_expressionName = 29, 
		RULE_methodName = 30, RULE_ambiguousName = 31, RULE_compilationUnit = 32, 
		RULE_ordinaryCompilationUnit = 33, RULE_modularCompilationUnit = 34, RULE_packageDeclaration = 35, 
		RULE_packageModifier = 36, RULE_importDeclaration = 37, RULE_singleTypeImportDeclaration = 38, 
		RULE_typeImportOnDemandDeclaration = 39, RULE_singleStaticImportDeclaration = 40, 
		RULE_staticImportOnDemandDeclaration = 41, RULE_topLevelClassOrInterfaceDeclaration = 42, 
		RULE_moduleDeclaration = 43, RULE_moduleDirective = 44, RULE_requiresModifier = 45, 
		RULE_classDeclaration = 46, RULE_normalClassDeclaration = 47, RULE_classModifier = 48, 
		RULE_typeParameters = 49, RULE_typeParameterList = 50, RULE_classExtends = 51, 
		RULE_classImplements = 52, RULE_interfaceTypeList = 53, RULE_classPermits = 54, 
		RULE_classBody = 55, RULE_classBodyDeclaration = 56, RULE_classMemberDeclaration = 57, 
		RULE_fieldDeclaration = 58, RULE_fieldModifier = 59, RULE_variableDeclaratorList = 60, 
		RULE_variableDeclarator = 61, RULE_variableDeclaratorId = 62, RULE_variableInitializer = 63, 
		RULE_unannType = 64, RULE_unannPrimitiveType = 65, RULE_unannReferenceType = 66, 
		RULE_unannClassOrInterfaceType = 67, RULE_uCOIT = 68, RULE_unannClassType = 69, 
		RULE_unannInterfaceType = 70, RULE_unannTypeVariable = 71, RULE_unannArrayType = 72, 
		RULE_methodDeclaration = 73, RULE_methodModifier = 74, RULE_methodHeader = 75, 
		RULE_result = 76, RULE_methodDeclarator = 77, RULE_receiverParameter = 78, 
		RULE_formalParameterList = 79, RULE_formalParameter = 80, RULE_variableArityParameter = 81, 
		RULE_variableModifier = 82, RULE_throwsT = 83, RULE_exceptionTypeList = 84, 
		RULE_exceptionType = 85, RULE_methodBody = 86, RULE_instanceInitializer = 87, 
		RULE_staticInitializer = 88, RULE_constructorDeclaration = 89, RULE_constructorModifier = 90, 
		RULE_constructorDeclarator = 91, RULE_simpleTypeName = 92, RULE_constructorBody = 93, 
		RULE_explicitConstructorInvocation = 94, RULE_enumDeclaration = 95, RULE_enumBody = 96, 
		RULE_enumConstantList = 97, RULE_enumConstant = 98, RULE_enumConstantModifier = 99, 
		RULE_enumBodyDeclarations = 100, RULE_recordDeclaration = 101, RULE_recordHeader = 102, 
		RULE_recordComponentList = 103, RULE_recordComponent = 104, RULE_variableArityRecordComponent = 105, 
		RULE_recordComponentModifier = 106, RULE_recordBody = 107, RULE_recordBodyDeclaration = 108, 
		RULE_compactConstructorDeclaration = 109, RULE_interfaceDeclaration = 110, 
		RULE_normalInterfaceDeclaration = 111, RULE_interfaceModifier = 112, RULE_interfaceExtends = 113, 
		RULE_interfacePermits = 114, RULE_interfaceBody = 115, RULE_interfaceMemberDeclaration = 116, 
		RULE_constantDeclaration = 117, RULE_constantModifier = 118, RULE_interfaceMethodDeclaration = 119, 
		RULE_interfaceMethodModifier = 120, RULE_annotationInterfaceDeclaration = 121, 
		RULE_annotationInterfaceBody = 122, RULE_annotationInterfaceMemberDeclaration = 123, 
		RULE_annotationInterfaceElementDeclaration = 124, RULE_annotationInterfaceElementModifier = 125, 
		RULE_defaultValue = 126, RULE_annotation = 127, RULE_normalAnnotation = 128, 
		RULE_elementValuePairList = 129, RULE_elementValuePair = 130, RULE_elementValue = 131, 
		RULE_elementValueArrayInitializer = 132, RULE_elementValueList = 133, 
		RULE_markerAnnotation = 134, RULE_singleElementAnnotation = 135, RULE_arrayInitializer = 136, 
		RULE_variableInitializerList = 137, RULE_block = 138, RULE_blockStatements = 139, 
		RULE_blockStatement = 140, RULE_localClassOrInterfaceDeclaration = 141, 
		RULE_localVariableDeclaration = 142, RULE_localVariableType = 143, RULE_localVariableDeclarationStatement = 144, 
		RULE_statement = 145, RULE_statementNoShortIf = 146, RULE_statementWithoutTrailingSubstatement = 147, 
		RULE_emptyStatement = 148, RULE_labeledStatement = 149, RULE_labeledStatementNoShortIf = 150, 
		RULE_expressionStatement = 151, RULE_statementExpression = 152, RULE_ifThenStatement = 153, 
		RULE_ifThenElseStatement = 154, RULE_ifThenElseStatementNoShortIf = 155, 
		RULE_assertStatement = 156, RULE_switchStatement = 157, RULE_switchBlock = 158, 
		RULE_switchRule = 159, RULE_switchBlockStatementGroup = 160, RULE_switchLabel = 161, 
		RULE_caseConstant = 162, RULE_whileStatement = 163, RULE_whileStatementNoShortIf = 164, 
		RULE_doStatement = 165, RULE_forStatement = 166, RULE_forStatementNoShortIf = 167, 
		RULE_basicForStatement = 168, RULE_basicForStatementNoShortIf = 169, RULE_forInit = 170, 
		RULE_forUpdate = 171, RULE_statementExpressionList = 172, RULE_enhancedForStatement = 173, 
		RULE_enhancedForStatementNoShortIf = 174, RULE_breakStatement = 175, RULE_continueStatement = 176, 
		RULE_returnStatement = 177, RULE_throwStatement = 178, RULE_synchronizedStatement = 179, 
		RULE_tryStatement = 180, RULE_catches = 181, RULE_catchClause = 182, RULE_catchFormalParameter = 183, 
		RULE_catchType = 184, RULE_finallyBlock = 185, RULE_tryWithResourcesStatement = 186, 
		RULE_resourceSpecification = 187, RULE_resourceList = 188, RULE_resource = 189, 
		RULE_variableAccess = 190, RULE_yieldStatement = 191, RULE_pattern = 192, 
		RULE_typePattern = 193, RULE_expression = 194, RULE_primary = 195, RULE_primaryNoNewArray = 196, 
		RULE_pNNA = 197, RULE_classLiteral = 198, RULE_classInstanceCreationExpression = 199, 
		RULE_unqualifiedClassInstanceCreationExpression = 200, RULE_classOrInterfaceTypeToInstantiate = 201, 
		RULE_typeArgumentsOrDiamond = 202, RULE_arrayCreationExpression = 203, 
		RULE_arrayCreationExpressionWithoutInitializer = 204, RULE_arrayCreationExpressionWithInitializer = 205, 
		RULE_dimExprs = 206, RULE_dimExpr = 207, RULE_arrayAccess = 208, RULE_fieldAccess = 209, 
		RULE_methodInvocation = 210, RULE_argumentList = 211, RULE_methodReference = 212, 
		RULE_postfixExpression = 213, RULE_pfE = 214, RULE_postIncrementExpression = 215, 
		RULE_postDecrementExpression = 216, RULE_unaryExpression = 217, RULE_preIncrementExpression = 218, 
		RULE_preDecrementExpression = 219, RULE_unaryExpressionNotPlusMinus = 220, 
		RULE_castExpression = 221, RULE_multiplicativeExpression = 222, RULE_additiveExpression = 223, 
		RULE_shiftExpression = 224, RULE_relationalExpression = 225, RULE_equalityExpression = 226, 
		RULE_andExpression = 227, RULE_exclusiveOrExpression = 228, RULE_inclusiveOrExpression = 229, 
		RULE_conditionalAndExpression = 230, RULE_conditionalOrExpression = 231, 
		RULE_conditionalExpression = 232, RULE_assignmentExpression = 233, RULE_assignment = 234, 
		RULE_leftHandSide = 235, RULE_assignmentOperator = 236, RULE_lambdaExpression = 237, 
		RULE_lambdaParameters = 238, RULE_lambdaParameterList = 239, RULE_lambdaParameter = 240, 
		RULE_lambdaParameterType = 241, RULE_lambdaBody = 242, RULE_switchExpression = 243, 
		RULE_constantExpression = 244;
	public static readonly string[] ruleNames = {
		"start", "literal", "typeIdentifier", "unqualifiedMethodIdentifier", "primitiveType", 
		"numericType", "integralType", "floatingPointType", "referenceType", "coit", 
		"classOrInterfaceType", "classType", "interfaceType", "typeVariable", 
		"arrayType", "dims", "typeParameter", "typeParameterModifier", "typeBound", 
		"additionalBound", "typeArguments", "typeArgumentList", "typeArgument", 
		"wildcard", "wildcardBounds", "moduleName", "packageName", "typeName", 
		"packageOrTypeName", "expressionName", "methodName", "ambiguousName", 
		"compilationUnit", "ordinaryCompilationUnit", "modularCompilationUnit", 
		"packageDeclaration", "packageModifier", "importDeclaration", "singleTypeImportDeclaration", 
		"typeImportOnDemandDeclaration", "singleStaticImportDeclaration", "staticImportOnDemandDeclaration", 
		"topLevelClassOrInterfaceDeclaration", "moduleDeclaration", "moduleDirective", 
		"requiresModifier", "classDeclaration", "normalClassDeclaration", "classModifier", 
		"typeParameters", "typeParameterList", "classExtends", "classImplements", 
		"interfaceTypeList", "classPermits", "classBody", "classBodyDeclaration", 
		"classMemberDeclaration", "fieldDeclaration", "fieldModifier", "variableDeclaratorList", 
		"variableDeclarator", "variableDeclaratorId", "variableInitializer", "unannType", 
		"unannPrimitiveType", "unannReferenceType", "unannClassOrInterfaceType", 
		"uCOIT", "unannClassType", "unannInterfaceType", "unannTypeVariable", 
		"unannArrayType", "methodDeclaration", "methodModifier", "methodHeader", 
		"result", "methodDeclarator", "receiverParameter", "formalParameterList", 
		"formalParameter", "variableArityParameter", "variableModifier", "throwsT", 
		"exceptionTypeList", "exceptionType", "methodBody", "instanceInitializer", 
		"staticInitializer", "constructorDeclaration", "constructorModifier", 
		"constructorDeclarator", "simpleTypeName", "constructorBody", "explicitConstructorInvocation", 
		"enumDeclaration", "enumBody", "enumConstantList", "enumConstant", "enumConstantModifier", 
		"enumBodyDeclarations", "recordDeclaration", "recordHeader", "recordComponentList", 
		"recordComponent", "variableArityRecordComponent", "recordComponentModifier", 
		"recordBody", "recordBodyDeclaration", "compactConstructorDeclaration", 
		"interfaceDeclaration", "normalInterfaceDeclaration", "interfaceModifier", 
		"interfaceExtends", "interfacePermits", "interfaceBody", "interfaceMemberDeclaration", 
		"constantDeclaration", "constantModifier", "interfaceMethodDeclaration", 
		"interfaceMethodModifier", "annotationInterfaceDeclaration", "annotationInterfaceBody", 
		"annotationInterfaceMemberDeclaration", "annotationInterfaceElementDeclaration", 
		"annotationInterfaceElementModifier", "defaultValue", "annotation", "normalAnnotation", 
		"elementValuePairList", "elementValuePair", "elementValue", "elementValueArrayInitializer", 
		"elementValueList", "markerAnnotation", "singleElementAnnotation", "arrayInitializer", 
		"variableInitializerList", "block", "blockStatements", "blockStatement", 
		"localClassOrInterfaceDeclaration", "localVariableDeclaration", "localVariableType", 
		"localVariableDeclarationStatement", "statement", "statementNoShortIf", 
		"statementWithoutTrailingSubstatement", "emptyStatement", "labeledStatement", 
		"labeledStatementNoShortIf", "expressionStatement", "statementExpression", 
		"ifThenStatement", "ifThenElseStatement", "ifThenElseStatementNoShortIf", 
		"assertStatement", "switchStatement", "switchBlock", "switchRule", "switchBlockStatementGroup", 
		"switchLabel", "caseConstant", "whileStatement", "whileStatementNoShortIf", 
		"doStatement", "forStatement", "forStatementNoShortIf", "basicForStatement", 
		"basicForStatementNoShortIf", "forInit", "forUpdate", "statementExpressionList", 
		"enhancedForStatement", "enhancedForStatementNoShortIf", "breakStatement", 
		"continueStatement", "returnStatement", "throwStatement", "synchronizedStatement", 
		"tryStatement", "catches", "catchClause", "catchFormalParameter", "catchType", 
		"finallyBlock", "tryWithResourcesStatement", "resourceSpecification", 
		"resourceList", "resource", "variableAccess", "yieldStatement", "pattern", 
		"typePattern", "expression", "primary", "primaryNoNewArray", "pNNA", "classLiteral", 
		"classInstanceCreationExpression", "unqualifiedClassInstanceCreationExpression", 
		"classOrInterfaceTypeToInstantiate", "typeArgumentsOrDiamond", "arrayCreationExpression", 
		"arrayCreationExpressionWithoutInitializer", "arrayCreationExpressionWithInitializer", 
		"dimExprs", "dimExpr", "arrayAccess", "fieldAccess", "methodInvocation", 
		"argumentList", "methodReference", "postfixExpression", "pfE", "postIncrementExpression", 
		"postDecrementExpression", "unaryExpression", "preIncrementExpression", 
		"preDecrementExpression", "unaryExpressionNotPlusMinus", "castExpression", 
		"multiplicativeExpression", "additiveExpression", "shiftExpression", "relationalExpression", 
		"equalityExpression", "andExpression", "exclusiveOrExpression", "inclusiveOrExpression", 
		"conditionalAndExpression", "conditionalOrExpression", "conditionalExpression", 
		"assignmentExpression", "assignment", "leftHandSide", "assignmentOperator", 
		"lambdaExpression", "lambdaParameters", "lambdaParameterList", "lambdaParameter", 
		"lambdaParameterType", "lambdaBody", "switchExpression", "constantExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'exports'", "'module'", "'non-sealed'", "'<>'", "'open'", "'opens'", 
		"'permits'", "'provides'", "'record'", "'requires'", "'sealed'", "'to'", 
		"'transitive'", "'uses'", "'var'", "'with'", "'yield'", "'abstract'", 
		"'assert'", "'boolean'", "'break'", "'byte'", "'case'", "'catch'", "'char'", 
		"'class'", "'const'", "'continue'", "'default'", "'do'", "'double'", "'else'", 
		"'enum'", "'extends'", "'final'", "'finally'", "'float'", "'for'", "'if'", 
		"'goto'", "'implements'", "'import'", "'instanceof'", "'int'", "'interface'", 
		"'long'", "'native'", "'new'", "'package'", "'private'", "'protected'", 
		"'public'", "'return'", "'short'", "'static'", "'strictfp'", "'super'", 
		"'switch'", "'synchronized'", "'this'", "'throw'", "'throws'", "'transient'", 
		"'try'", "'void'", "'volatile'", "'while'", "'_'", null, null, null, null, 
		null, null, "'null'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", 
		"','", "'.'", "'...'", "'@'", "'::'", "'='", "'>'", "'<'", "'!'", "'~'", 
		"'?'", "':'", "'->'", "'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", 
		"'++'", "'--'", "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", 
		"'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", 
		"'>>='", "'>>>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EXPORTS", "MODULE", "NONSEALED", "OACA", "OPEN", "OPENS", "PERMITS", 
		"PROVIDES", "RECORD", "REQUIRES", "SEALED", "TO", "TRANSITIVE", "USES", 
		"VAR", "WITH", "YIELD", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", 
		"CASE", "CATCH", "CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", "DO", 
		"DOUBLE", "ELSE", "ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", 
		"IF", "GOTO", "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", "INTERFACE", 
		"LONG", "NATIVE", "NEW", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", 
		"RETURN", "SHORT", "STATIC", "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", 
		"THIS", "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", "WHILE", 
		"UNDER_SCORE", "IntegerLiteral", "FloatingPointLiteral", "BooleanLiteral", 
		"CharacterLiteral", "StringLiteral", "TextBlock", "NullLiteral", "LPAREN", 
		"RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", 
		"ELLIPSIS", "AT", "COLONCOLON", "ASSIGN", "GT", "LT", "BANG", "TILDE", 
		"QUESTION", "COLON", "ARROW", "EQUAL", "LE", "GE", "NOTEQUAL", "AND", 
		"OR", "INC", "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", "CARET", 
		"MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", 
		"OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", 
		"URSHIFT_ASSIGN", "Identifier", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Java20Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Java20Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Java20Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Java20Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompilationUnitContext compilationUnit() {
			return GetRuleContext<CompilationUnitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Java20Parser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			compilationUnit();
			State = 491;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(Java20Parser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatingPointLiteral() { return GetToken(Java20Parser.FloatingPointLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(Java20Parser.BooleanLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharacterLiteral() { return GetToken(Java20Parser.CharacterLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(Java20Parser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TextBlock() { return GetToken(Java20Parser.TextBlock, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(Java20Parser.NullLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 2, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 127L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		public TypeIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterTypeIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitTypeIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public TypeIdentifierContext typeIdentifier() {
		TypeIdentifierContext _localctx = new TypeIdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_typeIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnqualifiedMethodIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		public UnqualifiedMethodIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unqualifiedMethodIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterUnqualifiedMethodIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitUnqualifiedMethodIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public UnqualifiedMethodIdentifierContext unqualifiedMethodIdentifier() {
		UnqualifiedMethodIdentifierContext _localctx = new UnqualifiedMethodIdentifierContext(Context, State);
		EnterRule(_localctx, 6, RULE_unqualifiedMethodIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(Java20Parser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 499;
				annotation();
				}
				}
				State = 504;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 507;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				State = 505;
				numericType();
				}
				break;
			case BOOLEAN:
				{
				State = 506;
				Match(BOOLEAN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegralTypeContext integralType() {
			return GetRuleContext<IntegralTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatingPointTypeContext floatingPointType() {
			return GetRuleContext<FloatingPointTypeContext>(0);
		}
		public NumericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterNumericType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitNumericType(this);
		}
	}

	[RuleVersion(0)]
	public NumericTypeContext numericType() {
		NumericTypeContext _localctx = new NumericTypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_numericType);
		try {
			State = 511;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BYTE:
			case CHAR:
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 509;
				integralType();
				}
				break;
			case DOUBLE:
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 510;
				floatingPointType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegralTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(Java20Parser.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORT() { return GetToken(Java20Parser.SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(Java20Parser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(Java20Parser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(Java20Parser.CHAR, 0); }
		public IntegralTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integralType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterIntegralType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitIntegralType(this);
		}
	}

	[RuleVersion(0)]
	public IntegralTypeContext integralType() {
		IntegralTypeContext _localctx = new IntegralTypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_integralType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 18102359477452800L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatingPointTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(Java20Parser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(Java20Parser.DOUBLE, 0); }
		public FloatingPointTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatingPointType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterFloatingPointType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitFloatingPointType(this);
		}
	}

	[RuleVersion(0)]
	public FloatingPointTypeContext floatingPointType() {
		FloatingPointTypeContext _localctx = new FloatingPointTypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_floatingPointType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			_la = TokenStream.LA(1);
			if ( !(_la==DOUBLE || _la==FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public ReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterReferenceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitReferenceType(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeContext referenceType() {
		ReferenceTypeContext _localctx = new ReferenceTypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_referenceType);
		try {
			State = 520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 517;
				classOrInterfaceType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 518;
				typeVariable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 519;
				arrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java20Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CoitContext coit() {
			return GetRuleContext<CoitContext>(0);
		}
		public CoitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterCoit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitCoit(this);
		}
	}

	[RuleVersion(0)]
	public CoitContext coit() {
		CoitContext _localctx = new CoitContext(Context, State);
		EnterRule(_localctx, 18, RULE_coit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			Match(DOT);
			State = 526;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 523;
				annotation();
				}
				}
				State = 528;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 529;
			typeIdentifier();
			State = 531;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 530;
				typeArguments();
				}
				break;
			}
			State = 534;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 533;
				coit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PackageNameContext packageName() {
			return GetRuleContext<PackageNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java20Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CoitContext coit() {
			return GetRuleContext<CoitContext>(0);
		}
		public ClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeContext classOrInterfaceType() {
		ClassOrInterfaceTypeContext _localctx = new ClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_classOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 536;
				packageName();
				State = 537;
				Match(DOT);
				}
				break;
			}
			State = 544;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 541;
				annotation();
				}
				}
				State = 546;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 547;
			typeIdentifier();
			State = 549;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 548;
				typeArguments();
				}
				break;
			}
			State = 552;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 551;
				coit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PackageNameContext packageName() {
			return GetRuleContext<PackageNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java20Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_classType);
		int _la;
		try {
			State = 588;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 557;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 554;
					annotation();
					}
					}
					State = 559;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 560;
				typeIdentifier();
				State = 562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 561;
					typeArguments();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 564;
				packageName();
				State = 565;
				Match(DOT);
				State = 569;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 566;
					annotation();
					}
					}
					State = 571;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 572;
				typeIdentifier();
				State = 574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 573;
					typeArguments();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 576;
				classOrInterfaceType();
				State = 577;
				Match(DOT);
				State = 581;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 578;
					annotation();
					}
					}
					State = 583;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 584;
				typeIdentifier();
				State = 586;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 585;
					typeArguments();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public InterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeContext interfaceType() {
		InterfaceTypeContext _localctx = new InterfaceTypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_interfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590;
			classType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterTypeVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitTypeVariable(this);
		}
	}

	[RuleVersion(0)]
	public TypeVariableContext typeVariable() {
		TypeVariableContext _localctx = new TypeVariableContext(Context, State);
		EnterRule(_localctx, 26, RULE_typeVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 592;
				annotation();
				}
				}
				State = 597;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 598;
			typeIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 28, RULE_arrayType);
		try {
			State = 609;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 600;
				primitiveType();
				State = 601;
				dims();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 603;
				classType();
				State = 604;
				dims();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 606;
				typeVariable();
				State = 607;
				dims();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(Java20Parser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(Java20Parser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(Java20Parser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(Java20Parser.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public DimsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dims; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterDims(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitDims(this);
		}
	}

	[RuleVersion(0)]
	public DimsContext dims() {
		DimsContext _localctx = new DimsContext(Context, State);
		EnterRule(_localctx, 30, RULE_dims);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 614;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 611;
				annotation();
				}
				}
				State = 616;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 617;
			Match(LBRACK);
			State = 618;
			Match(RBRACK);
			State = 629;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 622;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==AT) {
						{
						{
						State = 619;
						annotation();
						}
						}
						State = 624;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 625;
					Match(LBRACK);
					State = 626;
					Match(RBRACK);
					}
					} 
				}
				State = 631;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterModifierContext[] typeParameterModifier() {
			return GetRuleContexts<TypeParameterModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterModifierContext typeParameterModifier(int i) {
			return GetRuleContext<TypeParameterModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeBoundContext typeBound() {
			return GetRuleContext<TypeBoundContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 32, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 632;
				typeParameterModifier();
				}
				}
				State = 637;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 638;
			typeIdentifier();
			State = 640;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 639;
				typeBound();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public TypeParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterModifier(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterModifierContext typeParameterModifier() {
		TypeParameterModifierContext _localctx = new TypeParameterModifierContext(Context, State);
		EnterRule(_localctx, 34, RULE_typeParameterModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 642;
			annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(Java20Parser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalBoundContext[] additionalBound() {
			return GetRuleContexts<AdditionalBoundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalBoundContext additionalBound(int i) {
			return GetRuleContext<AdditionalBoundContext>(i);
		}
		public TypeBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterTypeBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitTypeBound(this);
		}
	}

	[RuleVersion(0)]
	public TypeBoundContext typeBound() {
		TypeBoundContext _localctx = new TypeBoundContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeBound);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 644;
			Match(EXTENDS);
			State = 653;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 645;
				typeVariable();
				}
				break;
			case 2:
				{
				State = 646;
				classOrInterfaceType();
				State = 650;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==BITAND) {
					{
					{
					State = 647;
					additionalBound();
					}
					}
					State = 652;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionalBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITAND() { return GetToken(Java20Parser.BITAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeContext interfaceType() {
			return GetRuleContext<InterfaceTypeContext>(0);
		}
		public AdditionalBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionalBound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterAdditionalBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitAdditionalBound(this);
		}
	}

	[RuleVersion(0)]
	public AdditionalBoundContext additionalBound() {
		AdditionalBoundContext _localctx = new AdditionalBoundContext(Context, State);
		EnterRule(_localctx, 38, RULE_additionalBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 655;
			Match(BITAND);
			State = 656;
			interfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(Java20Parser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(Java20Parser.GT, 0); }
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 40, RULE_typeArguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			Match(LT);
			State = 659;
			typeArgumentList();
			State = 660;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java20Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java20Parser.COMMA, i);
		}
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterTypeArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitTypeArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(Context, State);
		EnterRule(_localctx, 42, RULE_typeArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 662;
			typeArgument();
			State = 667;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 663;
				Match(COMMA);
				State = 664;
				typeArgument();
				}
				}
				State = 669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WildcardContext wildcard() {
			return GetRuleContext<WildcardContext>(0);
		}
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterTypeArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitTypeArgument(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
		EnterRule(_localctx, 44, RULE_typeArgument);
		try {
			State = 672;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 670;
				referenceType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 671;
				wildcard();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildcardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(Java20Parser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WildcardBoundsContext wildcardBounds() {
			return GetRuleContext<WildcardBoundsContext>(0);
		}
		public WildcardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterWildcard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitWildcard(this);
		}
	}

	[RuleVersion(0)]
	public WildcardContext wildcard() {
		WildcardContext _localctx = new WildcardContext(Context, State);
		EnterRule(_localctx, 46, RULE_wildcard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 677;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 674;
				annotation();
				}
				}
				State = 679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 680;
			Match(QUESTION);
			State = 682;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS || _la==SUPER) {
				{
				State = 681;
				wildcardBounds();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildcardBoundsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(Java20Parser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(Java20Parser.SUPER, 0); }
		public WildcardBoundsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcardBounds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterWildcardBounds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitWildcardBounds(this);
		}
	}

	[RuleVersion(0)]
	public WildcardBoundsContext wildcardBounds() {
		WildcardBoundsContext _localctx = new WildcardBoundsContext(Context, State);
		EnterRule(_localctx, 48, RULE_wildcardBounds);
		try {
			State = 688;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXTENDS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 684;
				Match(EXTENDS);
				State = 685;
				referenceType();
				}
				break;
			case SUPER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 686;
				Match(SUPER);
				State = 687;
				referenceType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java20Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModuleNameContext moduleName() {
			return GetRuleContext<ModuleNameContext>(0);
		}
		public ModuleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterModuleName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitModuleName(this);
		}
	}

	[RuleVersion(0)]
	public ModuleNameContext moduleName() {
		ModuleNameContext _localctx = new ModuleNameContext(Context, State);
		EnterRule(_localctx, 50, RULE_moduleName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690;
			Match(Identifier);
			State = 693;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 691;
				Match(DOT);
				State = 692;
				moduleName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java20Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PackageNameContext packageName() {
			return GetRuleContext<PackageNameContext>(0);
		}
		public PackageNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterPackageName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitPackageName(this);
		}
	}

	[RuleVersion(0)]
	public PackageNameContext packageName() {
		PackageNameContext _localctx = new PackageNameContext(Context, State);
		EnterRule(_localctx, 52, RULE_packageName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695;
			Match(Identifier);
			State = 698;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 696;
				Match(DOT);
				State = 697;
				packageName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PackageNameContext packageName() {
			return GetRuleContext<PackageNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java20Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 54, RULE_typeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 700;
			packageName();
			State = 703;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 701;
				Match(DOT);
				State = 702;
				typeIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageOrTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java20Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PackageOrTypeNameContext packageOrTypeName() {
			return GetRuleContext<PackageOrTypeNameContext>(0);
		}
		public PackageOrTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageOrTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterPackageOrTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitPackageOrTypeName(this);
		}
	}

	[RuleVersion(0)]
	public PackageOrTypeNameContext packageOrTypeName() {
		PackageOrTypeNameContext _localctx = new PackageOrTypeNameContext(Context, State);
		EnterRule(_localctx, 56, RULE_packageOrTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 705;
			Match(Identifier);
			State = 708;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 706;
				Match(DOT);
				State = 707;
				packageOrTypeName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AmbiguousNameContext ambiguousName() {
			return GetRuleContext<AmbiguousNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java20Parser.DOT, 0); }
		public ExpressionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterExpressionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitExpressionName(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionNameContext expressionName() {
		ExpressionNameContext _localctx = new ExpressionNameContext(Context, State);
		EnterRule(_localctx, 58, RULE_expressionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 710;
				ambiguousName();
				State = 711;
				Match(DOT);
				}
				break;
			}
			State = 715;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnqualifiedMethodIdentifierContext unqualifiedMethodIdentifier() {
			return GetRuleContext<UnqualifiedMethodIdentifierContext>(0);
		}
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterMethodName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitMethodName(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 60, RULE_methodName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 717;
			unqualifiedMethodIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java20Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AmbiguousNameContext ambiguousName() {
			return GetRuleContext<AmbiguousNameContext>(0);
		}
		public AmbiguousNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterAmbiguousName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitAmbiguousName(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousNameContext ambiguousName() {
		AmbiguousNameContext _localctx = new AmbiguousNameContext(Context, State);
		EnterRule(_localctx, 62, RULE_ambiguousName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719;
			Match(Identifier);
			State = 722;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 720;
				Match(DOT);
				State = 721;
				ambiguousName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrdinaryCompilationUnitContext ordinaryCompilationUnit() {
			return GetRuleContext<OrdinaryCompilationUnitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModularCompilationUnitContext modularCompilationUnit() {
			return GetRuleContext<ModularCompilationUnitContext>(0);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 64, RULE_compilationUnit);
		try {
			State = 726;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 724;
				ordinaryCompilationUnit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 725;
				modularCompilationUnit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrdinaryCompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PackageDeclarationContext packageDeclaration() {
			return GetRuleContext<PackageDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelClassOrInterfaceDeclarationContext[] topLevelClassOrInterfaceDeclaration() {
			return GetRuleContexts<TopLevelClassOrInterfaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelClassOrInterfaceDeclarationContext topLevelClassOrInterfaceDeclaration(int i) {
			return GetRuleContext<TopLevelClassOrInterfaceDeclarationContext>(i);
		}
		public OrdinaryCompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordinaryCompilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterOrdinaryCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitOrdinaryCompilationUnit(this);
		}
	}

	[RuleVersion(0)]
	public OrdinaryCompilationUnitContext ordinaryCompilationUnit() {
		OrdinaryCompilationUnitContext _localctx = new OrdinaryCompilationUnitContext(Context, State);
		EnterRule(_localctx, 66, RULE_ordinaryCompilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 728;
				packageDeclaration();
				}
				break;
			}
			State = 734;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 731;
				importDeclaration();
				}
				}
				State = 736;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 740;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 116002917793925640L) != 0) || _la==SEMI || _la==AT) {
				{
				{
				State = 737;
				topLevelClassOrInterfaceDeclaration();
				}
				}
				State = 742;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModularCompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleDeclarationContext moduleDeclaration() {
			return GetRuleContext<ModuleDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		public ModularCompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modularCompilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterModularCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitModularCompilationUnit(this);
		}
	}

	[RuleVersion(0)]
	public ModularCompilationUnitContext modularCompilationUnit() {
		ModularCompilationUnitContext _localctx = new ModularCompilationUnitContext(Context, State);
		EnterRule(_localctx, 68, RULE_modularCompilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 746;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 743;
				importDeclaration();
				}
				}
				State = 748;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 749;
			moduleDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(Java20Parser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(Java20Parser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(Java20Parser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PackageModifierContext[] packageModifier() {
			return GetRuleContexts<PackageModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PackageModifierContext packageModifier(int i) {
			return GetRuleContext<PackageModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(Java20Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(Java20Parser.DOT, i);
		}
		public PackageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterPackageDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitPackageDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public PackageDeclarationContext packageDeclaration() {
		PackageDeclarationContext _localctx = new PackageDeclarationContext(Context, State);
		EnterRule(_localctx, 70, RULE_packageDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 751;
				packageModifier();
				}
				}
				State = 756;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 757;
			Match(PACKAGE);
			State = 758;
			Match(Identifier);
			State = 763;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 759;
				Match(DOT);
				State = 760;
				Match(Identifier);
				}
				}
				State = 765;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 766;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public PackageModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterPackageModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitPackageModifier(this);
		}
	}

	[RuleVersion(0)]
	public PackageModifierContext packageModifier() {
		PackageModifierContext _localctx = new PackageModifierContext(Context, State);
		EnterRule(_localctx, 72, RULE_packageModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 768;
			annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleTypeImportDeclarationContext singleTypeImportDeclaration() {
			return GetRuleContext<SingleTypeImportDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeImportOnDemandDeclarationContext typeImportOnDemandDeclaration() {
			return GetRuleContext<TypeImportOnDemandDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleStaticImportDeclarationContext singleStaticImportDeclaration() {
			return GetRuleContext<SingleStaticImportDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StaticImportOnDemandDeclarationContext staticImportOnDemandDeclaration() {
			return GetRuleContext<StaticImportOnDemandDeclarationContext>(0);
		}
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(Context, State);
		EnterRule(_localctx, 74, RULE_importDeclaration);
		try {
			State = 774;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 770;
				singleTypeImportDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 771;
				typeImportOnDemandDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 772;
				singleStaticImportDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 773;
				staticImportOnDemandDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleTypeImportDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(Java20Parser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		public SingleTypeImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleTypeImportDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterSingleTypeImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitSingleTypeImportDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public SingleTypeImportDeclarationContext singleTypeImportDeclaration() {
		SingleTypeImportDeclarationContext _localctx = new SingleTypeImportDeclarationContext(Context, State);
		EnterRule(_localctx, 76, RULE_singleTypeImportDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			Match(IMPORT);
			State = 777;
			typeName();
			State = 778;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeImportOnDemandDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(Java20Parser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PackageOrTypeNameContext packageOrTypeName() {
			return GetRuleContext<PackageOrTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java20Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(Java20Parser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		public TypeImportOnDemandDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeImportOnDemandDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterTypeImportOnDemandDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitTypeImportOnDemandDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypeImportOnDemandDeclarationContext typeImportOnDemandDeclaration() {
		TypeImportOnDemandDeclarationContext _localctx = new TypeImportOnDemandDeclarationContext(Context, State);
		EnterRule(_localctx, 78, RULE_typeImportOnDemandDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780;
			Match(IMPORT);
			State = 781;
			packageOrTypeName();
			State = 782;
			Match(DOT);
			State = 783;
			Match(MUL);
			State = 784;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleStaticImportDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(Java20Parser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(Java20Parser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java20Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		public SingleStaticImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleStaticImportDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterSingleStaticImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitSingleStaticImportDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public SingleStaticImportDeclarationContext singleStaticImportDeclaration() {
		SingleStaticImportDeclarationContext _localctx = new SingleStaticImportDeclarationContext(Context, State);
		EnterRule(_localctx, 80, RULE_singleStaticImportDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 786;
			Match(IMPORT);
			State = 787;
			Match(STATIC);
			State = 788;
			typeName();
			State = 789;
			Match(DOT);
			State = 790;
			Match(Identifier);
			State = 791;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticImportOnDemandDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(Java20Parser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(Java20Parser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java20Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(Java20Parser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		public StaticImportOnDemandDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticImportOnDemandDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterStaticImportOnDemandDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitStaticImportOnDemandDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public StaticImportOnDemandDeclarationContext staticImportOnDemandDeclaration() {
		StaticImportOnDemandDeclarationContext _localctx = new StaticImportOnDemandDeclarationContext(Context, State);
		EnterRule(_localctx, 82, RULE_staticImportOnDemandDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 793;
			Match(IMPORT);
			State = 794;
			Match(STATIC);
			State = 795;
			typeName();
			State = 796;
			Match(DOT);
			State = 797;
			Match(MUL);
			State = 798;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelClassOrInterfaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		public TopLevelClassOrInterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelClassOrInterfaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterTopLevelClassOrInterfaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitTopLevelClassOrInterfaceDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelClassOrInterfaceDeclarationContext topLevelClassOrInterfaceDeclaration() {
		TopLevelClassOrInterfaceDeclarationContext _localctx = new TopLevelClassOrInterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 84, RULE_topLevelClassOrInterfaceDeclaration);
		try {
			State = 803;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 800;
				classDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 801;
				interfaceDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 802;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(Java20Parser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(Java20Parser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(Java20Parser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(Java20Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(Java20Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(Java20Parser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(Java20Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(Java20Parser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleDirectiveContext[] moduleDirective() {
			return GetRuleContexts<ModuleDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleDirectiveContext moduleDirective(int i) {
			return GetRuleContext<ModuleDirectiveContext>(i);
		}
		public ModuleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterModuleDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitModuleDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationContext moduleDeclaration() {
		ModuleDeclarationContext _localctx = new ModuleDeclarationContext(Context, State);
		EnterRule(_localctx, 86, RULE_moduleDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 808;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 805;
				annotation();
				}
				}
				State = 810;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 812;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 811;
				Match(OPEN);
				}
			}

			State = 814;
			Match(MODULE);
			State = 815;
			Match(Identifier);
			State = 820;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 816;
				Match(DOT);
				State = 817;
				Match(Identifier);
				}
				}
				State = 822;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 823;
			Match(LBRACE);
			State = 827;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17730L) != 0)) {
				{
				{
				State = 824;
				moduleDirective();
				}
				}
				State = 829;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 830;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRES() { return GetToken(Java20Parser.REQUIRES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModuleNameContext[] moduleName() {
			return GetRuleContexts<ModuleNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleNameContext moduleName(int i) {
			return GetRuleContext<ModuleNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiresModifierContext[] requiresModifier() {
			return GetRuleContexts<RequiresModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequiresModifierContext requiresModifier(int i) {
			return GetRuleContext<RequiresModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORTS() { return GetToken(Java20Parser.EXPORTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PackageNameContext packageName() {
			return GetRuleContext<PackageNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(Java20Parser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java20Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java20Parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENS() { return GetToken(Java20Parser.OPENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USES() { return GetToken(Java20Parser.USES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROVIDES() { return GetToken(Java20Parser.PROVIDES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(Java20Parser.WITH, 0); }
		public ModuleDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterModuleDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitModuleDirective(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDirectiveContext moduleDirective() {
		ModuleDirectiveContext _localctx = new ModuleDirectiveContext(Context, State);
		EnterRule(_localctx, 88, RULE_moduleDirective);
		int _la;
		try {
			State = 889;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REQUIRES:
				EnterOuterAlt(_localctx, 1);
				{
				State = 832;
				Match(REQUIRES);
				State = 836;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TRANSITIVE || _la==STATIC) {
					{
					{
					State = 833;
					requiresModifier();
					}
					}
					State = 838;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 839;
				moduleName();
				State = 840;
				Match(SEMI);
				}
				break;
			case EXPORTS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 842;
				Match(EXPORTS);
				State = 843;
				packageName();
				State = 853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TO) {
					{
					State = 844;
					Match(TO);
					State = 845;
					moduleName();
					State = 850;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 846;
						Match(COMMA);
						State = 847;
						moduleName();
						}
						}
						State = 852;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 855;
				Match(SEMI);
				}
				break;
			case OPENS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 857;
				Match(OPENS);
				State = 858;
				packageName();
				State = 868;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TO) {
					{
					State = 859;
					Match(TO);
					State = 860;
					moduleName();
					State = 865;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 861;
						Match(COMMA);
						State = 862;
						moduleName();
						}
						}
						State = 867;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 870;
				Match(SEMI);
				}
				break;
			case USES:
				EnterOuterAlt(_localctx, 4);
				{
				State = 872;
				Match(USES);
				State = 873;
				typeName();
				State = 874;
				Match(SEMI);
				}
				break;
			case PROVIDES:
				EnterOuterAlt(_localctx, 5);
				{
				State = 876;
				Match(PROVIDES);
				State = 877;
				typeName();
				State = 878;
				Match(WITH);
				State = 879;
				typeName();
				State = 884;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 880;
					Match(COMMA);
					State = 881;
					typeName();
					}
					}
					State = 886;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 887;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequiresModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSITIVE() { return GetToken(Java20Parser.TRANSITIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(Java20Parser.STATIC, 0); }
		public RequiresModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requiresModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterRequiresModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitRequiresModifier(this);
		}
	}

	[RuleVersion(0)]
	public RequiresModifierContext requiresModifier() {
		RequiresModifierContext _localctx = new RequiresModifierContext(Context, State);
		EnterRule(_localctx, 90, RULE_requiresModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 891;
			_la = TokenStream.LA(1);
			if ( !(_la==TRANSITIVE || _la==STATIC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NormalClassDeclarationContext normalClassDeclaration() {
			return GetRuleContext<NormalClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordDeclarationContext recordDeclaration() {
			return GetRuleContext<RecordDeclarationContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 92, RULE_classDeclaration);
		try {
			State = 896;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 893;
				normalClassDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 894;
				enumDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 895;
				recordDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(Java20Parser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassModifierContext[] classModifier() {
			return GetRuleContexts<ClassModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassModifierContext classModifier(int i) {
			return GetRuleContext<ClassModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassExtendsContext classExtends() {
			return GetRuleContext<ClassExtendsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassImplementsContext classImplements() {
			return GetRuleContext<ClassImplementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassPermitsContext classPermits() {
			return GetRuleContext<ClassPermitsContext>(0);
		}
		public NormalClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalClassDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterNormalClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitNormalClassDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public NormalClassDeclarationContext normalClassDeclaration() {
		NormalClassDeclarationContext _localctx = new NormalClassDeclarationContext(Context, State);
		EnterRule(_localctx, 94, RULE_normalClassDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 901;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 115967724764792840L) != 0) || _la==AT) {
				{
				{
				State = 898;
				classModifier();
				}
				}
				State = 903;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 904;
			Match(CLASS);
			State = 905;
			typeIdentifier();
			State = 907;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 906;
				typeParameters();
				}
			}

			State = 910;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 909;
				classExtends();
				}
			}

			State = 913;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 912;
				classImplements();
				}
			}

			State = 916;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PERMITS) {
				{
				State = 915;
				classPermits();
				}
			}

			State = 918;
			classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(Java20Parser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(Java20Parser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(Java20Parser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(Java20Parser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(Java20Parser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(Java20Parser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEALED() { return GetToken(Java20Parser.SEALED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONSEALED() { return GetToken(Java20Parser.NONSEALED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICTFP() { return GetToken(Java20Parser.STRICTFP, 0); }
		public ClassModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterClassModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitClassModifier(this);
		}
	}

	[RuleVersion(0)]
	public ClassModifierContext classModifier() {
		ClassModifierContext _localctx = new ClassModifierContext(Context, State);
		EnterRule(_localctx, 96, RULE_classModifier);
		try {
			State = 930;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 920;
				annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 921;
				Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 922;
				Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 923;
				Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 924;
				Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 925;
				Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 926;
				Match(FINAL);
				}
				break;
			case SEALED:
				EnterOuterAlt(_localctx, 8);
				{
				State = 927;
				Match(SEALED);
				}
				break;
			case NONSEALED:
				EnterOuterAlt(_localctx, 9);
				{
				State = 928;
				Match(NONSEALED);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 10);
				{
				State = 929;
				Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(Java20Parser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(Java20Parser.GT, 0); }
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 98, RULE_typeParameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 932;
			Match(LT);
			State = 933;
			typeParameterList();
			State = 934;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java20Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java20Parser.COMMA, i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 100, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 936;
			typeParameter();
			State = 941;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 937;
				Match(COMMA);
				State = 938;
				typeParameter();
				}
				}
				State = 943;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassExtendsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(Java20Parser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ClassExtendsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classExtends; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterClassExtends(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitClassExtends(this);
		}
	}

	[RuleVersion(0)]
	public ClassExtendsContext classExtends() {
		ClassExtendsContext _localctx = new ClassExtendsContext(Context, State);
		EnterRule(_localctx, 102, RULE_classExtends);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 944;
			Match(EXTENDS);
			State = 945;
			classType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassImplementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLEMENTS() { return GetToken(Java20Parser.IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		public ClassImplementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classImplements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterClassImplements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitClassImplements(this);
		}
	}

	[RuleVersion(0)]
	public ClassImplementsContext classImplements() {
		ClassImplementsContext _localctx = new ClassImplementsContext(Context, State);
		EnterRule(_localctx, 104, RULE_classImplements);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 947;
			Match(IMPLEMENTS);
			State = 948;
			interfaceTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeContext[] interfaceType() {
			return GetRuleContexts<InterfaceTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeContext interfaceType(int i) {
			return GetRuleContext<InterfaceTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java20Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java20Parser.COMMA, i);
		}
		public InterfaceTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceTypeList(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeListContext interfaceTypeList() {
		InterfaceTypeListContext _localctx = new InterfaceTypeListContext(Context, State);
		EnterRule(_localctx, 106, RULE_interfaceTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 950;
			interfaceType();
			State = 955;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 951;
				Match(COMMA);
				State = 952;
				interfaceType();
				}
				}
				State = 957;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassPermitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERMITS() { return GetToken(Java20Parser.PERMITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java20Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java20Parser.COMMA, i);
		}
		public ClassPermitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classPermits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterClassPermits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitClassPermits(this);
		}
	}

	[RuleVersion(0)]
	public ClassPermitsContext classPermits() {
		ClassPermitsContext _localctx = new ClassPermitsContext(Context, State);
		EnterRule(_localctx, 108, RULE_classPermits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 958;
			Match(PERMITS);
			State = 959;
			typeName();
			State = 964;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 960;
				Match(COMMA);
				State = 961;
				typeName();
				}
				}
				State = 966;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(Java20Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(Java20Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 110, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 967;
			Match(LBRACE);
			State = 971;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8512665130204132856L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288230376187502595L) != 0)) {
				{
				{
				State = 968;
				classBodyDeclaration();
				}
				}
				State = 973;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 974;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberDeclarationContext classMemberDeclaration() {
			return GetRuleContext<ClassMemberDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstanceInitializerContext instanceInitializer() {
			return GetRuleContext<InstanceInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StaticInitializerContext staticInitializer() {
			return GetRuleContext<StaticInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public ClassBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBodyDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterClassBodyDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitClassBodyDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyDeclarationContext classBodyDeclaration() {
		ClassBodyDeclarationContext _localctx = new ClassBodyDeclarationContext(Context, State);
		EnterRule(_localctx, 112, RULE_classBodyDeclaration);
		try {
			State = 980;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 976;
				classMemberDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 977;
				instanceInitializer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 978;
				staticInitializer();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 979;
				constructorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		public ClassMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterClassMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitClassMemberDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationContext classMemberDeclaration() {
		ClassMemberDeclarationContext _localctx = new ClassMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 114, RULE_classMemberDeclaration);
		try {
			State = 987;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 982;
				fieldDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 983;
				methodDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 984;
				classDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 985;
				interfaceDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 986;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorListContext variableDeclaratorList() {
			return GetRuleContext<VariableDeclaratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldModifierContext[] fieldModifier() {
			return GetRuleContexts<FieldModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldModifierContext fieldModifier(int i) {
			return GetRuleContext<FieldModifierContext>(i);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 116, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 992;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 35)) & ~0x3f) == 0 && ((1L << (_la - 35)) & 2251802230882305L) != 0)) {
				{
				{
				State = 989;
				fieldModifier();
				}
				}
				State = 994;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 995;
			unannType();
			State = 996;
			variableDeclaratorList();
			State = 997;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(Java20Parser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(Java20Parser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(Java20Parser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(Java20Parser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(Java20Parser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSIENT() { return GetToken(Java20Parser.TRANSIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(Java20Parser.VOLATILE, 0); }
		public FieldModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterFieldModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitFieldModifier(this);
		}
	}

	[RuleVersion(0)]
	public FieldModifierContext fieldModifier() {
		FieldModifierContext _localctx = new FieldModifierContext(Context, State);
		EnterRule(_localctx, 118, RULE_fieldModifier);
		try {
			State = 1007;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 999;
				annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1000;
				Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1001;
				Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1002;
				Match(PRIVATE);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1003;
				Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1004;
				Match(FINAL);
				}
				break;
			case TRANSIENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1005;
				Match(TRANSIENT);
				}
				break;
			case VOLATILE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1006;
				Match(VOLATILE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java20Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java20Parser.COMMA, i);
		}
		public VariableDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorList(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorListContext variableDeclaratorList() {
		VariableDeclaratorListContext _localctx = new VariableDeclaratorListContext(Context, State);
		EnterRule(_localctx, 120, RULE_variableDeclaratorList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1009;
			variableDeclarator();
			State = 1014;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1010;
					Match(COMMA);
					State = 1011;
					variableDeclarator();
					}
					} 
				}
				State = 1016;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Java20Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 122, RULE_variableDeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1017;
			variableDeclaratorId();
			State = 1020;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				{
				State = 1018;
				Match(ASSIGN);
				State = 1019;
				variableInitializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(Context, State);
		EnterRule(_localctx, 124, RULE_variableDeclaratorId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1022;
			Match(Identifier);
			State = 1024;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 1023;
				dims();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 126, RULE_variableInitializer);
		try {
			State = 1028;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case SWITCH:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case TextBlock:
			case NullLiteral:
			case LPAREN:
			case AT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1026;
				expression();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1027;
				arrayInitializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnannReferenceTypeContext unannReferenceType() {
			return GetRuleContext<UnannReferenceTypeContext>(0);
		}
		public UnannTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterUnannType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitUnannType(this);
		}
	}

	[RuleVersion(0)]
	public UnannTypeContext unannType() {
		UnannTypeContext _localctx = new UnannTypeContext(Context, State);
		EnterRule(_localctx, 128, RULE_unannType);
		try {
			State = 1032;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1030;
				unannPrimitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1031;
				unannReferenceType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannPrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(Java20Parser.BOOLEAN, 0); }
		public UnannPrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannPrimitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterUnannPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitUnannPrimitiveType(this);
		}
	}

	[RuleVersion(0)]
	public UnannPrimitiveTypeContext unannPrimitiveType() {
		UnannPrimitiveTypeContext _localctx = new UnannPrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 130, RULE_unannPrimitiveType);
		try {
			State = 1036;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1034;
				numericType();
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1035;
				Match(BOOLEAN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannReferenceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeVariableContext unannTypeVariable() {
			return GetRuleContext<UnannTypeVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnannArrayTypeContext unannArrayType() {
			return GetRuleContext<UnannArrayTypeContext>(0);
		}
		public UnannReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannReferenceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterUnannReferenceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitUnannReferenceType(this);
		}
	}

	[RuleVersion(0)]
	public UnannReferenceTypeContext unannReferenceType() {
		UnannReferenceTypeContext _localctx = new UnannReferenceTypeContext(Context, State);
		EnterRule(_localctx, 132, RULE_unannReferenceType);
		try {
			State = 1041;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1038;
				unannClassOrInterfaceType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1039;
				unannTypeVariable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1040;
				unannArrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassOrInterfaceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PackageNameContext packageName() {
			return GetRuleContext<PackageNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java20Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UCOITContext uCOIT() {
			return GetRuleContext<UCOITContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public UnannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassOrInterfaceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterUnannClassOrInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitUnannClassOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
		UnannClassOrInterfaceTypeContext _localctx = new UnannClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 134, RULE_unannClassOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1051;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				State = 1043;
				packageName();
				State = 1044;
				Match(DOT);
				State = 1048;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 1045;
					annotation();
					}
					}
					State = 1050;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 1053;
			typeIdentifier();
			State = 1055;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				{
				State = 1054;
				typeArguments();
				}
				break;
			}
			State = 1058;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				State = 1057;
				uCOIT();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UCOITContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java20Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UCOITContext uCOIT() {
			return GetRuleContext<UCOITContext>(0);
		}
		public UCOITContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uCOIT; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterUCOIT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitUCOIT(this);
		}
	}

	[RuleVersion(0)]
	public UCOITContext uCOIT() {
		UCOITContext _localctx = new UCOITContext(Context, State);
		EnterRule(_localctx, 136, RULE_uCOIT);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1060;
			Match(DOT);
			State = 1064;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 1061;
				annotation();
				}
				}
				State = 1066;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1067;
			typeIdentifier();
			State = 1069;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				{
				State = 1068;
				typeArguments();
				}
				break;
			}
			State = 1072;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				{
				State = 1071;
				uCOIT();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java20Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PackageNameContext packageName() {
			return GetRuleContext<PackageNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public UnannClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterUnannClassType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitUnannClassType(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassTypeContext unannClassType() {
		UnannClassTypeContext _localctx = new UnannClassTypeContext(Context, State);
		EnterRule(_localctx, 138, RULE_unannClassType);
		int _la;
		try {
			State = 1093;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1074;
				typeIdentifier();
				State = 1076;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1075;
					typeArguments();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1080;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
				case 1:
					{
					State = 1078;
					packageName();
					}
					break;
				case 2:
					{
					State = 1079;
					unannClassOrInterfaceType();
					}
					break;
				}
				State = 1082;
				Match(DOT);
				State = 1086;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 1083;
					annotation();
					}
					}
					State = 1088;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1089;
				typeIdentifier();
				State = 1091;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1090;
					typeArguments();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannInterfaceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannClassTypeContext unannClassType() {
			return GetRuleContext<UnannClassTypeContext>(0);
		}
		public UnannInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannInterfaceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterUnannInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitUnannInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public UnannInterfaceTypeContext unannInterfaceType() {
		UnannInterfaceTypeContext _localctx = new UnannInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 140, RULE_unannInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1095;
			unannClassType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannTypeVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		public UnannTypeVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannTypeVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterUnannTypeVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitUnannTypeVariable(this);
		}
	}

	[RuleVersion(0)]
	public UnannTypeVariableContext unannTypeVariable() {
		UnannTypeVariableContext _localctx = new UnannTypeVariableContext(Context, State);
		EnterRule(_localctx, 142, RULE_unannTypeVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1097;
			typeIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeVariableContext unannTypeVariable() {
			return GetRuleContext<UnannTypeVariableContext>(0);
		}
		public UnannArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannArrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterUnannArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitUnannArrayType(this);
		}
	}

	[RuleVersion(0)]
	public UnannArrayTypeContext unannArrayType() {
		UnannArrayTypeContext _localctx = new UnannArrayTypeContext(Context, State);
		EnterRule(_localctx, 144, RULE_unannArrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				{
				State = 1099;
				unannPrimitiveType();
				}
				break;
			case 2:
				{
				State = 1100;
				unannClassOrInterfaceType();
				}
				break;
			case 3:
				{
				State = 1101;
				unannTypeVariable();
				}
				break;
			}
			State = 1104;
			dims();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodHeaderContext methodHeader() {
			return GetRuleContext<MethodHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodModifierContext[] methodModifier() {
			return GetRuleContexts<MethodModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodModifierContext methodModifier(int i) {
			return GetRuleContext<MethodModifierContext>(i);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 146, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 692569214556569600L) != 0) || _la==AT) {
				{
				{
				State = 1106;
				methodModifier();
				}
				}
				State = 1111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1112;
			methodHeader();
			State = 1113;
			methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(Java20Parser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(Java20Parser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(Java20Parser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(Java20Parser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(Java20Parser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(Java20Parser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNCHRONIZED() { return GetToken(Java20Parser.SYNCHRONIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIVE() { return GetToken(Java20Parser.NATIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICTFP() { return GetToken(Java20Parser.STRICTFP, 0); }
		public MethodModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterMethodModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitMethodModifier(this);
		}
	}

	[RuleVersion(0)]
	public MethodModifierContext methodModifier() {
		MethodModifierContext _localctx = new MethodModifierContext(Context, State);
		EnterRule(_localctx, 148, RULE_methodModifier);
		try {
			State = 1125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1115;
				annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1116;
				Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1117;
				Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1118;
				Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1119;
				Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1120;
				Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1121;
				Match(FINAL);
				}
				break;
			case SYNCHRONIZED:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1122;
				Match(SYNCHRONIZED);
				}
				break;
			case NATIVE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1123;
				Match(NATIVE);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1124;
				Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodHeaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResultContext result() {
			return GetRuleContext<ResultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclaratorContext methodDeclarator() {
			return GetRuleContext<MethodDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowsTContext throwsT() {
			return GetRuleContext<ThrowsTContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public MethodHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodHeader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterMethodHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitMethodHeader(this);
		}
	}

	[RuleVersion(0)]
	public MethodHeaderContext methodHeader() {
		MethodHeaderContext _localctx = new MethodHeaderContext(Context, State);
		EnterRule(_localctx, 150, RULE_methodHeader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1127;
				typeParameters();
				State = 1131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 1128;
					annotation();
					}
					}
					State = 1133;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1136;
			result();
			State = 1137;
			methodDeclarator();
			State = 1139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 1138;
				throwsT();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(Java20Parser.VOID, 0); }
		public ResultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterResult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitResult(this);
		}
	}

	[RuleVersion(0)]
	public ResultContext result() {
		ResultContext _localctx = new ResultContext(Context, State);
		EnterRule(_localctx, 152, RULE_result);
		try {
			State = 1143;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1141;
				unannType();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1142;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReceiverParameterContext receiverParameter() {
			return GetRuleContext<ReceiverParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Java20Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public MethodDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclaratorContext methodDeclarator() {
		MethodDeclaratorContext _localctx = new MethodDeclaratorContext(Context, State);
		EnterRule(_localctx, 154, RULE_methodDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1145;
			Match(Identifier);
			State = 1146;
			Match(LPAREN);
			State = 1150;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 1147;
				receiverParameter();
				State = 1148;
				Match(COMMA);
				}
				break;
			}
			State = 1153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18102533424676864L) != 0) || _la==AT || _la==Identifier) {
				{
				State = 1152;
				formalParameterList();
				}
			}

			State = 1155;
			Match(RPAREN);
			State = 1157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK || _la==AT) {
				{
				State = 1156;
				dims();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReceiverParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(Java20Parser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java20Parser.DOT, 0); }
		public ReceiverParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receiverParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterReceiverParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitReceiverParameter(this);
		}
	}

	[RuleVersion(0)]
	public ReceiverParameterContext receiverParameter() {
		ReceiverParameterContext _localctx = new ReceiverParameterContext(Context, State);
		EnterRule(_localctx, 156, RULE_receiverParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 1159;
				annotation();
				}
				}
				State = 1164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1165;
			unannType();
			State = 1168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 1166;
				Match(Identifier);
				State = 1167;
				Match(DOT);
				}
			}

			State = 1170;
			Match(THIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java20Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java20Parser.COMMA, i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 158, RULE_formalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1172;
			formalParameter();
			State = 1177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1173;
				Match(COMMA);
				State = 1174;
				formalParameter();
				}
				}
				State = 1179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableArityParameterContext variableArityParameter() {
			return GetRuleContext<VariableArityParameterContext>(0);
		}
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(Context, State);
		EnterRule(_localctx, 160, RULE_formalParameter);
		int _la;
		try {
			State = 1190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FINAL || _la==AT) {
					{
					{
					State = 1180;
					variableModifier();
					}
					}
					State = 1185;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1186;
				unannType();
				State = 1187;
				variableDeclaratorId();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1189;
				variableArityParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableArityParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(Java20Parser.ELLIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public VariableArityParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableArityParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterVariableArityParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitVariableArityParameter(this);
		}
	}

	[RuleVersion(0)]
	public VariableArityParameterContext variableArityParameter() {
		VariableArityParameterContext _localctx = new VariableArityParameterContext(Context, State);
		EnterRule(_localctx, 162, RULE_variableArityParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1192;
				variableModifier();
				}
				}
				State = 1197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1198;
			unannType();
			State = 1202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 1199;
				annotation();
				}
				}
				State = 1204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1205;
			Match(ELLIPSIS);
			State = 1206;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(Java20Parser.FINAL, 0); }
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterVariableModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitVariableModifier(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(Context, State);
		EnterRule(_localctx, 164, RULE_variableModifier);
		try {
			State = 1210;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1208;
				annotation();
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1209;
				Match(FINAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowsTContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROWS() { return GetToken(Java20Parser.THROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionTypeListContext exceptionTypeList() {
			return GetRuleContext<ExceptionTypeListContext>(0);
		}
		public ThrowsTContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwsT; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterThrowsT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitThrowsT(this);
		}
	}

	[RuleVersion(0)]
	public ThrowsTContext throwsT() {
		ThrowsTContext _localctx = new ThrowsTContext(Context, State);
		EnterRule(_localctx, 166, RULE_throwsT);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1212;
			Match(THROWS);
			State = 1213;
			exceptionTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionTypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionTypeContext[] exceptionType() {
			return GetRuleContexts<ExceptionTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionTypeContext exceptionType(int i) {
			return GetRuleContext<ExceptionTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java20Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java20Parser.COMMA, i);
		}
		public ExceptionTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionTypeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterExceptionTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitExceptionTypeList(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionTypeListContext exceptionTypeList() {
		ExceptionTypeListContext _localctx = new ExceptionTypeListContext(Context, State);
		EnterRule(_localctx, 168, RULE_exceptionTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1215;
			exceptionType();
			State = 1220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1216;
				Match(COMMA);
				State = 1217;
				exceptionType();
				}
				}
				State = 1222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ExceptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterExceptionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitExceptionType(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionTypeContext exceptionType() {
		ExceptionTypeContext _localctx = new ExceptionTypeContext(Context, State);
		EnterRule(_localctx, 170, RULE_exceptionType);
		try {
			State = 1225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1223;
				classType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1224;
				typeVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 172, RULE_methodBody);
		try {
			State = 1229;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1227;
				block();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1228;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public InstanceInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterInstanceInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitInstanceInitializer(this);
		}
	}

	[RuleVersion(0)]
	public InstanceInitializerContext instanceInitializer() {
		InstanceInitializerContext _localctx = new InstanceInitializerContext(Context, State);
		EnterRule(_localctx, 174, RULE_instanceInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1231;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(Java20Parser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StaticInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterStaticInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitStaticInitializer(this);
		}
	}

	[RuleVersion(0)]
	public StaticInitializerContext staticInitializer() {
		StaticInitializerContext _localctx = new StaticInitializerContext(Context, State);
		EnterRule(_localctx, 176, RULE_staticInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1233;
			Match(STATIC);
			State = 1234;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorDeclaratorContext constructorDeclarator() {
			return GetRuleContext<ConstructorDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorBodyContext constructorBody() {
			return GetRuleContext<ConstructorBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorModifierContext[] constructorModifier() {
			return GetRuleContexts<ConstructorModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorModifierContext constructorModifier(int i) {
			return GetRuleContext<ConstructorModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowsTContext throwsT() {
			return GetRuleContext<ThrowsTContext>(0);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 178, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & 68719476743L) != 0)) {
				{
				{
				State = 1236;
				constructorModifier();
				}
				}
				State = 1241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1242;
			constructorDeclarator();
			State = 1244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 1243;
				throwsT();
				}
			}

			State = 1246;
			constructorBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(Java20Parser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(Java20Parser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(Java20Parser.PRIVATE, 0); }
		public ConstructorModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterConstructorModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitConstructorModifier(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorModifierContext constructorModifier() {
		ConstructorModifierContext _localctx = new ConstructorModifierContext(Context, State);
		EnterRule(_localctx, 180, RULE_constructorModifier);
		try {
			State = 1252;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1248;
				annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1249;
				Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1250;
				Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1251;
				Match(PRIVATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReceiverParameterContext receiverParameter() {
			return GetRuleContext<ReceiverParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Java20Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ConstructorDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterConstructorDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitConstructorDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclaratorContext constructorDeclarator() {
		ConstructorDeclaratorContext _localctx = new ConstructorDeclaratorContext(Context, State);
		EnterRule(_localctx, 182, RULE_constructorDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1254;
				typeParameters();
				}
			}

			State = 1257;
			simpleTypeName();
			State = 1258;
			Match(LPAREN);
			State = 1262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				{
				State = 1259;
				receiverParameter();
				State = 1260;
				Match(COMMA);
				}
				break;
			}
			State = 1265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18102533424676864L) != 0) || _la==AT || _la==Identifier) {
				{
				State = 1264;
				formalParameterList();
				}
			}

			State = 1267;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		public SimpleTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterSimpleTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitSimpleTypeName(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeNameContext simpleTypeName() {
		SimpleTypeNameContext _localctx = new SimpleTypeNameContext(Context, State);
		EnterRule(_localctx, 184, RULE_simpleTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1269;
			typeIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(Java20Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(Java20Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitConstructorInvocationContext explicitConstructorInvocation() {
			return GetRuleContext<ExplicitConstructorInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementsContext blockStatements() {
			return GetRuleContext<BlockStatementsContext>(0);
		}
		public ConstructorBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterConstructorBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitConstructorBody(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorBodyContext constructorBody() {
		ConstructorBodyContext _localctx = new ConstructorBodyContext(Context, State);
		EnterRule(_localctx, 186, RULE_constructorBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1271;
			Match(LBRACE);
			State = 1273;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				{
				State = 1272;
				explicitConstructorInvocation();
				}
				break;
			}
			State = 1276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4610965747420531208L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 576461576941625323L) != 0)) {
				{
				State = 1275;
				blockStatements();
				}
			}

			State = 1278;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitConstructorInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(Java20Parser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(Java20Parser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java20Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExplicitConstructorInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitConstructorInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterExplicitConstructorInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitExplicitConstructorInvocation(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitConstructorInvocationContext explicitConstructorInvocation() {
		ExplicitConstructorInvocationContext _localctx = new ExplicitConstructorInvocationContext(Context, State);
		EnterRule(_localctx, 188, RULE_explicitConstructorInvocation);
		int _la;
		try {
			State = 1306;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1280;
					typeArguments();
					}
				}

				State = 1283;
				_la = TokenStream.LA(1);
				if ( !(_la==SUPER || _la==THIS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1284;
				Match(LPAREN);
				State = 1286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603651042876063744L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288232437939441649L) != 0)) {
					{
					State = 1285;
					argumentList();
					}
				}

				State = 1288;
				Match(RPAREN);
				State = 1289;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1292;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
				case 1:
					{
					State = 1290;
					expressionName();
					}
					break;
				case 2:
					{
					State = 1291;
					primary();
					}
					break;
				}
				State = 1294;
				Match(DOT);
				State = 1296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1295;
					typeArguments();
					}
				}

				State = 1298;
				Match(SUPER);
				State = 1299;
				Match(LPAREN);
				State = 1301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603651042876063744L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288232437939441649L) != 0)) {
					{
					State = 1300;
					argumentList();
					}
				}

				State = 1303;
				Match(RPAREN);
				State = 1304;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(Java20Parser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassModifierContext[] classModifier() {
			return GetRuleContexts<ClassModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassModifierContext classModifier(int i) {
			return GetRuleContext<ClassModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassImplementsContext classImplements() {
			return GetRuleContext<ClassImplementsContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 190, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 115967724764792840L) != 0) || _la==AT) {
				{
				{
				State = 1308;
				classModifier();
				}
				}
				State = 1313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1314;
			Match(ENUM);
			State = 1315;
			typeIdentifier();
			State = 1317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 1316;
				classImplements();
				}
			}

			State = 1319;
			enumBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(Java20Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(Java20Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantListContext enumConstantList() {
			return GetRuleContext<EnumConstantListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Java20Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumBodyDeclarationsContext enumBodyDeclarations() {
			return GetRuleContext<EnumBodyDeclarationsContext>(0);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 192, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1321;
			Match(LBRACE);
			State = 1323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT || _la==Identifier) {
				{
				State = 1322;
				enumConstantList();
				}
			}

			State = 1326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1325;
				Match(COMMA);
				}
			}

			State = 1329;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 1328;
				enumBodyDeclarations();
				}
			}

			State = 1331;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantContext[] enumConstant() {
			return GetRuleContexts<EnumConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantContext enumConstant(int i) {
			return GetRuleContext<EnumConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java20Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java20Parser.COMMA, i);
		}
		public EnumConstantListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstantList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterEnumConstantList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitEnumConstantList(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantListContext enumConstantList() {
		EnumConstantListContext _localctx = new EnumConstantListContext(Context, State);
		EnterRule(_localctx, 194, RULE_enumConstantList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1333;
			enumConstant();
			State = 1338;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,132,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1334;
					Match(COMMA);
					State = 1335;
					enumConstant();
					}
					} 
				}
				State = 1340;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,132,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantModifierContext[] enumConstantModifier() {
			return GetRuleContexts<EnumConstantModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantModifierContext enumConstantModifier(int i) {
			return GetRuleContext<EnumConstantModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public EnumConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterEnumConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitEnumConstant(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantContext enumConstant() {
		EnumConstantContext _localctx = new EnumConstantContext(Context, State);
		EnterRule(_localctx, 196, RULE_enumConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 1341;
				enumConstantModifier();
				}
				}
				State = 1346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1347;
			Match(Identifier);
			State = 1353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 1348;
				Match(LPAREN);
				State = 1350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603651042876063744L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288232437939441649L) != 0)) {
					{
					State = 1349;
					argumentList();
					}
				}

				State = 1352;
				Match(RPAREN);
				}
			}

			State = 1356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACE) {
				{
				State = 1355;
				classBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public EnumConstantModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstantModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterEnumConstantModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitEnumConstantModifier(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantModifierContext enumConstantModifier() {
		EnumConstantModifierContext _localctx = new EnumConstantModifierContext(Context, State);
		EnterRule(_localctx, 198, RULE_enumConstantModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1358;
			annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public EnumBodyDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBodyDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterEnumBodyDeclarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitEnumBodyDeclarations(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyDeclarationsContext enumBodyDeclarations() {
		EnumBodyDeclarationsContext _localctx = new EnumBodyDeclarationsContext(Context, State);
		EnterRule(_localctx, 200, RULE_enumBodyDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1360;
			Match(SEMI);
			State = 1364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8512665130204132856L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288230376187502595L) != 0)) {
				{
				{
				State = 1361;
				classBodyDeclaration();
				}
				}
				State = 1366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECORD() { return GetToken(Java20Parser.RECORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordHeaderContext recordHeader() {
			return GetRuleContext<RecordHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordBodyContext recordBody() {
			return GetRuleContext<RecordBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassModifierContext[] classModifier() {
			return GetRuleContexts<ClassModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassModifierContext classModifier(int i) {
			return GetRuleContext<ClassModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassImplementsContext classImplements() {
			return GetRuleContext<ClassImplementsContext>(0);
		}
		public RecordDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterRecordDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitRecordDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public RecordDeclarationContext recordDeclaration() {
		RecordDeclarationContext _localctx = new RecordDeclarationContext(Context, State);
		EnterRule(_localctx, 202, RULE_recordDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 115967724764792840L) != 0) || _la==AT) {
				{
				{
				State = 1367;
				classModifier();
				}
				}
				State = 1372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1373;
			Match(RECORD);
			State = 1374;
			typeIdentifier();
			State = 1376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1375;
				typeParameters();
				}
			}

			State = 1378;
			recordHeader();
			State = 1380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 1379;
				classImplements();
				}
			}

			State = 1382;
			recordBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordHeaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RecordComponentListContext recordComponentList() {
			return GetRuleContext<RecordComponentListContext>(0);
		}
		public RecordHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordHeader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterRecordHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitRecordHeader(this);
		}
	}

	[RuleVersion(0)]
	public RecordHeaderContext recordHeader() {
		RecordHeaderContext _localctx = new RecordHeaderContext(Context, State);
		EnterRule(_localctx, 204, RULE_recordHeader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1384;
			Match(LPAREN);
			State = 1386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18102499064938496L) != 0) || _la==AT || _la==Identifier) {
				{
				State = 1385;
				recordComponentList();
				}
			}

			State = 1388;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordComponentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecordComponentContext[] recordComponent() {
			return GetRuleContexts<RecordComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordComponentContext recordComponent(int i) {
			return GetRuleContext<RecordComponentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java20Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java20Parser.COMMA, i);
		}
		public RecordComponentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordComponentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterRecordComponentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitRecordComponentList(this);
		}
	}

	[RuleVersion(0)]
	public RecordComponentListContext recordComponentList() {
		RecordComponentListContext _localctx = new RecordComponentListContext(Context, State);
		EnterRule(_localctx, 206, RULE_recordComponentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1390;
			recordComponent();
			State = 1395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1391;
				Match(COMMA);
				State = 1392;
				recordComponent();
				}
				}
				State = 1397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordComponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RecordComponentModifierContext[] recordComponentModifier() {
			return GetRuleContexts<RecordComponentModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordComponentModifierContext recordComponentModifier(int i) {
			return GetRuleContext<RecordComponentModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableArityRecordComponentContext variableArityRecordComponent() {
			return GetRuleContext<VariableArityRecordComponentContext>(0);
		}
		public RecordComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterRecordComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitRecordComponent(this);
		}
	}

	[RuleVersion(0)]
	public RecordComponentContext recordComponent() {
		RecordComponentContext _localctx = new RecordComponentContext(Context, State);
		EnterRule(_localctx, 208, RULE_recordComponent);
		int _la;
		try {
			State = 1408;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 1398;
					recordComponentModifier();
					}
					}
					State = 1403;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1404;
				unannType();
				State = 1405;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1407;
				variableArityRecordComponent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableArityRecordComponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(Java20Parser.ELLIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RecordComponentModifierContext[] recordComponentModifier() {
			return GetRuleContexts<RecordComponentModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordComponentModifierContext recordComponentModifier(int i) {
			return GetRuleContext<RecordComponentModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public VariableArityRecordComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableArityRecordComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterVariableArityRecordComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitVariableArityRecordComponent(this);
		}
	}

	[RuleVersion(0)]
	public VariableArityRecordComponentContext variableArityRecordComponent() {
		VariableArityRecordComponentContext _localctx = new VariableArityRecordComponentContext(Context, State);
		EnterRule(_localctx, 210, RULE_variableArityRecordComponent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 1410;
				recordComponentModifier();
				}
				}
				State = 1415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1416;
			unannType();
			State = 1420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 1417;
				annotation();
				}
				}
				State = 1422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1423;
			Match(ELLIPSIS);
			State = 1424;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordComponentModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public RecordComponentModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordComponentModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterRecordComponentModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitRecordComponentModifier(this);
		}
	}

	[RuleVersion(0)]
	public RecordComponentModifierContext recordComponentModifier() {
		RecordComponentModifierContext _localctx = new RecordComponentModifierContext(Context, State);
		EnterRule(_localctx, 212, RULE_recordComponentModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1426;
			annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(Java20Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(Java20Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RecordBodyDeclarationContext[] recordBodyDeclaration() {
			return GetRuleContexts<RecordBodyDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordBodyDeclarationContext recordBodyDeclaration(int i) {
			return GetRuleContext<RecordBodyDeclarationContext>(i);
		}
		public RecordBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterRecordBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitRecordBody(this);
		}
	}

	[RuleVersion(0)]
	public RecordBodyContext recordBody() {
		RecordBodyContext _localctx = new RecordBodyContext(Context, State);
		EnterRule(_localctx, 214, RULE_recordBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1428;
			Match(LBRACE);
			State = 1432;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8512665130204132856L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288230376187502595L) != 0)) {
				{
				{
				State = 1429;
				recordBodyDeclaration();
				}
				}
				State = 1434;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1435;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordBodyDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclarationContext classBodyDeclaration() {
			return GetRuleContext<ClassBodyDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompactConstructorDeclarationContext compactConstructorDeclaration() {
			return GetRuleContext<CompactConstructorDeclarationContext>(0);
		}
		public RecordBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordBodyDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterRecordBodyDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitRecordBodyDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public RecordBodyDeclarationContext recordBodyDeclaration() {
		RecordBodyDeclarationContext _localctx = new RecordBodyDeclarationContext(Context, State);
		EnterRule(_localctx, 216, RULE_recordBodyDeclaration);
		try {
			State = 1439;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1437;
				classBodyDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1438;
				compactConstructorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompactConstructorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorBodyContext constructorBody() {
			return GetRuleContext<ConstructorBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorModifierContext[] constructorModifier() {
			return GetRuleContexts<ConstructorModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorModifierContext constructorModifier(int i) {
			return GetRuleContext<ConstructorModifierContext>(i);
		}
		public CompactConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compactConstructorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterCompactConstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitCompactConstructorDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public CompactConstructorDeclarationContext compactConstructorDeclaration() {
		CompactConstructorDeclarationContext _localctx = new CompactConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 218, RULE_compactConstructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & 68719476743L) != 0)) {
				{
				{
				State = 1441;
				constructorModifier();
				}
				}
				State = 1446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1447;
			simpleTypeName();
			State = 1448;
			constructorBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NormalInterfaceDeclarationContext normalInterfaceDeclaration() {
			return GetRuleContext<NormalInterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationInterfaceDeclarationContext annotationInterfaceDeclaration() {
			return GetRuleContext<AnnotationInterfaceDeclarationContext>(0);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 220, RULE_interfaceDeclaration);
		try {
			State = 1452;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1450;
				normalInterfaceDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1451;
				annotationInterfaceDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalInterfaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(Java20Parser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceBodyContext interfaceBody() {
			return GetRuleContext<InterfaceBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceModifierContext[] interfaceModifier() {
			return GetRuleContexts<InterfaceModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceModifierContext interfaceModifier(int i) {
			return GetRuleContext<InterfaceModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceExtendsContext interfaceExtends() {
			return GetRuleContext<InterfaceExtendsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfacePermitsContext interfacePermits() {
			return GetRuleContext<InterfacePermitsContext>(0);
		}
		public NormalInterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalInterfaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterNormalInterfaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitNormalInterfaceDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public NormalInterfaceDeclarationContext normalInterfaceDeclaration() {
		NormalInterfaceDeclarationContext _localctx = new NormalInterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 222, RULE_normalInterfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 115967690405054472L) != 0) || _la==AT) {
				{
				{
				State = 1454;
				interfaceModifier();
				}
				}
				State = 1459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1460;
			Match(INTERFACE);
			State = 1461;
			typeIdentifier();
			State = 1463;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1462;
				typeParameters();
				}
			}

			State = 1466;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 1465;
				interfaceExtends();
				}
			}

			State = 1469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PERMITS) {
				{
				State = 1468;
				interfacePermits();
				}
			}

			State = 1471;
			interfaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(Java20Parser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(Java20Parser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(Java20Parser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(Java20Parser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(Java20Parser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEALED() { return GetToken(Java20Parser.SEALED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONSEALED() { return GetToken(Java20Parser.NONSEALED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICTFP() { return GetToken(Java20Parser.STRICTFP, 0); }
		public InterfaceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceModifier(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceModifierContext interfaceModifier() {
		InterfaceModifierContext _localctx = new InterfaceModifierContext(Context, State);
		EnterRule(_localctx, 224, RULE_interfaceModifier);
		try {
			State = 1482;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1473;
				annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1474;
				Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1475;
				Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1476;
				Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1477;
				Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1478;
				Match(STATIC);
				}
				break;
			case SEALED:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1479;
				Match(SEALED);
				}
				break;
			case NONSEALED:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1480;
				Match(NONSEALED);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1481;
				Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceExtendsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(Java20Parser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		public InterfaceExtendsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceExtends; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceExtends(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceExtends(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceExtendsContext interfaceExtends() {
		InterfaceExtendsContext _localctx = new InterfaceExtendsContext(Context, State);
		EnterRule(_localctx, 226, RULE_interfaceExtends);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1484;
			Match(EXTENDS);
			State = 1485;
			interfaceTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfacePermitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERMITS() { return GetToken(Java20Parser.PERMITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java20Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java20Parser.COMMA, i);
		}
		public InterfacePermitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfacePermits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterInterfacePermits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitInterfacePermits(this);
		}
	}

	[RuleVersion(0)]
	public InterfacePermitsContext interfacePermits() {
		InterfacePermitsContext _localctx = new InterfacePermitsContext(Context, State);
		EnterRule(_localctx, 228, RULE_interfacePermits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1487;
			Match(PERMITS);
			State = 1488;
			typeName();
			State = 1493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1489;
				Match(COMMA);
				State = 1490;
				typeName();
				}
				}
				State = 1495;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(Java20Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(Java20Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMemberDeclarationContext[] interfaceMemberDeclaration() {
			return GetRuleContexts<InterfaceMemberDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMemberDeclarationContext interfaceMemberDeclaration(int i) {
			return GetRuleContext<InterfaceMemberDeclarationContext>(i);
		}
		public InterfaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceBody(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyContext interfaceBody() {
		InterfaceBodyContext _localctx = new InterfaceBodyContext(Context, State);
		EnterRule(_localctx, 230, RULE_interfaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1496;
			Match(LBRACE);
			State = 1500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 134105417395735048L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288230376187494401L) != 0)) {
				{
				{
				State = 1497;
				interfaceMemberDeclaration();
				}
				}
				State = 1502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1503;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclarationContext constantDeclaration() {
			return GetRuleContext<ConstantDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
			return GetRuleContext<InterfaceMethodDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		public InterfaceMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMemberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceMemberDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMemberDeclarationContext interfaceMemberDeclaration() {
		InterfaceMemberDeclarationContext _localctx = new InterfaceMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 232, RULE_interfaceMemberDeclaration);
		try {
			State = 1510;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1505;
				constantDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1506;
				interfaceMethodDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1507;
				classDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1508;
				interfaceDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1509;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorListContext variableDeclaratorList() {
			return GetRuleContext<VariableDeclaratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantModifierContext[] constantModifier() {
			return GetRuleContexts<ConstantModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantModifierContext constantModifier(int i) {
			return GetRuleContext<ConstantModifierContext>(i);
		}
		public ConstantDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterConstantDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitConstantDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclarationContext constantDeclaration() {
		ConstantDeclarationContext _localctx = new ConstantDeclarationContext(Context, State);
		EnterRule(_localctx, 234, RULE_constantDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1515;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 35)) & ~0x3f) == 0 && ((1L << (_la - 35)) & 2251799814864897L) != 0)) {
				{
				{
				State = 1512;
				constantModifier();
				}
				}
				State = 1517;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1518;
			unannType();
			State = 1519;
			variableDeclaratorList();
			State = 1520;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(Java20Parser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(Java20Parser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(Java20Parser.FINAL, 0); }
		public ConstantModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterConstantModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitConstantModifier(this);
		}
	}

	[RuleVersion(0)]
	public ConstantModifierContext constantModifier() {
		ConstantModifierContext _localctx = new ConstantModifierContext(Context, State);
		EnterRule(_localctx, 236, RULE_constantModifier);
		try {
			State = 1526;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1522;
				annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1523;
				Match(PUBLIC);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1524;
				Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1525;
				Match(FINAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodHeaderContext methodHeader() {
			return GetRuleContext<MethodHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMethodModifierContext[] interfaceMethodModifier() {
			return GetRuleContexts<InterfaceMethodModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMethodModifierContext interfaceMethodModifier(int i) {
			return GetRuleContext<InterfaceMethodModifierContext>(i);
		}
		public InterfaceMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceMethodDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
		InterfaceMethodDeclarationContext _localctx = new InterfaceMethodDeclarationContext(Context, State);
		EnterRule(_localctx, 238, RULE_interfaceMethodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 113715891128238080L) != 0) || _la==AT) {
				{
				{
				State = 1528;
				interfaceMethodModifier();
				}
				}
				State = 1533;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1534;
			methodHeader();
			State = 1535;
			methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(Java20Parser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(Java20Parser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(Java20Parser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(Java20Parser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(Java20Parser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICTFP() { return GetToken(Java20Parser.STRICTFP, 0); }
		public InterfaceMethodModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceMethodModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceMethodModifier(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodModifierContext interfaceMethodModifier() {
		InterfaceMethodModifierContext _localctx = new InterfaceMethodModifierContext(Context, State);
		EnterRule(_localctx, 240, RULE_interfaceMethodModifier);
		try {
			State = 1544;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1537;
				annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1538;
				Match(PUBLIC);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1539;
				Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1540;
				Match(ABSTRACT);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1541;
				Match(DEFAULT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1542;
				Match(STATIC);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1543;
				Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationInterfaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(Java20Parser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(Java20Parser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationInterfaceBodyContext annotationInterfaceBody() {
			return GetRuleContext<AnnotationInterfaceBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceModifierContext[] interfaceModifier() {
			return GetRuleContexts<InterfaceModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceModifierContext interfaceModifier(int i) {
			return GetRuleContext<InterfaceModifierContext>(i);
		}
		public AnnotationInterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationInterfaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationInterfaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationInterfaceDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationInterfaceDeclarationContext annotationInterfaceDeclaration() {
		AnnotationInterfaceDeclarationContext _localctx = new AnnotationInterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 242, RULE_annotationInterfaceDeclaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1549;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1546;
					interfaceModifier();
					}
					} 
				}
				State = 1551;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			}
			State = 1552;
			Match(AT);
			State = 1553;
			Match(INTERFACE);
			State = 1554;
			typeIdentifier();
			State = 1555;
			annotationInterfaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationInterfaceBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(Java20Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(Java20Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationInterfaceMemberDeclarationContext[] annotationInterfaceMemberDeclaration() {
			return GetRuleContexts<AnnotationInterfaceMemberDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationInterfaceMemberDeclarationContext annotationInterfaceMemberDeclaration(int i) {
			return GetRuleContext<AnnotationInterfaceMemberDeclarationContext>(i);
		}
		public AnnotationInterfaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationInterfaceBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationInterfaceBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationInterfaceBody(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationInterfaceBodyContext annotationInterfaceBody() {
		AnnotationInterfaceBodyContext _localctx = new AnnotationInterfaceBodyContext(Context, State);
		EnterRule(_localctx, 244, RULE_annotationInterfaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1557;
			Match(LBRACE);
			State = 1561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 134105416858864136L) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & 2199023255569L) != 0)) {
				{
				{
				State = 1558;
				annotationInterfaceMemberDeclaration();
				}
				}
				State = 1563;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1564;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationInterfaceMemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationInterfaceElementDeclarationContext annotationInterfaceElementDeclaration() {
			return GetRuleContext<AnnotationInterfaceElementDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclarationContext constantDeclaration() {
			return GetRuleContext<ConstantDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		public AnnotationInterfaceMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationInterfaceMemberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationInterfaceMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationInterfaceMemberDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationInterfaceMemberDeclarationContext annotationInterfaceMemberDeclaration() {
		AnnotationInterfaceMemberDeclarationContext _localctx = new AnnotationInterfaceMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 246, RULE_annotationInterfaceMemberDeclaration);
		try {
			State = 1571;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1566;
				annotationInterfaceElementDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1567;
				constantDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1568;
				classDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1569;
				interfaceDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1570;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationInterfaceElementDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationInterfaceElementModifierContext[] annotationInterfaceElementModifier() {
			return GetRuleContexts<AnnotationInterfaceElementModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationInterfaceElementModifierContext annotationInterfaceElementModifier(int i) {
			return GetRuleContext<AnnotationInterfaceElementModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public AnnotationInterfaceElementDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationInterfaceElementDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationInterfaceElementDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationInterfaceElementDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationInterfaceElementDeclarationContext annotationInterfaceElementDeclaration() {
		AnnotationInterfaceElementDeclarationContext _localctx = new AnnotationInterfaceElementDeclarationContext(Context, State);
		EnterRule(_localctx, 248, RULE_annotationInterfaceElementDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ABSTRACT || _la==PUBLIC || _la==AT) {
				{
				{
				State = 1573;
				annotationInterfaceElementModifier();
				}
				}
				State = 1578;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1579;
			unannType();
			State = 1580;
			Match(Identifier);
			State = 1581;
			Match(LPAREN);
			State = 1582;
			Match(RPAREN);
			State = 1584;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK || _la==AT) {
				{
				State = 1583;
				dims();
				}
			}

			State = 1587;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 1586;
				defaultValue();
				}
			}

			State = 1589;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationInterfaceElementModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(Java20Parser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(Java20Parser.ABSTRACT, 0); }
		public AnnotationInterfaceElementModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationInterfaceElementModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationInterfaceElementModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationInterfaceElementModifier(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationInterfaceElementModifierContext annotationInterfaceElementModifier() {
		AnnotationInterfaceElementModifierContext _localctx = new AnnotationInterfaceElementModifierContext(Context, State);
		EnterRule(_localctx, 250, RULE_annotationInterfaceElementModifier);
		try {
			State = 1594;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1591;
				annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1592;
				Match(PUBLIC);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1593;
				Match(ABSTRACT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(Java20Parser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterDefaultValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitDefaultValue(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 252, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1596;
			Match(DEFAULT);
			State = 1597;
			elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NormalAnnotationContext normalAnnotation() {
			return GetRuleContext<NormalAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MarkerAnnotationContext markerAnnotation() {
			return GetRuleContext<MarkerAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleElementAnnotationContext singleElementAnnotation() {
			return GetRuleContext<SingleElementAnnotationContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 254, RULE_annotation);
		try {
			State = 1602;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1599;
				normalAnnotation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1600;
				markerAnnotation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1601;
				singleElementAnnotation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalAnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(Java20Parser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementValuePairListContext elementValuePairList() {
			return GetRuleContext<ElementValuePairListContext>(0);
		}
		public NormalAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterNormalAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitNormalAnnotation(this);
		}
	}

	[RuleVersion(0)]
	public NormalAnnotationContext normalAnnotation() {
		NormalAnnotationContext _localctx = new NormalAnnotationContext(Context, State);
		EnterRule(_localctx, 256, RULE_normalAnnotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1604;
			Match(AT);
			State = 1605;
			typeName();
			State = 1606;
			Match(LPAREN);
			State = 1608;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 1607;
				elementValuePairList();
				}
			}

			State = 1610;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementValuePairContext[] elementValuePair() {
			return GetRuleContexts<ElementValuePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementValuePairContext elementValuePair(int i) {
			return GetRuleContext<ElementValuePairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java20Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java20Parser.COMMA, i);
		}
		public ElementValuePairListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePairList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterElementValuePairList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitElementValuePairList(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairListContext elementValuePairList() {
		ElementValuePairListContext _localctx = new ElementValuePairListContext(Context, State);
		EnterRule(_localctx, 258, RULE_elementValuePairList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1612;
			elementValuePair();
			State = 1617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1613;
				Match(COMMA);
				State = 1614;
				elementValuePair();
				}
				}
				State = 1619;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Java20Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public ElementValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterElementValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitElementValuePair(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairContext elementValuePair() {
		ElementValuePairContext _localctx = new ElementValuePairContext(Context, State);
		EnterRule(_localctx, 260, RULE_elementValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1620;
			Match(Identifier);
			State = 1621;
			Match(ASSIGN);
			State = 1622;
			elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueArrayInitializerContext elementValueArrayInitializer() {
			return GetRuleContext<ElementValueArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterElementValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitElementValue(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueContext elementValue() {
		ElementValueContext _localctx = new ElementValueContext(Context, State);
		EnterRule(_localctx, 262, RULE_elementValue);
		try {
			State = 1627;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1624;
				conditionalExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1625;
				elementValueArrayInitializer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1626;
				annotation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueArrayInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(Java20Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(Java20Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueListContext elementValueList() {
			return GetRuleContext<ElementValueListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Java20Parser.COMMA, 0); }
		public ElementValueArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValueArrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterElementValueArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitElementValueArrayInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueArrayInitializerContext elementValueArrayInitializer() {
		ElementValueArrayInitializerContext _localctx = new ElementValueArrayInitializerContext(Context, State);
		EnterRule(_localctx, 264, RULE_elementValueArrayInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1629;
			Match(LBRACE);
			State = 1631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603651042876063744L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288232437939449841L) != 0)) {
				{
				State = 1630;
				elementValueList();
				}
			}

			State = 1634;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1633;
				Match(COMMA);
				}
			}

			State = 1636;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext[] elementValue() {
			return GetRuleContexts<ElementValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext elementValue(int i) {
			return GetRuleContext<ElementValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java20Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java20Parser.COMMA, i);
		}
		public ElementValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValueList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterElementValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitElementValueList(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueListContext elementValueList() {
		ElementValueListContext _localctx = new ElementValueListContext(Context, State);
		EnterRule(_localctx, 266, RULE_elementValueList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1638;
			elementValue();
			State = 1643;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,176,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1639;
					Match(COMMA);
					State = 1640;
					elementValue();
					}
					} 
				}
				State = 1645;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,176,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkerAnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(Java20Parser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public MarkerAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markerAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterMarkerAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitMarkerAnnotation(this);
		}
	}

	[RuleVersion(0)]
	public MarkerAnnotationContext markerAnnotation() {
		MarkerAnnotationContext _localctx = new MarkerAnnotationContext(Context, State);
		EnterRule(_localctx, 268, RULE_markerAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1646;
			Match(AT);
			State = 1647;
			typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleElementAnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(Java20Parser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		public SingleElementAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleElementAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterSingleElementAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitSingleElementAnnotation(this);
		}
	}

	[RuleVersion(0)]
	public SingleElementAnnotationContext singleElementAnnotation() {
		SingleElementAnnotationContext _localctx = new SingleElementAnnotationContext(Context, State);
		EnterRule(_localctx, 270, RULE_singleElementAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1649;
			Match(AT);
			State = 1650;
			typeName();
			State = 1651;
			Match(LPAREN);
			State = 1652;
			elementValue();
			State = 1653;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(Java20Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(Java20Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerListContext variableInitializerList() {
			return GetRuleContext<VariableInitializerListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Java20Parser.COMMA, 0); }
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 272, RULE_arrayInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1655;
			Match(LBRACE);
			State = 1657;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603651042876063744L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288232437939449841L) != 0)) {
				{
				State = 1656;
				variableInitializerList();
				}
			}

			State = 1660;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1659;
				Match(COMMA);
				}
			}

			State = 1662;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java20Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java20Parser.COMMA, i);
		}
		public VariableInitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializerList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterVariableInitializerList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitVariableInitializerList(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerListContext variableInitializerList() {
		VariableInitializerListContext _localctx = new VariableInitializerListContext(Context, State);
		EnterRule(_localctx, 274, RULE_variableInitializerList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1664;
			variableInitializer();
			State = 1669;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,179,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1665;
					Match(COMMA);
					State = 1666;
					variableInitializer();
					}
					} 
				}
				State = 1671;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,179,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(Java20Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(Java20Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementsContext blockStatements() {
			return GetRuleContext<BlockStatementsContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 276, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1672;
			Match(LBRACE);
			State = 1674;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4610965747420531208L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 576461576941625323L) != 0)) {
				{
				State = 1673;
				blockStatements();
				}
			}

			State = 1676;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterBlockStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitBlockStatements(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementsContext blockStatements() {
		BlockStatementsContext _localctx = new BlockStatementsContext(Context, State);
		EnterRule(_localctx, 278, RULE_blockStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1678;
			blockStatement();
			State = 1682;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4610965747420531208L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 576461576941625323L) != 0)) {
				{
				{
				State = 1679;
				blockStatement();
				}
				}
				State = 1684;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalClassOrInterfaceDeclarationContext localClassOrInterfaceDeclaration() {
			return GetRuleContext<LocalClassOrInterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationStatementContext localVariableDeclarationStatement() {
			return GetRuleContext<LocalVariableDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 280, RULE_blockStatement);
		try {
			State = 1688;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1685;
				localClassOrInterfaceDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1686;
				localVariableDeclarationStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1687;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalClassOrInterfaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalInterfaceDeclarationContext normalInterfaceDeclaration() {
			return GetRuleContext<NormalInterfaceDeclarationContext>(0);
		}
		public LocalClassOrInterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localClassOrInterfaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterLocalClassOrInterfaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitLocalClassOrInterfaceDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public LocalClassOrInterfaceDeclarationContext localClassOrInterfaceDeclaration() {
		LocalClassOrInterfaceDeclarationContext _localctx = new LocalClassOrInterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 282, RULE_localClassOrInterfaceDeclaration);
		try {
			State = 1692;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1690;
				classDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1691;
				normalInterfaceDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableTypeContext localVariableType() {
			return GetRuleContext<LocalVariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorListContext variableDeclaratorList() {
			return GetRuleContext<VariableDeclaratorListContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 284, RULE_localVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1694;
				variableModifier();
				}
				}
				State = 1699;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1700;
			localVariableType();
			State = 1702;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
			case 1:
				{
				State = 1701;
				variableDeclaratorList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(Java20Parser.VAR, 0); }
		public LocalVariableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableType(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableTypeContext localVariableType() {
		LocalVariableTypeContext _localctx = new LocalVariableTypeContext(Context, State);
		EnterRule(_localctx, 286, RULE_localVariableType);
		try {
			State = 1706;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1704;
				unannType();
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1705;
				Match(VAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		public LocalVariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclarationStatement(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationStatementContext localVariableDeclarationStatement() {
		LocalVariableDeclarationStatementContext _localctx = new LocalVariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 288, RULE_localVariableDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1708;
			localVariableDeclaration();
			State = 1709;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementWithoutTrailingSubstatementContext statementWithoutTrailingSubstatement() {
			return GetRuleContext<StatementWithoutTrailingSubstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabeledStatementContext labeledStatement() {
			return GetRuleContext<LabeledStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfThenStatementContext ifThenStatement() {
			return GetRuleContext<IfThenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfThenElseStatementContext ifThenElseStatement() {
			return GetRuleContext<IfThenElseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 290, RULE_statement);
		try {
			State = 1717;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1711;
				statementWithoutTrailingSubstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1712;
				labeledStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1713;
				ifThenStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1714;
				ifThenElseStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1715;
				whileStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1716;
				forStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementNoShortIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementWithoutTrailingSubstatementContext statementWithoutTrailingSubstatement() {
			return GetRuleContext<StatementWithoutTrailingSubstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabeledStatementNoShortIfContext labeledStatementNoShortIf() {
			return GetRuleContext<LabeledStatementNoShortIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfThenElseStatementNoShortIfContext ifThenElseStatementNoShortIf() {
			return GetRuleContext<IfThenElseStatementNoShortIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementNoShortIfContext whileStatementNoShortIf() {
			return GetRuleContext<WhileStatementNoShortIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementNoShortIfContext forStatementNoShortIf() {
			return GetRuleContext<ForStatementNoShortIfContext>(0);
		}
		public StatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementNoShortIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterStatementNoShortIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitStatementNoShortIf(this);
		}
	}

	[RuleVersion(0)]
	public StatementNoShortIfContext statementNoShortIf() {
		StatementNoShortIfContext _localctx = new StatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 292, RULE_statementNoShortIf);
		try {
			State = 1724;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1719;
				statementWithoutTrailingSubstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1720;
				labeledStatementNoShortIf();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1721;
				ifThenElseStatementNoShortIf();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1722;
				whileStatementNoShortIf();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1723;
				forStatementNoShortIf();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementWithoutTrailingSubstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssertStatementContext assertStatement() {
			return GetRuleContext<AssertStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoStatementContext doStatement() {
			return GetRuleContext<DoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SynchronizedStatementContext synchronizedStatement() {
			return GetRuleContext<SynchronizedStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		public StatementWithoutTrailingSubstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementWithoutTrailingSubstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterStatementWithoutTrailingSubstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitStatementWithoutTrailingSubstatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementWithoutTrailingSubstatementContext statementWithoutTrailingSubstatement() {
		StatementWithoutTrailingSubstatementContext _localctx = new StatementWithoutTrailingSubstatementContext(Context, State);
		EnterRule(_localctx, 294, RULE_statementWithoutTrailingSubstatement);
		try {
			State = 1739;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1726;
				block();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1727;
				emptyStatement();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case TextBlock:
			case NullLiteral:
			case LPAREN:
			case AT:
			case INC:
			case DEC:
			case Identifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1728;
				expressionStatement();
				}
				break;
			case ASSERT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1729;
				assertStatement();
				}
				break;
			case SWITCH:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1730;
				switchStatement();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1731;
				doStatement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1732;
				breakStatement();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1733;
				continueStatement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1734;
				returnStatement();
				}
				break;
			case SYNCHRONIZED:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1735;
				synchronizedStatement();
				}
				break;
			case THROW:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1736;
				throwStatement();
				}
				break;
			case TRY:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1737;
				tryStatement();
				}
				break;
			case YIELD:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1738;
				yieldStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(Context, State);
		EnterRule(_localctx, 296, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1741;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Java20Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabeledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterLabeledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitLabeledStatement(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementContext labeledStatement() {
		LabeledStatementContext _localctx = new LabeledStatementContext(Context, State);
		EnterRule(_localctx, 298, RULE_labeledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1743;
			Match(Identifier);
			State = 1744;
			Match(COLON);
			State = 1745;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementNoShortIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Java20Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public LabeledStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatementNoShortIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterLabeledStatementNoShortIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitLabeledStatementNoShortIf(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementNoShortIfContext labeledStatementNoShortIf() {
		LabeledStatementNoShortIfContext _localctx = new LabeledStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 300, RULE_labeledStatementNoShortIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1747;
			Match(Identifier);
			State = 1748;
			Match(COLON);
			State = 1749;
			statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementExpressionContext statementExpression() {
			return GetRuleContext<StatementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 302, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1751;
			statementExpression();
			State = 1752;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreIncrementExpressionContext preIncrementExpression() {
			return GetRuleContext<PreIncrementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreDecrementExpressionContext preDecrementExpression() {
			return GetRuleContext<PreDecrementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostIncrementExpressionContext postIncrementExpression() {
			return GetRuleContext<PostIncrementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostDecrementExpressionContext postDecrementExpression() {
			return GetRuleContext<PostDecrementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvocationContext methodInvocation() {
			return GetRuleContext<MethodInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
			return GetRuleContext<ClassInstanceCreationExpressionContext>(0);
		}
		public StatementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterStatementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitStatementExpression(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionContext statementExpression() {
		StatementExpressionContext _localctx = new StatementExpressionContext(Context, State);
		EnterRule(_localctx, 304, RULE_statementExpression);
		try {
			State = 1761;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1754;
				assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1755;
				preIncrementExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1756;
				preDecrementExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1757;
				postIncrementExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1758;
				postDecrementExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1759;
				methodInvocation();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1760;
				classInstanceCreationExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(Java20Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfThenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterIfThenStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitIfThenStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfThenStatementContext ifThenStatement() {
		IfThenStatementContext _localctx = new IfThenStatementContext(Context, State);
		EnterRule(_localctx, 306, RULE_ifThenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1763;
			Match(IF);
			State = 1764;
			Match(LPAREN);
			State = 1765;
			expression();
			State = 1766;
			Match(RPAREN);
			State = 1767;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(Java20Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(Java20Parser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfThenElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterIfThenElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitIfThenElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStatementContext ifThenElseStatement() {
		IfThenElseStatementContext _localctx = new IfThenElseStatementContext(Context, State);
		EnterRule(_localctx, 308, RULE_ifThenElseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1769;
			Match(IF);
			State = 1770;
			Match(LPAREN);
			State = 1771;
			expression();
			State = 1772;
			Match(RPAREN);
			State = 1773;
			statementNoShortIf();
			State = 1774;
			Match(ELSE);
			State = 1775;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStatementNoShortIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(Java20Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementNoShortIfContext[] statementNoShortIf() {
			return GetRuleContexts<StatementNoShortIfContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementNoShortIfContext statementNoShortIf(int i) {
			return GetRuleContext<StatementNoShortIfContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(Java20Parser.ELSE, 0); }
		public IfThenElseStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStatementNoShortIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterIfThenElseStatementNoShortIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitIfThenElseStatementNoShortIf(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStatementNoShortIfContext ifThenElseStatementNoShortIf() {
		IfThenElseStatementNoShortIfContext _localctx = new IfThenElseStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 310, RULE_ifThenElseStatementNoShortIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1777;
			Match(IF);
			State = 1778;
			Match(LPAREN);
			State = 1779;
			expression();
			State = 1780;
			Match(RPAREN);
			State = 1781;
			statementNoShortIf();
			State = 1782;
			Match(ELSE);
			State = 1783;
			statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(Java20Parser.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Java20Parser.COLON, 0); }
		public AssertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterAssertStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitAssertStatement(this);
		}
	}

	[RuleVersion(0)]
	public AssertStatementContext assertStatement() {
		AssertStatementContext _localctx = new AssertStatementContext(Context, State);
		EnterRule(_localctx, 312, RULE_assertStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1785;
			Match(ASSERT);
			State = 1786;
			expression();
			State = 1789;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1787;
				Match(COLON);
				State = 1788;
				expression();
				}
			}

			State = 1791;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(Java20Parser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockContext switchBlock() {
			return GetRuleContext<SwitchBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 314, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1793;
			Match(SWITCH);
			State = 1794;
			Match(LPAREN);
			State = 1795;
			expression();
			State = 1796;
			Match(RPAREN);
			State = 1797;
			switchBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(Java20Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchRuleContext[] switchRule() {
			return GetRuleContexts<SwitchRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchRuleContext switchRule(int i) {
			return GetRuleContext<SwitchRuleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(Java20Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockStatementGroupContext[] switchBlockStatementGroup() {
			return GetRuleContexts<SwitchBlockStatementGroupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockStatementGroupContext switchBlockStatementGroup(int i) {
			return GetRuleContext<SwitchBlockStatementGroupContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(Java20Parser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(Java20Parser.COLON, i);
		}
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(Context, State);
		EnterRule(_localctx, 316, RULE_switchBlock);
		int _la;
		try {
			int _alt;
			State = 1825;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1799;
				Match(LBRACE);
				State = 1800;
				switchRule();
				State = 1804;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CASE || _la==DEFAULT) {
					{
					{
					State = 1801;
					switchRule();
					}
					}
					State = 1806;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1807;
				Match(RBRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1809;
				Match(LBRACE);
				State = 1813;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,193,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1810;
						switchBlockStatementGroup();
						}
						} 
					}
					State = 1815;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,193,Context);
				}
				State = 1821;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CASE || _la==DEFAULT) {
					{
					{
					State = 1816;
					switchLabel();
					State = 1817;
					Match(COLON);
					}
					}
					State = 1823;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1824;
				Match(RBRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel() {
			return GetRuleContext<SwitchLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(Java20Parser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		public SwitchRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterSwitchRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitSwitchRule(this);
		}
	}

	[RuleVersion(0)]
	public SwitchRuleContext switchRule() {
		SwitchRuleContext _localctx = new SwitchRuleContext(Context, State);
		EnterRule(_localctx, 318, RULE_switchRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1827;
			switchLabel();
			State = 1828;
			Match(ARROW);
			State = 1834;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case SWITCH:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case TextBlock:
			case NullLiteral:
			case LPAREN:
			case AT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
				{
				State = 1829;
				expression();
				State = 1830;
				Match(SEMI);
				}
				break;
			case LBRACE:
				{
				State = 1832;
				block();
				}
				break;
			case THROW:
				{
				State = 1833;
				throwStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockStatementGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(Java20Parser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(Java20Parser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementsContext blockStatements() {
			return GetRuleContext<BlockStatementsContext>(0);
		}
		public SwitchBlockStatementGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlockStatementGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterSwitchBlockStatementGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitSwitchBlockStatementGroup(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockStatementGroupContext switchBlockStatementGroup() {
		SwitchBlockStatementGroupContext _localctx = new SwitchBlockStatementGroupContext(Context, State);
		EnterRule(_localctx, 320, RULE_switchBlockStatementGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1836;
			switchLabel();
			State = 1837;
			Match(COLON);
			State = 1843;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 1838;
				switchLabel();
				State = 1839;
				Match(COLON);
				}
				}
				State = 1845;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1846;
			blockStatements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(Java20Parser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseConstantContext[] caseConstant() {
			return GetRuleContexts<CaseConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseConstantContext caseConstant(int i) {
			return GetRuleContext<CaseConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java20Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java20Parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(Java20Parser.DEFAULT, 0); }
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 322, RULE_switchLabel);
		int _la;
		try {
			State = 1858;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1848;
				Match(CASE);
				State = 1849;
				caseConstant();
				State = 1854;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1850;
					Match(COMMA);
					State = 1851;
					caseConstant();
					}
					}
					State = 1856;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1857;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public CaseConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterCaseConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitCaseConstant(this);
		}
	}

	[RuleVersion(0)]
	public CaseConstantContext caseConstant() {
		CaseConstantContext _localctx = new CaseConstantContext(Context, State);
		EnterRule(_localctx, 324, RULE_caseConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1860;
			conditionalExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(Java20Parser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 326, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1862;
			Match(WHILE);
			State = 1863;
			Match(LPAREN);
			State = 1864;
			expression();
			State = 1865;
			Match(RPAREN);
			State = 1866;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementNoShortIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(Java20Parser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public WhileStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatementNoShortIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterWhileStatementNoShortIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitWhileStatementNoShortIf(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementNoShortIfContext whileStatementNoShortIf() {
		WhileStatementNoShortIfContext _localctx = new WhileStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 328, RULE_whileStatementNoShortIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1868;
			Match(WHILE);
			State = 1869;
			Match(LPAREN);
			State = 1870;
			expression();
			State = 1871;
			Match(RPAREN);
			State = 1872;
			statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(Java20Parser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(Java20Parser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		public DoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
	}

	[RuleVersion(0)]
	public DoStatementContext doStatement() {
		DoStatementContext _localctx = new DoStatementContext(Context, State);
		EnterRule(_localctx, 330, RULE_doStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1874;
			Match(DO);
			State = 1875;
			statement();
			State = 1876;
			Match(WHILE);
			State = 1877;
			Match(LPAREN);
			State = 1878;
			expression();
			State = 1879;
			Match(RPAREN);
			State = 1880;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicForStatementContext basicForStatement() {
			return GetRuleContext<BasicForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnhancedForStatementContext enhancedForStatement() {
			return GetRuleContext<EnhancedForStatementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 332, RULE_forStatement);
		try {
			State = 1884;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,200,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1882;
				basicForStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1883;
				enhancedForStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementNoShortIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicForStatementNoShortIfContext basicForStatementNoShortIf() {
			return GetRuleContext<BasicForStatementNoShortIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnhancedForStatementNoShortIfContext enhancedForStatementNoShortIf() {
			return GetRuleContext<EnhancedForStatementNoShortIfContext>(0);
		}
		public ForStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatementNoShortIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterForStatementNoShortIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitForStatementNoShortIf(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementNoShortIfContext forStatementNoShortIf() {
		ForStatementNoShortIfContext _localctx = new ForStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 334, RULE_forStatementNoShortIf);
		try {
			State = 1888;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1886;
				basicForStatementNoShortIf();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1887;
				enhancedForStatementNoShortIf();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(Java20Parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(Java20Parser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(Java20Parser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForUpdateContext forUpdate() {
			return GetRuleContext<ForUpdateContext>(0);
		}
		public BasicForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicForStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterBasicForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitBasicForStatement(this);
		}
	}

	[RuleVersion(0)]
	public BasicForStatementContext basicForStatement() {
		BasicForStatementContext _localctx = new BasicForStatementContext(Context, State);
		EnterRule(_localctx, 336, RULE_basicForStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1890;
			Match(FOR);
			State = 1891;
			Match(LPAREN);
			State = 1893;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1315420701084123136L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288230788470673393L) != 0)) {
				{
				State = 1892;
				forInit();
				}
			}

			State = 1895;
			Match(SEMI);
			State = 1897;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603651042876063744L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288232437939441649L) != 0)) {
				{
				State = 1896;
				expression();
				}
			}

			State = 1899;
			Match(SEMI);
			State = 1901;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1315420666724352000L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288230788470673393L) != 0)) {
				{
				State = 1900;
				forUpdate();
				}
			}

			State = 1903;
			Match(RPAREN);
			State = 1904;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicForStatementNoShortIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(Java20Parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(Java20Parser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(Java20Parser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForUpdateContext forUpdate() {
			return GetRuleContext<ForUpdateContext>(0);
		}
		public BasicForStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicForStatementNoShortIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterBasicForStatementNoShortIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitBasicForStatementNoShortIf(this);
		}
	}

	[RuleVersion(0)]
	public BasicForStatementNoShortIfContext basicForStatementNoShortIf() {
		BasicForStatementNoShortIfContext _localctx = new BasicForStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 338, RULE_basicForStatementNoShortIf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1906;
			Match(FOR);
			State = 1907;
			Match(LPAREN);
			State = 1909;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1315420701084123136L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288230788470673393L) != 0)) {
				{
				State = 1908;
				forInit();
				}
			}

			State = 1911;
			Match(SEMI);
			State = 1913;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603651042876063744L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288232437939441649L) != 0)) {
				{
				State = 1912;
				expression();
				}
			}

			State = 1915;
			Match(SEMI);
			State = 1917;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1315420666724352000L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288230788470673393L) != 0)) {
				{
				State = 1916;
				forUpdate();
				}
			}

			State = 1919;
			Match(RPAREN);
			State = 1920;
			statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementExpressionListContext statementExpressionList() {
			return GetRuleContext<StatementExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 340, RULE_forInit);
		try {
			State = 1924;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,208,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1922;
				statementExpressionList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1923;
				localVariableDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementExpressionListContext statementExpressionList() {
			return GetRuleContext<StatementExpressionListContext>(0);
		}
		public ForUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterForUpdate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitForUpdate(this);
		}
	}

	[RuleVersion(0)]
	public ForUpdateContext forUpdate() {
		ForUpdateContext _localctx = new ForUpdateContext(Context, State);
		EnterRule(_localctx, 342, RULE_forUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1926;
			statementExpressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementExpressionContext[] statementExpression() {
			return GetRuleContexts<StatementExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementExpressionContext statementExpression(int i) {
			return GetRuleContext<StatementExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java20Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java20Parser.COMMA, i);
		}
		public StatementExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterStatementExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitStatementExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionListContext statementExpressionList() {
		StatementExpressionListContext _localctx = new StatementExpressionListContext(Context, State);
		EnterRule(_localctx, 344, RULE_statementExpressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1928;
			statementExpression();
			State = 1933;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1929;
				Match(COMMA);
				State = 1930;
				statementExpression();
				}
				}
				State = 1935;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(Java20Parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Java20Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public EnhancedForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enhancedForStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterEnhancedForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitEnhancedForStatement(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForStatementContext enhancedForStatement() {
		EnhancedForStatementContext _localctx = new EnhancedForStatementContext(Context, State);
		EnterRule(_localctx, 346, RULE_enhancedForStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1936;
			Match(FOR);
			State = 1937;
			Match(LPAREN);
			State = 1938;
			localVariableDeclaration();
			State = 1939;
			Match(COLON);
			State = 1940;
			expression();
			State = 1941;
			Match(RPAREN);
			State = 1942;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForStatementNoShortIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(Java20Parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Java20Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public EnhancedForStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enhancedForStatementNoShortIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterEnhancedForStatementNoShortIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitEnhancedForStatementNoShortIf(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForStatementNoShortIfContext enhancedForStatementNoShortIf() {
		EnhancedForStatementNoShortIfContext _localctx = new EnhancedForStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 348, RULE_enhancedForStatementNoShortIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1944;
			Match(FOR);
			State = 1945;
			Match(LPAREN);
			State = 1946;
			localVariableDeclaration();
			State = 1947;
			Match(COLON);
			State = 1948;
			expression();
			State = 1949;
			Match(RPAREN);
			State = 1950;
			statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(Java20Parser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 350, RULE_breakStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1952;
			Match(BREAK);
			State = 1954;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 1953;
				Match(Identifier);
				}
			}

			State = 1956;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(Java20Parser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 352, RULE_continueStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1958;
			Match(CONTINUE);
			State = 1960;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 1959;
				Match(Identifier);
				}
			}

			State = 1962;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(Java20Parser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 354, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1964;
			Match(RETURN);
			State = 1966;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603651042876063744L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288232437939441649L) != 0)) {
				{
				State = 1965;
				expression();
				}
			}

			State = 1968;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(Java20Parser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 356, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1970;
			Match(THROW);
			State = 1971;
			expression();
			State = 1972;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SynchronizedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNCHRONIZED() { return GetToken(Java20Parser.SYNCHRONIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SynchronizedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_synchronizedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterSynchronizedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitSynchronizedStatement(this);
		}
	}

	[RuleVersion(0)]
	public SynchronizedStatementContext synchronizedStatement() {
		SynchronizedStatementContext _localctx = new SynchronizedStatementContext(Context, State);
		EnterRule(_localctx, 358, RULE_synchronizedStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1974;
			Match(SYNCHRONIZED);
			State = 1975;
			Match(LPAREN);
			State = 1976;
			expression();
			State = 1977;
			Match(RPAREN);
			State = 1978;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(Java20Parser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchesContext catches() {
			return GetRuleContext<CatchesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyBlockContext finallyBlock() {
			return GetRuleContext<FinallyBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryWithResourcesStatementContext tryWithResourcesStatement() {
			return GetRuleContext<TryWithResourcesStatementContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 360, RULE_tryStatement);
		int _la;
		try {
			State = 1996;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,214,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1980;
				Match(TRY);
				State = 1981;
				block();
				State = 1982;
				catches();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1984;
				Match(TRY);
				State = 1985;
				block();
				State = 1986;
				finallyBlock();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1988;
				Match(TRY);
				State = 1989;
				block();
				State = 1991;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CATCH) {
					{
					State = 1990;
					catches();
					}
				}

				State = 1993;
				finallyBlock();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1995;
				tryWithResourcesStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CatchClauseContext[] catchClause() {
			return GetRuleContexts<CatchClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchClauseContext catchClause(int i) {
			return GetRuleContext<CatchClauseContext>(i);
		}
		public CatchesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catches; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterCatches(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitCatches(this);
		}
	}

	[RuleVersion(0)]
	public CatchesContext catches() {
		CatchesContext _localctx = new CatchesContext(Context, State);
		EnterRule(_localctx, 362, RULE_catches);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1998;
			catchClause();
			State = 2002;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CATCH) {
				{
				{
				State = 1999;
				catchClause();
				}
				}
				State = 2004;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(Java20Parser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CatchFormalParameterContext catchFormalParameter() {
			return GetRuleContext<CatchFormalParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterCatchClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitCatchClause(this);
		}
	}

	[RuleVersion(0)]
	public CatchClauseContext catchClause() {
		CatchClauseContext _localctx = new CatchClauseContext(Context, State);
		EnterRule(_localctx, 364, RULE_catchClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2005;
			Match(CATCH);
			State = 2006;
			Match(LPAREN);
			State = 2007;
			catchFormalParameter();
			State = 2008;
			Match(RPAREN);
			State = 2009;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchFormalParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CatchTypeContext catchType() {
			return GetRuleContext<CatchTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public CatchFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchFormalParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterCatchFormalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitCatchFormalParameter(this);
		}
	}

	[RuleVersion(0)]
	public CatchFormalParameterContext catchFormalParameter() {
		CatchFormalParameterContext _localctx = new CatchFormalParameterContext(Context, State);
		EnterRule(_localctx, 366, RULE_catchFormalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2014;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 2011;
				variableModifier();
				}
				}
				State = 2016;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2017;
			catchType();
			State = 2018;
			variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannClassTypeContext unannClassType() {
			return GetRuleContext<UnannClassTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BITOR() { return GetTokens(Java20Parser.BITOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITOR(int i) {
			return GetToken(Java20Parser.BITOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext[] classType() {
			return GetRuleContexts<ClassTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext classType(int i) {
			return GetRuleContext<ClassTypeContext>(i);
		}
		public CatchTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterCatchType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitCatchType(this);
		}
	}

	[RuleVersion(0)]
	public CatchTypeContext catchType() {
		CatchTypeContext _localctx = new CatchTypeContext(Context, State);
		EnterRule(_localctx, 368, RULE_catchType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2020;
			unannClassType();
			State = 2025;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITOR) {
				{
				{
				State = 2021;
				Match(BITOR);
				State = 2022;
				classType();
				}
				}
				State = 2027;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(Java20Parser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FinallyBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterFinallyBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitFinallyBlock(this);
		}
	}

	[RuleVersion(0)]
	public FinallyBlockContext finallyBlock() {
		FinallyBlockContext _localctx = new FinallyBlockContext(Context, State);
		EnterRule(_localctx, 370, RULE_finallyBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2028;
			Match(FINALLY);
			State = 2029;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryWithResourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(Java20Parser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResourceSpecificationContext resourceSpecification() {
			return GetRuleContext<ResourceSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchesContext catches() {
			return GetRuleContext<CatchesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyBlockContext finallyBlock() {
			return GetRuleContext<FinallyBlockContext>(0);
		}
		public TryWithResourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryWithResourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterTryWithResourcesStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitTryWithResourcesStatement(this);
		}
	}

	[RuleVersion(0)]
	public TryWithResourcesStatementContext tryWithResourcesStatement() {
		TryWithResourcesStatementContext _localctx = new TryWithResourcesStatementContext(Context, State);
		EnterRule(_localctx, 372, RULE_tryWithResourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2031;
			Match(TRY);
			State = 2032;
			resourceSpecification();
			State = 2033;
			block();
			State = 2035;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CATCH) {
				{
				State = 2034;
				catches();
				}
			}

			State = 2038;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINALLY) {
				{
				State = 2037;
				finallyBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResourceListContext resourceList() {
			return GetRuleContext<ResourceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		public ResourceSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterResourceSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitResourceSpecification(this);
		}
	}

	[RuleVersion(0)]
	public ResourceSpecificationContext resourceSpecification() {
		ResourceSpecificationContext _localctx = new ResourceSpecificationContext(Context, State);
		EnterRule(_localctx, 374, RULE_resourceSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2040;
			Match(LPAREN);
			State = 2041;
			resourceList();
			State = 2043;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 2042;
				Match(SEMI);
				}
			}

			State = 2045;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResourceContext[] resource() {
			return GetRuleContexts<ResourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceContext resource(int i) {
			return GetRuleContext<ResourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(Java20Parser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(Java20Parser.SEMI, i);
		}
		public ResourceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterResourceList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitResourceList(this);
		}
	}

	[RuleVersion(0)]
	public ResourceListContext resourceList() {
		ResourceListContext _localctx = new ResourceListContext(Context, State);
		EnterRule(_localctx, 376, RULE_resourceList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2047;
			resource();
			State = 2052;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,221,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2048;
					Match(SEMI);
					State = 2049;
					resource();
					}
					} 
				}
				State = 2054;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,221,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableAccessContext variableAccess() {
			return GetRuleContext<VariableAccessContext>(0);
		}
		public ResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterResource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitResource(this);
		}
	}

	[RuleVersion(0)]
	public ResourceContext resource() {
		ResourceContext _localctx = new ResourceContext(Context, State);
		EnterRule(_localctx, 378, RULE_resource);
		try {
			State = 2057;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,222,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2055;
				localVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2056;
				variableAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public VariableAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterVariableAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitVariableAccess(this);
		}
	}

	[RuleVersion(0)]
	public VariableAccessContext variableAccess() {
		VariableAccessContext _localctx = new VariableAccessContext(Context, State);
		EnterRule(_localctx, 380, RULE_variableAccess);
		try {
			State = 2061;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,223,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2059;
				expressionName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2060;
				fieldAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YieldStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(Java20Parser.YIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java20Parser.SEMI, 0); }
		public YieldStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yieldStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitYieldStatement(this);
		}
	}

	[RuleVersion(0)]
	public YieldStatementContext yieldStatement() {
		YieldStatementContext _localctx = new YieldStatementContext(Context, State);
		EnterRule(_localctx, 382, RULE_yieldStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2063;
			Match(YIELD);
			State = 2064;
			expression();
			State = 2065;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypePatternContext typePattern() {
			return GetRuleContext<TypePatternContext>(0);
		}
		public PatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitPattern(this);
		}
	}

	[RuleVersion(0)]
	public PatternContext pattern() {
		PatternContext _localctx = new PatternContext(Context, State);
		EnterRule(_localctx, 384, RULE_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2067;
			typePattern();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypePatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public TypePatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typePattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterTypePattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitTypePattern(this);
		}
	}

	[RuleVersion(0)]
	public TypePatternContext typePattern() {
		TypePatternContext _localctx = new TypePatternContext(Context, State);
		EnterRule(_localctx, 386, RULE_typePattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2069;
			localVariableDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 388, RULE_expression);
		try {
			State = 2073;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2071;
				lambdaExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2072;
				assignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryNoNewArrayContext primaryNoNewArray() {
			return GetRuleContext<PrimaryNoNewArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayCreationExpressionContext arrayCreationExpression() {
			return GetRuleContext<ArrayCreationExpressionContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 390, RULE_primary);
		try {
			State = 2077;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2075;
				primaryNoNewArray();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2076;
				arrayCreationExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PNNAContext pNNA() {
			return GetRuleContext<PNNAContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassLiteralContext classLiteral() {
			return GetRuleContext<ClassLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(Java20Parser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(Java20Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(Java20Parser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnqualifiedClassInstanceCreationExpressionContext unqualifiedClassInstanceCreationExpression() {
			return GetRuleContext<UnqualifiedClassInstanceCreationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayCreationExpressionContext arrayCreationExpression() {
			return GetRuleContext<ArrayCreationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(Java20Parser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(Java20Parser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(Java20Parser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayCreationExpressionWithInitializerContext arrayCreationExpressionWithInitializer() {
			return GetRuleContext<ArrayCreationExpressionWithInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONCOLON() { return GetToken(Java20Parser.COLONCOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(Java20Parser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public PrimaryNoNewArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArrayContext primaryNoNewArray() {
		PrimaryNoNewArrayContext _localctx = new PrimaryNoNewArrayContext(Context, State);
		EnterRule(_localctx, 392, RULE_primaryNoNewArray);
		int _la;
		try {
			State = 2296;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,269,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2079;
				literal();
				State = 2081;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,226,Context) ) {
				case 1:
					{
					State = 2080;
					pNNA();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2083;
				classLiteral();
				State = 2085;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,227,Context) ) {
				case 1:
					{
					State = 2084;
					pNNA();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2087;
				Match(THIS);
				State = 2089;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,228,Context) ) {
				case 1:
					{
					State = 2088;
					pNNA();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2091;
				typeName();
				State = 2092;
				Match(DOT);
				State = 2093;
				Match(THIS);
				State = 2095;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,229,Context) ) {
				case 1:
					{
					State = 2094;
					pNNA();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2097;
				Match(LPAREN);
				State = 2098;
				expression();
				State = 2099;
				Match(RPAREN);
				State = 2101;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,230,Context) ) {
				case 1:
					{
					State = 2100;
					pNNA();
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2103;
				unqualifiedClassInstanceCreationExpression();
				State = 2105;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,231,Context) ) {
				case 1:
					{
					State = 2104;
					pNNA();
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2107;
				expressionName();
				State = 2108;
				Match(DOT);
				State = 2109;
				unqualifiedClassInstanceCreationExpression();
				State = 2111;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
				case 1:
					{
					State = 2110;
					pNNA();
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2113;
				arrayCreationExpression();
				State = 2114;
				Match(DOT);
				State = 2115;
				unqualifiedClassInstanceCreationExpression();
				State = 2117;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
				case 1:
					{
					State = 2116;
					pNNA();
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2119;
				arrayCreationExpression();
				State = 2120;
				Match(DOT);
				State = 2121;
				Match(Identifier);
				State = 2123;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,234,Context) ) {
				case 1:
					{
					State = 2122;
					pNNA();
					}
					break;
				}
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2125;
				Match(SUPER);
				State = 2126;
				Match(DOT);
				State = 2127;
				Match(Identifier);
				State = 2129;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,235,Context) ) {
				case 1:
					{
					State = 2128;
					pNNA();
					}
					break;
				}
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2131;
				typeName();
				State = 2132;
				Match(DOT);
				State = 2133;
				Match(SUPER);
				State = 2134;
				Match(DOT);
				State = 2135;
				Match(Identifier);
				State = 2137;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,236,Context) ) {
				case 1:
					{
					State = 2136;
					pNNA();
					}
					break;
				}
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2139;
				expressionName();
				State = 2140;
				Match(LBRACK);
				State = 2141;
				expression();
				State = 2142;
				Match(RBRACK);
				State = 2144;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,237,Context) ) {
				case 1:
					{
					State = 2143;
					pNNA();
					}
					break;
				}
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2146;
				arrayCreationExpressionWithInitializer();
				State = 2147;
				Match(LBRACK);
				State = 2148;
				expression();
				State = 2149;
				Match(RBRACK);
				State = 2151;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
				case 1:
					{
					State = 2150;
					pNNA();
					}
					break;
				}
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2153;
				methodName();
				State = 2154;
				Match(LPAREN);
				State = 2156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603651042876063744L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288232437939441649L) != 0)) {
					{
					State = 2155;
					argumentList();
					}
				}

				State = 2158;
				Match(RPAREN);
				State = 2160;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,240,Context) ) {
				case 1:
					{
					State = 2159;
					pNNA();
					}
					break;
				}
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2162;
				typeName();
				State = 2163;
				Match(DOT);
				State = 2165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2164;
					typeArguments();
					}
				}

				State = 2167;
				Match(Identifier);
				State = 2168;
				Match(LPAREN);
				State = 2170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603651042876063744L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288232437939441649L) != 0)) {
					{
					State = 2169;
					argumentList();
					}
				}

				State = 2172;
				Match(RPAREN);
				State = 2174;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,243,Context) ) {
				case 1:
					{
					State = 2173;
					pNNA();
					}
					break;
				}
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2176;
				expressionName();
				State = 2177;
				Match(DOT);
				State = 2179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2178;
					typeArguments();
					}
				}

				State = 2181;
				Match(Identifier);
				State = 2182;
				Match(LPAREN);
				State = 2184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603651042876063744L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288232437939441649L) != 0)) {
					{
					State = 2183;
					argumentList();
					}
				}

				State = 2186;
				Match(RPAREN);
				State = 2188;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,246,Context) ) {
				case 1:
					{
					State = 2187;
					pNNA();
					}
					break;
				}
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2190;
				arrayCreationExpression();
				State = 2191;
				Match(DOT);
				State = 2193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2192;
					typeArguments();
					}
				}

				State = 2195;
				Match(Identifier);
				State = 2196;
				Match(LPAREN);
				State = 2198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603651042876063744L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288232437939441649L) != 0)) {
					{
					State = 2197;
					argumentList();
					}
				}

				State = 2200;
				Match(RPAREN);
				State = 2202;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,249,Context) ) {
				case 1:
					{
					State = 2201;
					pNNA();
					}
					break;
				}
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2204;
				Match(SUPER);
				State = 2205;
				Match(DOT);
				State = 2207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2206;
					typeArguments();
					}
				}

				State = 2209;
				Match(Identifier);
				State = 2210;
				Match(LPAREN);
				State = 2212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603651042876063744L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288232437939441649L) != 0)) {
					{
					State = 2211;
					argumentList();
					}
				}

				State = 2214;
				Match(RPAREN);
				State = 2216;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,252,Context) ) {
				case 1:
					{
					State = 2215;
					pNNA();
					}
					break;
				}
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2218;
				typeName();
				State = 2219;
				Match(DOT);
				State = 2220;
				Match(SUPER);
				State = 2221;
				Match(DOT);
				State = 2223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2222;
					typeArguments();
					}
				}

				State = 2225;
				Match(Identifier);
				State = 2226;
				Match(LPAREN);
				State = 2228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603651042876063744L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288232437939441649L) != 0)) {
					{
					State = 2227;
					argumentList();
					}
				}

				State = 2230;
				Match(RPAREN);
				State = 2232;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,255,Context) ) {
				case 1:
					{
					State = 2231;
					pNNA();
					}
					break;
				}
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2234;
				expressionName();
				State = 2235;
				Match(COLONCOLON);
				State = 2237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2236;
					typeArguments();
					}
				}

				State = 2239;
				Match(Identifier);
				State = 2241;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,257,Context) ) {
				case 1:
					{
					State = 2240;
					pNNA();
					}
					break;
				}
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2243;
				arrayCreationExpression();
				State = 2244;
				Match(COLONCOLON);
				State = 2246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2245;
					typeArguments();
					}
				}

				State = 2248;
				Match(Identifier);
				State = 2250;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,259,Context) ) {
				case 1:
					{
					State = 2249;
					pNNA();
					}
					break;
				}
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2252;
				referenceType();
				State = 2253;
				Match(COLONCOLON);
				State = 2255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2254;
					typeArguments();
					}
				}

				State = 2257;
				Match(Identifier);
				State = 2259;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,261,Context) ) {
				case 1:
					{
					State = 2258;
					pNNA();
					}
					break;
				}
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 2261;
				Match(SUPER);
				State = 2262;
				Match(COLONCOLON);
				State = 2264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2263;
					typeArguments();
					}
				}

				State = 2266;
				Match(Identifier);
				State = 2268;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,263,Context) ) {
				case 1:
					{
					State = 2267;
					pNNA();
					}
					break;
				}
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 2270;
				typeName();
				State = 2271;
				Match(DOT);
				State = 2272;
				Match(SUPER);
				State = 2273;
				Match(COLONCOLON);
				State = 2275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2274;
					typeArguments();
					}
				}

				State = 2277;
				Match(Identifier);
				State = 2279;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,265,Context) ) {
				case 1:
					{
					State = 2278;
					pNNA();
					}
					break;
				}
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 2281;
				classType();
				State = 2282;
				Match(COLONCOLON);
				State = 2284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2283;
					typeArguments();
					}
				}

				State = 2286;
				Match(NEW);
				State = 2288;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,267,Context) ) {
				case 1:
					{
					State = 2287;
					pNNA();
					}
					break;
				}
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 2290;
				arrayType();
				State = 2291;
				Match(COLONCOLON);
				State = 2292;
				Match(NEW);
				State = 2294;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,268,Context) ) {
				case 1:
					{
					State = 2293;
					pNNA();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PNNAContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java20Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnqualifiedClassInstanceCreationExpressionContext unqualifiedClassInstanceCreationExpression() {
			return GetRuleContext<UnqualifiedClassInstanceCreationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PNNAContext pNNA() {
			return GetRuleContext<PNNAContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(Java20Parser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(Java20Parser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONCOLON() { return GetToken(Java20Parser.COLONCOLON, 0); }
		public PNNAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pNNA; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterPNNA(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitPNNA(this);
		}
	}

	[RuleVersion(0)]
	public PNNAContext pNNA() {
		PNNAContext _localctx = new PNNAContext(Context, State);
		EnterRule(_localctx, 394, RULE_pNNA);
		int _la;
		try {
			State = 2335;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,278,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2298;
				Match(DOT);
				State = 2299;
				unqualifiedClassInstanceCreationExpression();
				State = 2301;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,270,Context) ) {
				case 1:
					{
					State = 2300;
					pNNA();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2303;
				Match(DOT);
				State = 2304;
				Match(Identifier);
				State = 2306;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,271,Context) ) {
				case 1:
					{
					State = 2305;
					pNNA();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2308;
				Match(LBRACK);
				State = 2309;
				expression();
				State = 2310;
				Match(RBRACK);
				State = 2312;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,272,Context) ) {
				case 1:
					{
					State = 2311;
					pNNA();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2314;
				Match(DOT);
				State = 2316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2315;
					typeArguments();
					}
				}

				State = 2318;
				Match(Identifier);
				State = 2319;
				Match(LPAREN);
				State = 2321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603651042876063744L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288232437939441649L) != 0)) {
					{
					State = 2320;
					argumentList();
					}
				}

				State = 2323;
				Match(RPAREN);
				State = 2325;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
				case 1:
					{
					State = 2324;
					pNNA();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2327;
				Match(COLONCOLON);
				State = 2329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2328;
					typeArguments();
					}
				}

				State = 2331;
				Match(Identifier);
				State = 2333;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
				case 1:
					{
					State = 2332;
					pNNA();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java20Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(Java20Parser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(Java20Parser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(Java20Parser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(Java20Parser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(Java20Parser.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(Java20Parser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(Java20Parser.VOID, 0); }
		public ClassLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterClassLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitClassLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ClassLiteralContext classLiteral() {
		ClassLiteralContext _localctx = new ClassLiteralContext(Context, State);
		EnterRule(_localctx, 396, RULE_classLiteral);
		int _la;
		try {
			State = 2372;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2337;
				typeName();
				State = 2342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 2338;
					Match(LBRACK);
					State = 2339;
					Match(RBRACK);
					}
					}
					State = 2344;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2345;
				Match(DOT);
				State = 2346;
				Match(CLASS);
				}
				break;
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2348;
				numericType();
				State = 2353;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 2349;
					Match(LBRACK);
					State = 2350;
					Match(RBRACK);
					}
					}
					State = 2355;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2356;
				Match(DOT);
				State = 2357;
				Match(CLASS);
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2359;
				Match(BOOLEAN);
				State = 2364;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 2360;
					Match(LBRACK);
					State = 2361;
					Match(RBRACK);
					}
					}
					State = 2366;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2367;
				Match(DOT);
				State = 2368;
				Match(CLASS);
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2369;
				Match(VOID);
				State = 2370;
				Match(DOT);
				State = 2371;
				Match(CLASS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceCreationExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnqualifiedClassInstanceCreationExpressionContext unqualifiedClassInstanceCreationExpression() {
			return GetRuleContext<UnqualifiedClassInstanceCreationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java20Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ClassInstanceCreationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceCreationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterClassInstanceCreationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitClassInstanceCreationExpression(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
		ClassInstanceCreationExpressionContext _localctx = new ClassInstanceCreationExpressionContext(Context, State);
		EnterRule(_localctx, 398, RULE_classInstanceCreationExpression);
		try {
			State = 2383;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,283,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2374;
				unqualifiedClassInstanceCreationExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2375;
				expressionName();
				State = 2376;
				Match(DOT);
				State = 2377;
				unqualifiedClassInstanceCreationExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2379;
				primary();
				State = 2380;
				Match(DOT);
				State = 2381;
				unqualifiedClassInstanceCreationExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnqualifiedClassInstanceCreationExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(Java20Parser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeToInstantiateContext classOrInterfaceTypeToInstantiate() {
			return GetRuleContext<ClassOrInterfaceTypeToInstantiateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public UnqualifiedClassInstanceCreationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unqualifiedClassInstanceCreationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterUnqualifiedClassInstanceCreationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitUnqualifiedClassInstanceCreationExpression(this);
		}
	}

	[RuleVersion(0)]
	public UnqualifiedClassInstanceCreationExpressionContext unqualifiedClassInstanceCreationExpression() {
		UnqualifiedClassInstanceCreationExpressionContext _localctx = new UnqualifiedClassInstanceCreationExpressionContext(Context, State);
		EnterRule(_localctx, 400, RULE_unqualifiedClassInstanceCreationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2385;
			Match(NEW);
			State = 2387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2386;
				typeArguments();
				}
			}

			State = 2389;
			classOrInterfaceTypeToInstantiate();
			State = 2390;
			Match(LPAREN);
			State = 2392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603651042876063744L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288232437939441649L) != 0)) {
				{
				State = 2391;
				argumentList();
				}
			}

			State = 2394;
			Match(RPAREN);
			State = 2396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,286,Context) ) {
			case 1:
				{
				State = 2395;
				classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeToInstantiateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(Java20Parser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(Java20Parser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(Java20Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(Java20Parser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(0);
		}
		public ClassOrInterfaceTypeToInstantiateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceTypeToInstantiate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceTypeToInstantiate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceTypeToInstantiate(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeToInstantiateContext classOrInterfaceTypeToInstantiate() {
		ClassOrInterfaceTypeToInstantiateContext _localctx = new ClassOrInterfaceTypeToInstantiateContext(Context, State);
		EnterRule(_localctx, 402, RULE_classOrInterfaceTypeToInstantiate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 2398;
				annotation();
				}
				}
				State = 2403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2404;
			Match(Identifier);
			State = 2415;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 2405;
				Match(DOT);
				State = 2409;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 2406;
					annotation();
					}
					}
					State = 2411;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2412;
				Match(Identifier);
				}
				}
				State = 2417;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OACA || _la==LT) {
				{
				State = 2418;
				typeArgumentsOrDiamond();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsOrDiamondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OACA() { return GetToken(Java20Parser.OACA, 0); }
		public TypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentsOrDiamond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterTypeArgumentsOrDiamond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitTypeArgumentsOrDiamond(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
		TypeArgumentsOrDiamondContext _localctx = new TypeArgumentsOrDiamondContext(Context, State);
		EnterRule(_localctx, 404, RULE_typeArgumentsOrDiamond);
		try {
			State = 2423;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2421;
				typeArguments();
				}
				break;
			case OACA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2422;
				Match(OACA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayCreationExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayCreationExpressionWithoutInitializerContext arrayCreationExpressionWithoutInitializer() {
			return GetRuleContext<ArrayCreationExpressionWithoutInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayCreationExpressionWithInitializerContext arrayCreationExpressionWithInitializer() {
			return GetRuleContext<ArrayCreationExpressionWithInitializerContext>(0);
		}
		public ArrayCreationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCreationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterArrayCreationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitArrayCreationExpression(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCreationExpressionContext arrayCreationExpression() {
		ArrayCreationExpressionContext _localctx = new ArrayCreationExpressionContext(Context, State);
		EnterRule(_localctx, 406, RULE_arrayCreationExpression);
		try {
			State = 2427;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,292,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2425;
				arrayCreationExpressionWithoutInitializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2426;
				arrayCreationExpressionWithInitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayCreationExpressionWithoutInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(Java20Parser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimExprsContext dimExprs() {
			return GetRuleContext<DimExprsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ArrayCreationExpressionWithoutInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCreationExpressionWithoutInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterArrayCreationExpressionWithoutInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitArrayCreationExpressionWithoutInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCreationExpressionWithoutInitializerContext arrayCreationExpressionWithoutInitializer() {
		ArrayCreationExpressionWithoutInitializerContext _localctx = new ArrayCreationExpressionWithoutInitializerContext(Context, State);
		EnterRule(_localctx, 408, RULE_arrayCreationExpressionWithoutInitializer);
		try {
			State = 2441;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,295,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2429;
				Match(NEW);
				State = 2430;
				primitiveType();
				State = 2431;
				dimExprs();
				State = 2433;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,293,Context) ) {
				case 1:
					{
					State = 2432;
					dims();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2435;
				Match(NEW);
				State = 2436;
				classType();
				State = 2437;
				dimExprs();
				State = 2439;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,294,Context) ) {
				case 1:
					{
					State = 2438;
					dims();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayCreationExpressionWithInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(Java20Parser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public ArrayCreationExpressionWithInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCreationExpressionWithInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterArrayCreationExpressionWithInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitArrayCreationExpressionWithInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCreationExpressionWithInitializerContext arrayCreationExpressionWithInitializer() {
		ArrayCreationExpressionWithInitializerContext _localctx = new ArrayCreationExpressionWithInitializerContext(Context, State);
		EnterRule(_localctx, 410, RULE_arrayCreationExpressionWithInitializer);
		try {
			State = 2453;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,296,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2443;
				Match(NEW);
				State = 2444;
				primitiveType();
				State = 2445;
				dims();
				State = 2446;
				arrayInitializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2448;
				Match(NEW);
				State = 2449;
				classOrInterfaceType();
				State = 2450;
				dims();
				State = 2451;
				arrayInitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimExprsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DimExprContext[] dimExpr() {
			return GetRuleContexts<DimExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimExprContext dimExpr(int i) {
			return GetRuleContext<DimExprContext>(i);
		}
		public DimExprsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimExprs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterDimExprs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitDimExprs(this);
		}
	}

	[RuleVersion(0)]
	public DimExprsContext dimExprs() {
		DimExprsContext _localctx = new DimExprsContext(Context, State);
		EnterRule(_localctx, 412, RULE_dimExprs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2455;
			dimExpr();
			State = 2459;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,297,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2456;
					dimExpr();
					}
					} 
				}
				State = 2461;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,297,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(Java20Parser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(Java20Parser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public DimExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterDimExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitDimExpr(this);
		}
	}

	[RuleVersion(0)]
	public DimExprContext dimExpr() {
		DimExprContext _localctx = new DimExprContext(Context, State);
		EnterRule(_localctx, 414, RULE_dimExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 2462;
				annotation();
				}
				}
				State = 2467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2468;
			Match(LBRACK);
			State = 2469;
			expression();
			State = 2470;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(Java20Parser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(Java20Parser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryNoNewArrayContext primaryNoNewArray() {
			return GetRuleContext<PrimaryNoNewArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayCreationExpressionWithInitializerContext arrayCreationExpressionWithInitializer() {
			return GetRuleContext<ArrayCreationExpressionWithInitializerContext>(0);
		}
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 416, RULE_arrayAccess);
		try {
			State = 2487;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,299,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2472;
				expressionName();
				State = 2473;
				Match(LBRACK);
				State = 2474;
				expression();
				State = 2475;
				Match(RBRACK);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2477;
				primaryNoNewArray();
				State = 2478;
				Match(LBRACK);
				State = 2479;
				expression();
				State = 2480;
				Match(RBRACK);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2482;
				arrayCreationExpressionWithInitializer();
				State = 2483;
				Match(LBRACK);
				State = 2484;
				expression();
				State = 2485;
				Match(RBRACK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(Java20Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(Java20Parser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(Java20Parser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FieldAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterFieldAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitFieldAccess(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccessContext fieldAccess() {
		FieldAccessContext _localctx = new FieldAccessContext(Context, State);
		EnterRule(_localctx, 418, RULE_fieldAccess);
		try {
			State = 2502;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,300,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2489;
				primary();
				State = 2490;
				Match(DOT);
				State = 2491;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2493;
				Match(SUPER);
				State = 2494;
				Match(DOT);
				State = 2495;
				Match(Identifier);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2496;
				typeName();
				State = 2497;
				Match(DOT);
				State = 2498;
				Match(SUPER);
				State = 2499;
				Match(DOT);
				State = 2500;
				Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(Java20Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(Java20Parser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(Java20Parser.SUPER, 0); }
		public MethodInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterMethodInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitMethodInvocation(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocationContext methodInvocation() {
		MethodInvocationContext _localctx = new MethodInvocationContext(Context, State);
		EnterRule(_localctx, 420, RULE_methodInvocation);
		int _la;
		try {
			State = 2572;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,312,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2504;
				methodName();
				State = 2505;
				Match(LPAREN);
				State = 2507;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603651042876063744L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288232437939441649L) != 0)) {
					{
					State = 2506;
					argumentList();
					}
				}

				State = 2509;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2511;
				typeName();
				State = 2512;
				Match(DOT);
				State = 2514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2513;
					typeArguments();
					}
				}

				State = 2516;
				Match(Identifier);
				State = 2517;
				Match(LPAREN);
				State = 2519;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603651042876063744L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288232437939441649L) != 0)) {
					{
					State = 2518;
					argumentList();
					}
				}

				State = 2521;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2523;
				expressionName();
				State = 2524;
				Match(DOT);
				State = 2526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2525;
					typeArguments();
					}
				}

				State = 2528;
				Match(Identifier);
				State = 2529;
				Match(LPAREN);
				State = 2531;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603651042876063744L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288232437939441649L) != 0)) {
					{
					State = 2530;
					argumentList();
					}
				}

				State = 2533;
				Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2535;
				primary();
				State = 2536;
				Match(DOT);
				State = 2538;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2537;
					typeArguments();
					}
				}

				State = 2540;
				Match(Identifier);
				State = 2541;
				Match(LPAREN);
				State = 2543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603651042876063744L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288232437939441649L) != 0)) {
					{
					State = 2542;
					argumentList();
					}
				}

				State = 2545;
				Match(RPAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2547;
				Match(SUPER);
				State = 2548;
				Match(DOT);
				State = 2550;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2549;
					typeArguments();
					}
				}

				State = 2552;
				Match(Identifier);
				State = 2553;
				Match(LPAREN);
				State = 2555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603651042876063744L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288232437939441649L) != 0)) {
					{
					State = 2554;
					argumentList();
					}
				}

				State = 2557;
				Match(RPAREN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2558;
				typeName();
				State = 2559;
				Match(DOT);
				State = 2560;
				Match(SUPER);
				State = 2561;
				Match(DOT);
				State = 2563;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2562;
					typeArguments();
					}
				}

				State = 2565;
				Match(Identifier);
				State = 2566;
				Match(LPAREN);
				State = 2568;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603651042876063744L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288232437939441649L) != 0)) {
					{
					State = 2567;
					argumentList();
					}
				}

				State = 2570;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java20Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java20Parser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 422, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2574;
			expression();
			State = 2579;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2575;
				Match(COMMA);
				State = 2576;
				expression();
				}
				}
				State = 2581;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONCOLON() { return GetToken(Java20Parser.COLONCOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(Java20Parser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java20Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(Java20Parser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public MethodReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterMethodReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitMethodReference(this);
		}
	}

	[RuleVersion(0)]
	public MethodReferenceContext methodReference() {
		MethodReferenceContext _localctx = new MethodReferenceContext(Context, State);
		EnterRule(_localctx, 424, RULE_methodReference);
		int _la;
		try {
			State = 2629;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,320,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2582;
				expressionName();
				State = 2583;
				Match(COLONCOLON);
				State = 2585;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2584;
					typeArguments();
					}
				}

				State = 2587;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2589;
				primary();
				State = 2590;
				Match(COLONCOLON);
				State = 2592;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2591;
					typeArguments();
					}
				}

				State = 2594;
				Match(Identifier);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2596;
				referenceType();
				State = 2597;
				Match(COLONCOLON);
				State = 2599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2598;
					typeArguments();
					}
				}

				State = 2601;
				Match(Identifier);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2603;
				Match(SUPER);
				State = 2604;
				Match(COLONCOLON);
				State = 2606;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2605;
					typeArguments();
					}
				}

				State = 2608;
				Match(Identifier);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2609;
				typeName();
				State = 2610;
				Match(DOT);
				State = 2611;
				Match(SUPER);
				State = 2612;
				Match(COLONCOLON);
				State = 2614;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2613;
					typeArguments();
					}
				}

				State = 2616;
				Match(Identifier);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2618;
				classType();
				State = 2619;
				Match(COLONCOLON);
				State = 2621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2620;
					typeArguments();
					}
				}

				State = 2623;
				Match(NEW);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2625;
				arrayType();
				State = 2626;
				Match(COLONCOLON);
				State = 2627;
				Match(NEW);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PfEContext pfE() {
			return GetRuleContext<PfEContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, State);
		EnterRule(_localctx, 426, RULE_postfixExpression);
		try {
			State = 2639;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,323,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2631;
				primary();
				State = 2633;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,321,Context) ) {
				case 1:
					{
					State = 2632;
					pfE();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2635;
				expressionName();
				State = 2637;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,322,Context) ) {
				case 1:
					{
					State = 2636;
					pfE();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PfEContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(Java20Parser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PfEContext pfE() {
			return GetRuleContext<PfEContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(Java20Parser.DEC, 0); }
		public PfEContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pfE; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterPfE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitPfE(this);
		}
	}

	[RuleVersion(0)]
	public PfEContext pfE() {
		PfEContext _localctx = new PfEContext(Context, State);
		EnterRule(_localctx, 428, RULE_pfE);
		try {
			State = 2649;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2641;
				Match(INC);
				State = 2643;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,324,Context) ) {
				case 1:
					{
					State = 2642;
					pfE();
					}
					break;
				}
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2645;
				Match(DEC);
				State = 2647;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,325,Context) ) {
				case 1:
					{
					State = 2646;
					pfE();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostIncrementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(Java20Parser.INC, 0); }
		public PostIncrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postIncrementExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression(this);
		}
	}

	[RuleVersion(0)]
	public PostIncrementExpressionContext postIncrementExpression() {
		PostIncrementExpressionContext _localctx = new PostIncrementExpressionContext(Context, State);
		EnterRule(_localctx, 430, RULE_postIncrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2651;
			postfixExpression();
			State = 2652;
			Match(INC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostDecrementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(Java20Parser.DEC, 0); }
		public PostDecrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postDecrementExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterPostDecrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitPostDecrementExpression(this);
		}
	}

	[RuleVersion(0)]
	public PostDecrementExpressionContext postDecrementExpression() {
		PostDecrementExpressionContext _localctx = new PostDecrementExpressionContext(Context, State);
		EnterRule(_localctx, 432, RULE_postDecrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2654;
			postfixExpression();
			State = 2655;
			Match(DEC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PreIncrementExpressionContext preIncrementExpression() {
			return GetRuleContext<PreIncrementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreDecrementExpressionContext preDecrementExpression() {
			return GetRuleContext<PreDecrementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(Java20Parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(Java20Parser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
			return GetRuleContext<UnaryExpressionNotPlusMinusContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 434, RULE_unaryExpression);
		try {
			State = 2664;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2657;
				preIncrementExpression();
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2658;
				preDecrementExpression();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2659;
				Match(ADD);
				State = 2660;
				unaryExpression();
				}
				break;
			case SUB:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2661;
				Match(SUB);
				State = 2662;
				unaryExpression();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case SWITCH:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case TextBlock:
			case NullLiteral:
			case LPAREN:
			case AT:
			case BANG:
			case TILDE:
			case Identifier:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2663;
				unaryExpressionNotPlusMinus();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreIncrementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(Java20Parser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public PreIncrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preIncrementExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterPreIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitPreIncrementExpression(this);
		}
	}

	[RuleVersion(0)]
	public PreIncrementExpressionContext preIncrementExpression() {
		PreIncrementExpressionContext _localctx = new PreIncrementExpressionContext(Context, State);
		EnterRule(_localctx, 436, RULE_preIncrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2666;
			Match(INC);
			State = 2667;
			unaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreDecrementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(Java20Parser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public PreDecrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preDecrementExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterPreDecrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitPreDecrementExpression(this);
		}
	}

	[RuleVersion(0)]
	public PreDecrementExpressionContext preDecrementExpression() {
		PreDecrementExpressionContext _localctx = new PreDecrementExpressionContext(Context, State);
		EnterRule(_localctx, 438, RULE_preDecrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2669;
			Match(DEC);
			State = 2670;
			unaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionNotPlusMinusContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(Java20Parser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(Java20Parser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchExpressionContext switchExpression() {
			return GetRuleContext<SwitchExpressionContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpressionNotPlusMinus; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpressionNotPlusMinus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpressionNotPlusMinus(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
		UnaryExpressionNotPlusMinusContext _localctx = new UnaryExpressionNotPlusMinusContext(Context, State);
		EnterRule(_localctx, 440, RULE_unaryExpressionNotPlusMinus);
		try {
			State = 2679;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,328,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2672;
				postfixExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2673;
				Match(TILDE);
				State = 2674;
				unaryExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2675;
				Match(BANG);
				State = 2676;
				unaryExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2677;
				castExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2678;
				switchExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
			return GetRuleContext<UnaryExpressionNotPlusMinusContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalBoundContext[] additionalBound() {
			return GetRuleContexts<AdditionalBoundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalBoundContext additionalBound(int i) {
			return GetRuleContext<AdditionalBoundContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 442, RULE_castExpression);
		int _la;
		try {
			State = 2708;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,331,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2681;
				Match(LPAREN);
				State = 2682;
				primitiveType();
				State = 2683;
				Match(RPAREN);
				State = 2684;
				unaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2686;
				Match(LPAREN);
				State = 2687;
				referenceType();
				State = 2691;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==BITAND) {
					{
					{
					State = 2688;
					additionalBound();
					}
					}
					State = 2693;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2694;
				Match(RPAREN);
				State = 2695;
				unaryExpressionNotPlusMinus();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2697;
				Match(LPAREN);
				State = 2698;
				referenceType();
				State = 2702;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==BITAND) {
					{
					{
					State = 2699;
					additionalBound();
					}
					}
					State = 2704;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2705;
				Match(RPAREN);
				State = 2706;
				lambdaExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(Java20Parser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(Java20Parser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(Java20Parser.MOD, 0); }
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 444;
		EnterRecursionRule(_localctx, 444, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2711;
			unaryExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2724;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,333,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2722;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,332,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 2713;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 2714;
						Match(MUL);
						State = 2715;
						unaryExpression();
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 2716;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2717;
						Match(DIV);
						State = 2718;
						unaryExpression();
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 2719;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 2720;
						Match(MOD);
						State = 2721;
						unaryExpression();
						}
						break;
					}
					} 
				}
				State = 2726;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,333,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(Java20Parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(Java20Parser.SUB, 0); }
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 446;
		EnterRecursionRule(_localctx, 446, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2728;
			multiplicativeExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2738;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,335,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2736;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,334,Context) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 2730;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2731;
						Match(ADD);
						State = 2732;
						multiplicativeExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 2733;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 2734;
						Match(SUB);
						State = 2735;
						multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 2740;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,335,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(Java20Parser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(Java20Parser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(Java20Parser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(Java20Parser.GT, i);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		return shiftExpression(0);
	}

	private ShiftExpressionContext shiftExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, _parentState);
		ShiftExpressionContext _prevctx = _localctx;
		int _startState = 448;
		EnterRecursionRule(_localctx, 448, RULE_shiftExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2742;
			additiveExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2759;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,337,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2757;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,336,Context) ) {
					case 1:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 2744;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 2745;
						Match(LT);
						State = 2746;
						Match(LT);
						State = 2747;
						additiveExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 2748;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2749;
						Match(GT);
						State = 2750;
						Match(GT);
						State = 2751;
						additiveExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 2752;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 2753;
						Match(GT);
						State = 2754;
						Match(GT);
						State = 2755;
						Match(GT);
						State = 2756;
						additiveExpression(0);
						}
						break;
					}
					} 
				}
				State = 2761;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,337,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(Java20Parser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(Java20Parser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(Java20Parser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(Java20Parser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCEOF() { return GetToken(Java20Parser.INSTANCEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		return relationalExpression(0);
	}

	private RelationalExpressionContext relationalExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 450;
		EnterRecursionRule(_localctx, 450, RULE_relationalExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2763;
			shiftExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2785;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,340,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2783;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,339,Context) ) {
					case 1:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2765;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 2766;
						Match(LT);
						State = 2767;
						shiftExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2768;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 2769;
						Match(GT);
						State = 2770;
						shiftExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2771;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 2772;
						Match(LE);
						State = 2773;
						shiftExpression(0);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2774;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2775;
						Match(GE);
						State = 2776;
						shiftExpression(0);
						}
						break;
					case 5:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2777;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 2778;
						Match(INSTANCEOF);
						State = 2781;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,338,Context) ) {
						case 1:
							{
							State = 2779;
							referenceType();
							}
							break;
						case 2:
							{
							State = 2780;
							pattern();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 2787;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,340,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(Java20Parser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(Java20Parser.NOTEQUAL, 0); }
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 452;
		EnterRecursionRule(_localctx, 452, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2789;
			relationalExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2799;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,342,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2797;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,341,Context) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 2791;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2792;
						Match(EQUAL);
						State = 2793;
						relationalExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 2794;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 2795;
						Match(NOTEQUAL);
						State = 2796;
						relationalExpression(0);
						}
						break;
					}
					} 
				}
				State = 2801;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,342,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITAND() { return GetToken(Java20Parser.BITAND, 0); }
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(Context, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 454;
		EnterRecursionRule(_localctx, 454, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2803;
			equalityExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2810;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,343,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 2805;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2806;
					Match(BITAND);
					State = 2807;
					equalityExpression(0);
					}
					} 
				}
				State = 2812;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,343,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(Java20Parser.CARET, 0); }
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		return exclusiveOrExpression(0);
	}

	private ExclusiveOrExpressionContext exclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(Context, _parentState);
		ExclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 456;
		EnterRecursionRule(_localctx, 456, RULE_exclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2814;
			andExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2821;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,344,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusiveOrExpression);
					State = 2816;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2817;
					Match(CARET);
					State = 2818;
					andExpression(0);
					}
					} 
				}
				State = 2823;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,344,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITOR() { return GetToken(Java20Parser.BITOR, 0); }
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterInclusiveOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitInclusiveOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		return inclusiveOrExpression(0);
	}

	private InclusiveOrExpressionContext inclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(Context, _parentState);
		InclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 458;
		EnterRecursionRule(_localctx, 458, RULE_inclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2825;
			exclusiveOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2832;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,345,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_inclusiveOrExpression);
					State = 2827;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2828;
					Match(BITOR);
					State = 2829;
					exclusiveOrExpression(0);
					}
					} 
				}
				State = 2834;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,345,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(Java20Parser.AND, 0); }
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterConditionalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitConditionalAndExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		return conditionalAndExpression(0);
	}

	private ConditionalAndExpressionContext conditionalAndExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(Context, _parentState);
		ConditionalAndExpressionContext _prevctx = _localctx;
		int _startState = 460;
		EnterRecursionRule(_localctx, 460, RULE_conditionalAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2836;
			inclusiveOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2843;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,346,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConditionalAndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_conditionalAndExpression);
					State = 2838;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2839;
					Match(AND);
					State = 2840;
					inclusiveOrExpression(0);
					}
					} 
				}
				State = 2845;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,346,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(Java20Parser.OR, 0); }
		public ConditionalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterConditionalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitConditionalOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExpressionContext conditionalOrExpression() {
		return conditionalOrExpression(0);
	}

	private ConditionalOrExpressionContext conditionalOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConditionalOrExpressionContext _localctx = new ConditionalOrExpressionContext(Context, _parentState);
		ConditionalOrExpressionContext _prevctx = _localctx;
		int _startState = 462;
		EnterRecursionRule(_localctx, 462, RULE_conditionalOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2847;
			conditionalAndExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2854;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,347,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConditionalOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_conditionalOrExpression);
					State = 2849;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2850;
					Match(OR);
					State = 2851;
					conditionalAndExpression(0);
					}
					} 
				}
				State = 2856;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,347,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(Java20Parser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Java20Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 464, RULE_conditionalExpression);
		try {
			State = 2870;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,348,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2857;
				conditionalOrExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2858;
				conditionalOrExpression(0);
				State = 2859;
				Match(QUESTION);
				State = 2860;
				expression();
				State = 2861;
				Match(COLON);
				State = 2862;
				conditionalExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2864;
				conditionalOrExpression(0);
				State = 2865;
				Match(QUESTION);
				State = 2866;
				expression();
				State = 2867;
				Match(COLON);
				State = 2868;
				lambdaExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 466, RULE_assignmentExpression);
		try {
			State = 2874;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,349,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2872;
				conditionalExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2873;
				assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LeftHandSideContext leftHandSide() {
			return GetRuleContext<LeftHandSideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 468, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2876;
			leftHandSide();
			State = 2877;
			assignmentOperator();
			State = 2878;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftHandSideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public LeftHandSideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftHandSide; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterLeftHandSide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitLeftHandSide(this);
		}
	}

	[RuleVersion(0)]
	public LeftHandSideContext leftHandSide() {
		LeftHandSideContext _localctx = new LeftHandSideContext(Context, State);
		EnterRule(_localctx, 470, RULE_leftHandSide);
		try {
			State = 2883;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,350,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2880;
				expressionName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2881;
				fieldAccess();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2882;
				arrayAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Java20Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL_ASSIGN() { return GetToken(Java20Parser.MUL_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGN() { return GetToken(Java20Parser.DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_ASSIGN() { return GetToken(Java20Parser.MOD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_ASSIGN() { return GetToken(Java20Parser.ADD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_ASSIGN() { return GetToken(Java20Parser.SUB_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT_ASSIGN() { return GetToken(Java20Parser.LSHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSHIFT_ASSIGN() { return GetToken(Java20Parser.RSHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode URSHIFT_ASSIGN() { return GetToken(Java20Parser.URSHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ASSIGN() { return GetToken(Java20Parser.AND_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_ASSIGN() { return GetToken(Java20Parser.XOR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_ASSIGN() { return GetToken(Java20Parser.OR_ASSIGN, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 472, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2885;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 34342961153L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaParametersContext lambdaParameters() {
			return GetRuleContext<LambdaParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(Java20Parser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LambdaBodyContext lambdaBody() {
			return GetRuleContext<LambdaBodyContext>(0);
		}
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpressionContext lambdaExpression() {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(Context, State);
		EnterRule(_localctx, 474, RULE_lambdaExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2887;
			lambdaParameters();
			State = 2888;
			Match(ARROW);
			State = 2889;
			lambdaBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LambdaParameterListContext lambdaParameterList() {
			return GetRuleContext<LambdaParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java20Parser.Identifier, 0); }
		public LambdaParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterLambdaParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitLambdaParameters(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParametersContext lambdaParameters() {
		LambdaParametersContext _localctx = new LambdaParametersContext(Context, State);
		EnterRule(_localctx, 476, RULE_lambdaParameters);
		int _la;
		try {
			State = 2897;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2891;
				Match(LPAREN);
				State = 2893;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18102533424709632L) != 0) || _la==AT || _la==Identifier) {
					{
					State = 2892;
					lambdaParameterList();
					}
				}

				State = 2895;
				Match(RPAREN);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2896;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaParameterContext[] lambdaParameter() {
			return GetRuleContexts<LambdaParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaParameterContext lambdaParameter(int i) {
			return GetRuleContext<LambdaParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java20Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java20Parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(Java20Parser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(Java20Parser.Identifier, i);
		}
		public LambdaParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterLambdaParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitLambdaParameterList(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParameterListContext lambdaParameterList() {
		LambdaParameterListContext _localctx = new LambdaParameterListContext(Context, State);
		EnterRule(_localctx, 478, RULE_lambdaParameterList);
		int _la;
		try {
			State = 2915;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,355,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2899;
				lambdaParameter();
				State = 2904;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2900;
					Match(COMMA);
					State = 2901;
					lambdaParameter();
					}
					}
					State = 2906;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2907;
				Match(Identifier);
				State = 2912;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2908;
					Match(COMMA);
					State = 2909;
					Match(Identifier);
					}
					}
					State = 2914;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaParameterTypeContext lambdaParameterType() {
			return GetRuleContext<LambdaParameterTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableArityParameterContext variableArityParameter() {
			return GetRuleContext<VariableArityParameterContext>(0);
		}
		public LambdaParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterLambdaParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitLambdaParameter(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParameterContext lambdaParameter() {
		LambdaParameterContext _localctx = new LambdaParameterContext(Context, State);
		EnterRule(_localctx, 480, RULE_lambdaParameter);
		int _la;
		try {
			State = 2927;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,357,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2920;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FINAL || _la==AT) {
					{
					{
					State = 2917;
					variableModifier();
					}
					}
					State = 2922;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2923;
				lambdaParameterType();
				State = 2924;
				variableDeclaratorId();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2926;
				variableArityParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParameterTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(Java20Parser.VAR, 0); }
		public LambdaParameterTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameterType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterLambdaParameterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitLambdaParameterType(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParameterTypeContext lambdaParameterType() {
		LambdaParameterTypeContext _localctx = new LambdaParameterTypeContext(Context, State);
		EnterRule(_localctx, 482, RULE_lambdaParameterType);
		try {
			State = 2931;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2929;
				unannType();
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2930;
				Match(VAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LambdaBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterLambdaBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitLambdaBody(this);
		}
	}

	[RuleVersion(0)]
	public LambdaBodyContext lambdaBody() {
		LambdaBodyContext _localctx = new LambdaBodyContext(Context, State);
		EnterRule(_localctx, 484, RULE_lambdaBody);
		try {
			State = 2935;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case SWITCH:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case TextBlock:
			case NullLiteral:
			case LPAREN:
			case AT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2933;
				expression();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2934;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(Java20Parser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java20Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java20Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockContext switchBlock() {
			return GetRuleContext<SwitchBlockContext>(0);
		}
		public SwitchExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterSwitchExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitSwitchExpression(this);
		}
	}

	[RuleVersion(0)]
	public SwitchExpressionContext switchExpression() {
		SwitchExpressionContext _localctx = new SwitchExpressionContext(Context, State);
		EnterRule(_localctx, 486, RULE_switchExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2937;
			Match(SWITCH);
			State = 2938;
			Match(LPAREN);
			State = 2939;
			expression();
			State = 2940;
			Match(RPAREN);
			State = 2941;
			switchBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava20ParserListener typedListener = listener as IJava20ParserListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 488, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2943;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 222: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		case 223: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);
		case 224: return shiftExpression_sempred((ShiftExpressionContext)_localctx, predIndex);
		case 225: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);
		case 226: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);
		case 227: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);
		case 228: return exclusiveOrExpression_sempred((ExclusiveOrExpressionContext)_localctx, predIndex);
		case 229: return inclusiveOrExpression_sempred((InclusiveOrExpressionContext)_localctx, predIndex);
		case 230: return conditionalAndExpression_sempred((ConditionalAndExpressionContext)_localctx, predIndex);
		case 231: return conditionalOrExpression_sempred((ConditionalOrExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool shiftExpression_sempred(ShiftExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 5);
		case 9: return Precpred(Context, 4);
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 1);
		}
		return true;
	}
	private bool exclusiveOrExpression_sempred(ExclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(Context, 1);
		}
		return true;
	}
	private bool inclusiveOrExpression_sempred(InclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return Precpred(Context, 1);
		}
		return true;
	}
	private bool conditionalAndExpression_sempred(ConditionalAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return Precpred(Context, 1);
		}
		return true;
	}
	private bool conditionalOrExpression_sempred(ConditionalOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,126,2946,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
		2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
		2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,
		2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,
		2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,
		2,243,7,243,2,244,7,244,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,5,4,501,
		8,4,10,4,12,4,504,9,4,1,4,1,4,3,4,508,8,4,1,5,1,5,3,5,512,8,5,1,6,1,6,
		1,7,1,7,1,8,1,8,1,8,3,8,521,8,8,1,9,1,9,5,9,525,8,9,10,9,12,9,528,9,9,
		1,9,1,9,3,9,532,8,9,1,9,3,9,535,8,9,1,10,1,10,1,10,3,10,540,8,10,1,10,
		5,10,543,8,10,10,10,12,10,546,9,10,1,10,1,10,3,10,550,8,10,1,10,3,10,553,
		8,10,1,11,5,11,556,8,11,10,11,12,11,559,9,11,1,11,1,11,3,11,563,8,11,1,
		11,1,11,1,11,5,11,568,8,11,10,11,12,11,571,9,11,1,11,1,11,3,11,575,8,11,
		1,11,1,11,1,11,5,11,580,8,11,10,11,12,11,583,9,11,1,11,1,11,3,11,587,8,
		11,3,11,589,8,11,1,12,1,12,1,13,5,13,594,8,13,10,13,12,13,597,9,13,1,13,
		1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,610,8,14,1,15,5,
		15,613,8,15,10,15,12,15,616,9,15,1,15,1,15,1,15,5,15,621,8,15,10,15,12,
		15,624,9,15,1,15,1,15,5,15,628,8,15,10,15,12,15,631,9,15,1,16,5,16,634,
		8,16,10,16,12,16,637,9,16,1,16,1,16,3,16,641,8,16,1,17,1,17,1,18,1,18,
		1,18,1,18,5,18,649,8,18,10,18,12,18,652,9,18,3,18,654,8,18,1,19,1,19,1,
		19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,5,21,666,8,21,10,21,12,21,669,9,
		21,1,22,1,22,3,22,673,8,22,1,23,5,23,676,8,23,10,23,12,23,679,9,23,1,23,
		1,23,3,23,683,8,23,1,24,1,24,1,24,1,24,3,24,689,8,24,1,25,1,25,1,25,3,
		25,694,8,25,1,26,1,26,1,26,3,26,699,8,26,1,27,1,27,1,27,3,27,704,8,27,
		1,28,1,28,1,28,3,28,709,8,28,1,29,1,29,1,29,3,29,714,8,29,1,29,1,29,1,
		30,1,30,1,31,1,31,1,31,3,31,723,8,31,1,32,1,32,3,32,727,8,32,1,33,3,33,
		730,8,33,1,33,5,33,733,8,33,10,33,12,33,736,9,33,1,33,5,33,739,8,33,10,
		33,12,33,742,9,33,1,34,5,34,745,8,34,10,34,12,34,748,9,34,1,34,1,34,1,
		35,5,35,753,8,35,10,35,12,35,756,9,35,1,35,1,35,1,35,1,35,5,35,762,8,35,
		10,35,12,35,765,9,35,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,37,3,37,775,
		8,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,
		1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,
		3,42,804,8,42,1,43,5,43,807,8,43,10,43,12,43,810,9,43,1,43,3,43,813,8,
		43,1,43,1,43,1,43,1,43,5,43,819,8,43,10,43,12,43,822,9,43,1,43,1,43,5,
		43,826,8,43,10,43,12,43,829,9,43,1,43,1,43,1,44,1,44,5,44,835,8,44,10,
		44,12,44,838,9,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,849,
		8,44,10,44,12,44,852,9,44,3,44,854,8,44,1,44,1,44,1,44,1,44,1,44,1,44,
		1,44,1,44,5,44,864,8,44,10,44,12,44,867,9,44,3,44,869,8,44,1,44,1,44,1,
		44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,883,8,44,10,44,12,
		44,886,9,44,1,44,1,44,3,44,890,8,44,1,45,1,45,1,46,1,46,1,46,3,46,897,
		8,46,1,47,5,47,900,8,47,10,47,12,47,903,9,47,1,47,1,47,1,47,3,47,908,8,
		47,1,47,3,47,911,8,47,1,47,3,47,914,8,47,1,47,3,47,917,8,47,1,47,1,47,
		1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,931,8,48,1,49,1,
		49,1,49,1,49,1,50,1,50,1,50,5,50,940,8,50,10,50,12,50,943,9,50,1,51,1,
		51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,5,53,954,8,53,10,53,12,53,957,9,
		53,1,54,1,54,1,54,1,54,5,54,963,8,54,10,54,12,54,966,9,54,1,55,1,55,5,
		55,970,8,55,10,55,12,55,973,9,55,1,55,1,55,1,56,1,56,1,56,1,56,3,56,981,
		8,56,1,57,1,57,1,57,1,57,1,57,3,57,988,8,57,1,58,5,58,991,8,58,10,58,12,
		58,994,9,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
		3,59,1008,8,59,1,60,1,60,1,60,5,60,1013,8,60,10,60,12,60,1016,9,60,1,61,
		1,61,1,61,3,61,1021,8,61,1,62,1,62,3,62,1025,8,62,1,63,1,63,3,63,1029,
		8,63,1,64,1,64,3,64,1033,8,64,1,65,1,65,3,65,1037,8,65,1,66,1,66,1,66,
		3,66,1042,8,66,1,67,1,67,1,67,5,67,1047,8,67,10,67,12,67,1050,9,67,3,67,
		1052,8,67,1,67,1,67,3,67,1056,8,67,1,67,3,67,1059,8,67,1,68,1,68,5,68,
		1063,8,68,10,68,12,68,1066,9,68,1,68,1,68,3,68,1070,8,68,1,68,3,68,1073,
		8,68,1,69,1,69,3,69,1077,8,69,1,69,1,69,3,69,1081,8,69,1,69,1,69,5,69,
		1085,8,69,10,69,12,69,1088,9,69,1,69,1,69,3,69,1092,8,69,3,69,1094,8,69,
		1,70,1,70,1,71,1,71,1,72,1,72,1,72,3,72,1103,8,72,1,72,1,72,1,73,5,73,
		1108,8,73,10,73,12,73,1111,9,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,
		1,74,1,74,1,74,1,74,1,74,3,74,1126,8,74,1,75,1,75,5,75,1130,8,75,10,75,
		12,75,1133,9,75,3,75,1135,8,75,1,75,1,75,1,75,3,75,1140,8,75,1,76,1,76,
		3,76,1144,8,76,1,77,1,77,1,77,1,77,1,77,3,77,1151,8,77,1,77,3,77,1154,
		8,77,1,77,1,77,3,77,1158,8,77,1,78,5,78,1161,8,78,10,78,12,78,1164,9,78,
		1,78,1,78,1,78,3,78,1169,8,78,1,78,1,78,1,79,1,79,1,79,5,79,1176,8,79,
		10,79,12,79,1179,9,79,1,80,5,80,1182,8,80,10,80,12,80,1185,9,80,1,80,1,
		80,1,80,1,80,3,80,1191,8,80,1,81,5,81,1194,8,81,10,81,12,81,1197,9,81,
		1,81,1,81,5,81,1201,8,81,10,81,12,81,1204,9,81,1,81,1,81,1,81,1,82,1,82,
		3,82,1211,8,82,1,83,1,83,1,83,1,84,1,84,1,84,5,84,1219,8,84,10,84,12,84,
		1222,9,84,1,85,1,85,3,85,1226,8,85,1,86,1,86,3,86,1230,8,86,1,87,1,87,
		1,88,1,88,1,88,1,89,5,89,1238,8,89,10,89,12,89,1241,9,89,1,89,1,89,3,89,
		1245,8,89,1,89,1,89,1,90,1,90,1,90,1,90,3,90,1253,8,90,1,91,3,91,1256,
		8,91,1,91,1,91,1,91,1,91,1,91,3,91,1263,8,91,1,91,3,91,1266,8,91,1,91,
		1,91,1,92,1,92,1,93,1,93,3,93,1274,8,93,1,93,3,93,1277,8,93,1,93,1,93,
		1,94,3,94,1282,8,94,1,94,1,94,1,94,3,94,1287,8,94,1,94,1,94,1,94,1,94,
		3,94,1293,8,94,1,94,1,94,3,94,1297,8,94,1,94,1,94,1,94,3,94,1302,8,94,
		1,94,1,94,1,94,3,94,1307,8,94,1,95,5,95,1310,8,95,10,95,12,95,1313,9,95,
		1,95,1,95,1,95,3,95,1318,8,95,1,95,1,95,1,96,1,96,3,96,1324,8,96,1,96,
		3,96,1327,8,96,1,96,3,96,1330,8,96,1,96,1,96,1,97,1,97,1,97,5,97,1337,
		8,97,10,97,12,97,1340,9,97,1,98,5,98,1343,8,98,10,98,12,98,1346,9,98,1,
		98,1,98,1,98,3,98,1351,8,98,1,98,3,98,1354,8,98,1,98,3,98,1357,8,98,1,
		99,1,99,1,100,1,100,5,100,1363,8,100,10,100,12,100,1366,9,100,1,101,5,
		101,1369,8,101,10,101,12,101,1372,9,101,1,101,1,101,1,101,3,101,1377,8,
		101,1,101,1,101,3,101,1381,8,101,1,101,1,101,1,102,1,102,3,102,1387,8,
		102,1,102,1,102,1,103,1,103,1,103,5,103,1394,8,103,10,103,12,103,1397,
		9,103,1,104,5,104,1400,8,104,10,104,12,104,1403,9,104,1,104,1,104,1,104,
		1,104,3,104,1409,8,104,1,105,5,105,1412,8,105,10,105,12,105,1415,9,105,
		1,105,1,105,5,105,1419,8,105,10,105,12,105,1422,9,105,1,105,1,105,1,105,
		1,106,1,106,1,107,1,107,5,107,1431,8,107,10,107,12,107,1434,9,107,1,107,
		1,107,1,108,1,108,3,108,1440,8,108,1,109,5,109,1443,8,109,10,109,12,109,
		1446,9,109,1,109,1,109,1,109,1,110,1,110,3,110,1453,8,110,1,111,5,111,
		1456,8,111,10,111,12,111,1459,9,111,1,111,1,111,1,111,3,111,1464,8,111,
		1,111,3,111,1467,8,111,1,111,3,111,1470,8,111,1,111,1,111,1,112,1,112,
		1,112,1,112,1,112,1,112,1,112,1,112,1,112,3,112,1483,8,112,1,113,1,113,
		1,113,1,114,1,114,1,114,1,114,5,114,1492,8,114,10,114,12,114,1495,9,114,
		1,115,1,115,5,115,1499,8,115,10,115,12,115,1502,9,115,1,115,1,115,1,116,
		1,116,1,116,1,116,1,116,3,116,1511,8,116,1,117,5,117,1514,8,117,10,117,
		12,117,1517,9,117,1,117,1,117,1,117,1,117,1,118,1,118,1,118,1,118,3,118,
		1527,8,118,1,119,5,119,1530,8,119,10,119,12,119,1533,9,119,1,119,1,119,
		1,119,1,120,1,120,1,120,1,120,1,120,1,120,1,120,3,120,1545,8,120,1,121,
		5,121,1548,8,121,10,121,12,121,1551,9,121,1,121,1,121,1,121,1,121,1,121,
		1,122,1,122,5,122,1560,8,122,10,122,12,122,1563,9,122,1,122,1,122,1,123,
		1,123,1,123,1,123,1,123,3,123,1572,8,123,1,124,5,124,1575,8,124,10,124,
		12,124,1578,9,124,1,124,1,124,1,124,1,124,1,124,3,124,1585,8,124,1,124,
		3,124,1588,8,124,1,124,1,124,1,125,1,125,1,125,3,125,1595,8,125,1,126,
		1,126,1,126,1,127,1,127,1,127,3,127,1603,8,127,1,128,1,128,1,128,1,128,
		3,128,1609,8,128,1,128,1,128,1,129,1,129,1,129,5,129,1616,8,129,10,129,
		12,129,1619,9,129,1,130,1,130,1,130,1,130,1,131,1,131,1,131,3,131,1628,
		8,131,1,132,1,132,3,132,1632,8,132,1,132,3,132,1635,8,132,1,132,1,132,
		1,133,1,133,1,133,5,133,1642,8,133,10,133,12,133,1645,9,133,1,134,1,134,
		1,134,1,135,1,135,1,135,1,135,1,135,1,135,1,136,1,136,3,136,1658,8,136,
		1,136,3,136,1661,8,136,1,136,1,136,1,137,1,137,1,137,5,137,1668,8,137,
		10,137,12,137,1671,9,137,1,138,1,138,3,138,1675,8,138,1,138,1,138,1,139,
		1,139,5,139,1681,8,139,10,139,12,139,1684,9,139,1,140,1,140,1,140,3,140,
		1689,8,140,1,141,1,141,3,141,1693,8,141,1,142,5,142,1696,8,142,10,142,
		12,142,1699,9,142,1,142,1,142,3,142,1703,8,142,1,143,1,143,3,143,1707,
		8,143,1,144,1,144,1,144,1,145,1,145,1,145,1,145,1,145,1,145,3,145,1718,
		8,145,1,146,1,146,1,146,1,146,1,146,3,146,1725,8,146,1,147,1,147,1,147,
		1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,3,147,1740,
		8,147,1,148,1,148,1,149,1,149,1,149,1,149,1,150,1,150,1,150,1,150,1,151,
		1,151,1,151,1,152,1,152,1,152,1,152,1,152,1,152,1,152,3,152,1762,8,152,
		1,153,1,153,1,153,1,153,1,153,1,153,1,154,1,154,1,154,1,154,1,154,1,154,
		1,154,1,154,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,156,1,156,
		1,156,1,156,3,156,1790,8,156,1,156,1,156,1,157,1,157,1,157,1,157,1,157,
		1,157,1,158,1,158,1,158,5,158,1803,8,158,10,158,12,158,1806,9,158,1,158,
		1,158,1,158,1,158,5,158,1812,8,158,10,158,12,158,1815,9,158,1,158,1,158,
		1,158,5,158,1820,8,158,10,158,12,158,1823,9,158,1,158,3,158,1826,8,158,
		1,159,1,159,1,159,1,159,1,159,1,159,1,159,3,159,1835,8,159,1,160,1,160,
		1,160,1,160,1,160,5,160,1842,8,160,10,160,12,160,1845,9,160,1,160,1,160,
		1,161,1,161,1,161,1,161,5,161,1853,8,161,10,161,12,161,1856,9,161,1,161,
		3,161,1859,8,161,1,162,1,162,1,163,1,163,1,163,1,163,1,163,1,163,1,164,
		1,164,1,164,1,164,1,164,1,164,1,165,1,165,1,165,1,165,1,165,1,165,1,165,
		1,165,1,166,1,166,3,166,1885,8,166,1,167,1,167,3,167,1889,8,167,1,168,
		1,168,1,168,3,168,1894,8,168,1,168,1,168,3,168,1898,8,168,1,168,1,168,
		3,168,1902,8,168,1,168,1,168,1,168,1,169,1,169,1,169,3,169,1910,8,169,
		1,169,1,169,3,169,1914,8,169,1,169,1,169,3,169,1918,8,169,1,169,1,169,
		1,169,1,170,1,170,3,170,1925,8,170,1,171,1,171,1,172,1,172,1,172,5,172,
		1932,8,172,10,172,12,172,1935,9,172,1,173,1,173,1,173,1,173,1,173,1,173,
		1,173,1,173,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,175,1,175,
		3,175,1955,8,175,1,175,1,175,1,176,1,176,3,176,1961,8,176,1,176,1,176,
		1,177,1,177,3,177,1967,8,177,1,177,1,177,1,178,1,178,1,178,1,178,1,179,
		1,179,1,179,1,179,1,179,1,179,1,180,1,180,1,180,1,180,1,180,1,180,1,180,
		1,180,1,180,1,180,1,180,3,180,1992,8,180,1,180,1,180,1,180,3,180,1997,
		8,180,1,181,1,181,5,181,2001,8,181,10,181,12,181,2004,9,181,1,182,1,182,
		1,182,1,182,1,182,1,182,1,183,5,183,2013,8,183,10,183,12,183,2016,9,183,
		1,183,1,183,1,183,1,184,1,184,1,184,5,184,2024,8,184,10,184,12,184,2027,
		9,184,1,185,1,185,1,185,1,186,1,186,1,186,1,186,3,186,2036,8,186,1,186,
		3,186,2039,8,186,1,187,1,187,1,187,3,187,2044,8,187,1,187,1,187,1,188,
		1,188,1,188,5,188,2051,8,188,10,188,12,188,2054,9,188,1,189,1,189,3,189,
		2058,8,189,1,190,1,190,3,190,2062,8,190,1,191,1,191,1,191,1,191,1,192,
		1,192,1,193,1,193,1,194,1,194,3,194,2074,8,194,1,195,1,195,3,195,2078,
		8,195,1,196,1,196,3,196,2082,8,196,1,196,1,196,3,196,2086,8,196,1,196,
		1,196,3,196,2090,8,196,1,196,1,196,1,196,1,196,3,196,2096,8,196,1,196,
		1,196,1,196,1,196,3,196,2102,8,196,1,196,1,196,3,196,2106,8,196,1,196,
		1,196,1,196,1,196,3,196,2112,8,196,1,196,1,196,1,196,1,196,3,196,2118,
		8,196,1,196,1,196,1,196,1,196,3,196,2124,8,196,1,196,1,196,1,196,1,196,
		3,196,2130,8,196,1,196,1,196,1,196,1,196,1,196,1,196,3,196,2138,8,196,
		1,196,1,196,1,196,1,196,1,196,3,196,2145,8,196,1,196,1,196,1,196,1,196,
		1,196,3,196,2152,8,196,1,196,1,196,1,196,3,196,2157,8,196,1,196,1,196,
		3,196,2161,8,196,1,196,1,196,1,196,3,196,2166,8,196,1,196,1,196,1,196,
		3,196,2171,8,196,1,196,1,196,3,196,2175,8,196,1,196,1,196,1,196,3,196,
		2180,8,196,1,196,1,196,1,196,3,196,2185,8,196,1,196,1,196,3,196,2189,8,
		196,1,196,1,196,1,196,3,196,2194,8,196,1,196,1,196,1,196,3,196,2199,8,
		196,1,196,1,196,3,196,2203,8,196,1,196,1,196,1,196,3,196,2208,8,196,1,
		196,1,196,1,196,3,196,2213,8,196,1,196,1,196,3,196,2217,8,196,1,196,1,
		196,1,196,1,196,1,196,3,196,2224,8,196,1,196,1,196,1,196,3,196,2229,8,
		196,1,196,1,196,3,196,2233,8,196,1,196,1,196,1,196,3,196,2238,8,196,1,
		196,1,196,3,196,2242,8,196,1,196,1,196,1,196,3,196,2247,8,196,1,196,1,
		196,3,196,2251,8,196,1,196,1,196,1,196,3,196,2256,8,196,1,196,1,196,3,
		196,2260,8,196,1,196,1,196,1,196,3,196,2265,8,196,1,196,1,196,3,196,2269,
		8,196,1,196,1,196,1,196,1,196,1,196,3,196,2276,8,196,1,196,1,196,3,196,
		2280,8,196,1,196,1,196,1,196,3,196,2285,8,196,1,196,1,196,3,196,2289,8,
		196,1,196,1,196,1,196,1,196,3,196,2295,8,196,3,196,2297,8,196,1,197,1,
		197,1,197,3,197,2302,8,197,1,197,1,197,1,197,3,197,2307,8,197,1,197,1,
		197,1,197,1,197,3,197,2313,8,197,1,197,1,197,3,197,2317,8,197,1,197,1,
		197,1,197,3,197,2322,8,197,1,197,1,197,3,197,2326,8,197,1,197,1,197,3,
		197,2330,8,197,1,197,1,197,3,197,2334,8,197,3,197,2336,8,197,1,198,1,198,
		1,198,5,198,2341,8,198,10,198,12,198,2344,9,198,1,198,1,198,1,198,1,198,
		1,198,1,198,5,198,2352,8,198,10,198,12,198,2355,9,198,1,198,1,198,1,198,
		1,198,1,198,1,198,5,198,2363,8,198,10,198,12,198,2366,9,198,1,198,1,198,
		1,198,1,198,1,198,3,198,2373,8,198,1,199,1,199,1,199,1,199,1,199,1,199,
		1,199,1,199,1,199,3,199,2384,8,199,1,200,1,200,3,200,2388,8,200,1,200,
		1,200,1,200,3,200,2393,8,200,1,200,1,200,3,200,2397,8,200,1,201,5,201,
		2400,8,201,10,201,12,201,2403,9,201,1,201,1,201,1,201,5,201,2408,8,201,
		10,201,12,201,2411,9,201,1,201,5,201,2414,8,201,10,201,12,201,2417,9,201,
		1,201,3,201,2420,8,201,1,202,1,202,3,202,2424,8,202,1,203,1,203,3,203,
		2428,8,203,1,204,1,204,1,204,1,204,3,204,2434,8,204,1,204,1,204,1,204,
		1,204,3,204,2440,8,204,3,204,2442,8,204,1,205,1,205,1,205,1,205,1,205,
		1,205,1,205,1,205,1,205,1,205,3,205,2454,8,205,1,206,1,206,5,206,2458,
		8,206,10,206,12,206,2461,9,206,1,207,5,207,2464,8,207,10,207,12,207,2467,
		9,207,1,207,1,207,1,207,1,207,1,208,1,208,1,208,1,208,1,208,1,208,1,208,
		1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,3,208,2488,8,208,1,209,
		1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,
		3,209,2503,8,209,1,210,1,210,1,210,3,210,2508,8,210,1,210,1,210,1,210,
		1,210,1,210,3,210,2515,8,210,1,210,1,210,1,210,3,210,2520,8,210,1,210,
		1,210,1,210,1,210,1,210,3,210,2527,8,210,1,210,1,210,1,210,3,210,2532,
		8,210,1,210,1,210,1,210,1,210,1,210,3,210,2539,8,210,1,210,1,210,1,210,
		3,210,2544,8,210,1,210,1,210,1,210,1,210,1,210,3,210,2551,8,210,1,210,
		1,210,1,210,3,210,2556,8,210,1,210,1,210,1,210,1,210,1,210,1,210,3,210,
		2564,8,210,1,210,1,210,1,210,3,210,2569,8,210,1,210,1,210,3,210,2573,8,
		210,1,211,1,211,1,211,5,211,2578,8,211,10,211,12,211,2581,9,211,1,212,
		1,212,1,212,3,212,2586,8,212,1,212,1,212,1,212,1,212,1,212,3,212,2593,
		8,212,1,212,1,212,1,212,1,212,1,212,3,212,2600,8,212,1,212,1,212,1,212,
		1,212,1,212,3,212,2607,8,212,1,212,1,212,1,212,1,212,1,212,1,212,3,212,
		2615,8,212,1,212,1,212,1,212,1,212,1,212,3,212,2622,8,212,1,212,1,212,
		1,212,1,212,1,212,1,212,3,212,2630,8,212,1,213,1,213,3,213,2634,8,213,
		1,213,1,213,3,213,2638,8,213,3,213,2640,8,213,1,214,1,214,3,214,2644,8,
		214,1,214,1,214,3,214,2648,8,214,3,214,2650,8,214,1,215,1,215,1,215,1,
		216,1,216,1,216,1,217,1,217,1,217,1,217,1,217,1,217,1,217,3,217,2665,8,
		217,1,218,1,218,1,218,1,219,1,219,1,219,1,220,1,220,1,220,1,220,1,220,
		1,220,1,220,3,220,2680,8,220,1,221,1,221,1,221,1,221,1,221,1,221,1,221,
		1,221,5,221,2690,8,221,10,221,12,221,2693,9,221,1,221,1,221,1,221,1,221,
		1,221,1,221,5,221,2701,8,221,10,221,12,221,2704,9,221,1,221,1,221,1,221,
		3,221,2709,8,221,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,
		1,222,1,222,1,222,5,222,2723,8,222,10,222,12,222,2726,9,222,1,223,1,223,
		1,223,1,223,1,223,1,223,1,223,1,223,1,223,5,223,2737,8,223,10,223,12,223,
		2740,9,223,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
		1,224,1,224,1,224,1,224,1,224,1,224,5,224,2758,8,224,10,224,12,224,2761,
		9,224,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,
		1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,3,225,2782,8,225,5,225,
		2784,8,225,10,225,12,225,2787,9,225,1,226,1,226,1,226,1,226,1,226,1,226,
		1,226,1,226,1,226,5,226,2798,8,226,10,226,12,226,2801,9,226,1,227,1,227,
		1,227,1,227,1,227,1,227,5,227,2809,8,227,10,227,12,227,2812,9,227,1,228,
		1,228,1,228,1,228,1,228,1,228,5,228,2820,8,228,10,228,12,228,2823,9,228,
		1,229,1,229,1,229,1,229,1,229,1,229,5,229,2831,8,229,10,229,12,229,2834,
		9,229,1,230,1,230,1,230,1,230,1,230,1,230,5,230,2842,8,230,10,230,12,230,
		2845,9,230,1,231,1,231,1,231,1,231,1,231,1,231,5,231,2853,8,231,10,231,
		12,231,2856,9,231,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,
		1,232,1,232,1,232,1,232,3,232,2871,8,232,1,233,1,233,3,233,2875,8,233,
		1,234,1,234,1,234,1,234,1,235,1,235,1,235,3,235,2884,8,235,1,236,1,236,
		1,237,1,237,1,237,1,237,1,238,1,238,3,238,2894,8,238,1,238,1,238,3,238,
		2898,8,238,1,239,1,239,1,239,5,239,2903,8,239,10,239,12,239,2906,9,239,
		1,239,1,239,1,239,5,239,2911,8,239,10,239,12,239,2914,9,239,3,239,2916,
		8,239,1,240,5,240,2919,8,240,10,240,12,240,2922,9,240,1,240,1,240,1,240,
		1,240,3,240,2928,8,240,1,241,1,241,3,241,2932,8,241,1,242,1,242,3,242,
		2936,8,242,1,243,1,243,1,243,1,243,1,243,1,243,1,244,1,244,1,244,0,10,
		444,446,448,450,452,454,456,458,460,462,245,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
		70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
		114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
		150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
		186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,
		222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,
		258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,
		294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,
		330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,
		366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,
		402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,
		438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,
		474,476,478,480,482,484,486,488,0,6,1,0,69,75,5,0,22,22,25,25,44,44,46,
		46,54,54,2,0,31,31,37,37,2,0,13,13,55,55,2,0,57,57,60,60,2,0,88,88,112,
		122,3206,0,490,1,0,0,0,2,493,1,0,0,0,4,495,1,0,0,0,6,497,1,0,0,0,8,502,
		1,0,0,0,10,511,1,0,0,0,12,513,1,0,0,0,14,515,1,0,0,0,16,520,1,0,0,0,18,
		522,1,0,0,0,20,539,1,0,0,0,22,588,1,0,0,0,24,590,1,0,0,0,26,595,1,0,0,
		0,28,609,1,0,0,0,30,614,1,0,0,0,32,635,1,0,0,0,34,642,1,0,0,0,36,644,1,
		0,0,0,38,655,1,0,0,0,40,658,1,0,0,0,42,662,1,0,0,0,44,672,1,0,0,0,46,677,
		1,0,0,0,48,688,1,0,0,0,50,690,1,0,0,0,52,695,1,0,0,0,54,700,1,0,0,0,56,
		705,1,0,0,0,58,713,1,0,0,0,60,717,1,0,0,0,62,719,1,0,0,0,64,726,1,0,0,
		0,66,729,1,0,0,0,68,746,1,0,0,0,70,754,1,0,0,0,72,768,1,0,0,0,74,774,1,
		0,0,0,76,776,1,0,0,0,78,780,1,0,0,0,80,786,1,0,0,0,82,793,1,0,0,0,84,803,
		1,0,0,0,86,808,1,0,0,0,88,889,1,0,0,0,90,891,1,0,0,0,92,896,1,0,0,0,94,
		901,1,0,0,0,96,930,1,0,0,0,98,932,1,0,0,0,100,936,1,0,0,0,102,944,1,0,
		0,0,104,947,1,0,0,0,106,950,1,0,0,0,108,958,1,0,0,0,110,967,1,0,0,0,112,
		980,1,0,0,0,114,987,1,0,0,0,116,992,1,0,0,0,118,1007,1,0,0,0,120,1009,
		1,0,0,0,122,1017,1,0,0,0,124,1022,1,0,0,0,126,1028,1,0,0,0,128,1032,1,
		0,0,0,130,1036,1,0,0,0,132,1041,1,0,0,0,134,1051,1,0,0,0,136,1060,1,0,
		0,0,138,1093,1,0,0,0,140,1095,1,0,0,0,142,1097,1,0,0,0,144,1102,1,0,0,
		0,146,1109,1,0,0,0,148,1125,1,0,0,0,150,1134,1,0,0,0,152,1143,1,0,0,0,
		154,1145,1,0,0,0,156,1162,1,0,0,0,158,1172,1,0,0,0,160,1190,1,0,0,0,162,
		1195,1,0,0,0,164,1210,1,0,0,0,166,1212,1,0,0,0,168,1215,1,0,0,0,170,1225,
		1,0,0,0,172,1229,1,0,0,0,174,1231,1,0,0,0,176,1233,1,0,0,0,178,1239,1,
		0,0,0,180,1252,1,0,0,0,182,1255,1,0,0,0,184,1269,1,0,0,0,186,1271,1,0,
		0,0,188,1306,1,0,0,0,190,1311,1,0,0,0,192,1321,1,0,0,0,194,1333,1,0,0,
		0,196,1344,1,0,0,0,198,1358,1,0,0,0,200,1360,1,0,0,0,202,1370,1,0,0,0,
		204,1384,1,0,0,0,206,1390,1,0,0,0,208,1408,1,0,0,0,210,1413,1,0,0,0,212,
		1426,1,0,0,0,214,1428,1,0,0,0,216,1439,1,0,0,0,218,1444,1,0,0,0,220,1452,
		1,0,0,0,222,1457,1,0,0,0,224,1482,1,0,0,0,226,1484,1,0,0,0,228,1487,1,
		0,0,0,230,1496,1,0,0,0,232,1510,1,0,0,0,234,1515,1,0,0,0,236,1526,1,0,
		0,0,238,1531,1,0,0,0,240,1544,1,0,0,0,242,1549,1,0,0,0,244,1557,1,0,0,
		0,246,1571,1,0,0,0,248,1576,1,0,0,0,250,1594,1,0,0,0,252,1596,1,0,0,0,
		254,1602,1,0,0,0,256,1604,1,0,0,0,258,1612,1,0,0,0,260,1620,1,0,0,0,262,
		1627,1,0,0,0,264,1629,1,0,0,0,266,1638,1,0,0,0,268,1646,1,0,0,0,270,1649,
		1,0,0,0,272,1655,1,0,0,0,274,1664,1,0,0,0,276,1672,1,0,0,0,278,1678,1,
		0,0,0,280,1688,1,0,0,0,282,1692,1,0,0,0,284,1697,1,0,0,0,286,1706,1,0,
		0,0,288,1708,1,0,0,0,290,1717,1,0,0,0,292,1724,1,0,0,0,294,1739,1,0,0,
		0,296,1741,1,0,0,0,298,1743,1,0,0,0,300,1747,1,0,0,0,302,1751,1,0,0,0,
		304,1761,1,0,0,0,306,1763,1,0,0,0,308,1769,1,0,0,0,310,1777,1,0,0,0,312,
		1785,1,0,0,0,314,1793,1,0,0,0,316,1825,1,0,0,0,318,1827,1,0,0,0,320,1836,
		1,0,0,0,322,1858,1,0,0,0,324,1860,1,0,0,0,326,1862,1,0,0,0,328,1868,1,
		0,0,0,330,1874,1,0,0,0,332,1884,1,0,0,0,334,1888,1,0,0,0,336,1890,1,0,
		0,0,338,1906,1,0,0,0,340,1924,1,0,0,0,342,1926,1,0,0,0,344,1928,1,0,0,
		0,346,1936,1,0,0,0,348,1944,1,0,0,0,350,1952,1,0,0,0,352,1958,1,0,0,0,
		354,1964,1,0,0,0,356,1970,1,0,0,0,358,1974,1,0,0,0,360,1996,1,0,0,0,362,
		1998,1,0,0,0,364,2005,1,0,0,0,366,2014,1,0,0,0,368,2020,1,0,0,0,370,2028,
		1,0,0,0,372,2031,1,0,0,0,374,2040,1,0,0,0,376,2047,1,0,0,0,378,2057,1,
		0,0,0,380,2061,1,0,0,0,382,2063,1,0,0,0,384,2067,1,0,0,0,386,2069,1,0,
		0,0,388,2073,1,0,0,0,390,2077,1,0,0,0,392,2296,1,0,0,0,394,2335,1,0,0,
		0,396,2372,1,0,0,0,398,2383,1,0,0,0,400,2385,1,0,0,0,402,2401,1,0,0,0,
		404,2423,1,0,0,0,406,2427,1,0,0,0,408,2441,1,0,0,0,410,2453,1,0,0,0,412,
		2455,1,0,0,0,414,2465,1,0,0,0,416,2487,1,0,0,0,418,2502,1,0,0,0,420,2572,
		1,0,0,0,422,2574,1,0,0,0,424,2629,1,0,0,0,426,2639,1,0,0,0,428,2649,1,
		0,0,0,430,2651,1,0,0,0,432,2654,1,0,0,0,434,2664,1,0,0,0,436,2666,1,0,
		0,0,438,2669,1,0,0,0,440,2679,1,0,0,0,442,2708,1,0,0,0,444,2710,1,0,0,
		0,446,2727,1,0,0,0,448,2741,1,0,0,0,450,2762,1,0,0,0,452,2788,1,0,0,0,
		454,2802,1,0,0,0,456,2813,1,0,0,0,458,2824,1,0,0,0,460,2835,1,0,0,0,462,
		2846,1,0,0,0,464,2870,1,0,0,0,466,2874,1,0,0,0,468,2876,1,0,0,0,470,2883,
		1,0,0,0,472,2885,1,0,0,0,474,2887,1,0,0,0,476,2897,1,0,0,0,478,2915,1,
		0,0,0,480,2927,1,0,0,0,482,2931,1,0,0,0,484,2935,1,0,0,0,486,2937,1,0,
		0,0,488,2943,1,0,0,0,490,491,3,64,32,0,491,492,5,0,0,1,492,1,1,0,0,0,493,
		494,7,0,0,0,494,3,1,0,0,0,495,496,5,123,0,0,496,5,1,0,0,0,497,498,5,123,
		0,0,498,7,1,0,0,0,499,501,3,254,127,0,500,499,1,0,0,0,501,504,1,0,0,0,
		502,500,1,0,0,0,502,503,1,0,0,0,503,507,1,0,0,0,504,502,1,0,0,0,505,508,
		3,10,5,0,506,508,5,20,0,0,507,505,1,0,0,0,507,506,1,0,0,0,508,9,1,0,0,
		0,509,512,3,12,6,0,510,512,3,14,7,0,511,509,1,0,0,0,511,510,1,0,0,0,512,
		11,1,0,0,0,513,514,7,1,0,0,514,13,1,0,0,0,515,516,7,2,0,0,516,15,1,0,0,
		0,517,521,3,20,10,0,518,521,3,26,13,0,519,521,3,28,14,0,520,517,1,0,0,
		0,520,518,1,0,0,0,520,519,1,0,0,0,521,17,1,0,0,0,522,526,5,84,0,0,523,
		525,3,254,127,0,524,523,1,0,0,0,525,528,1,0,0,0,526,524,1,0,0,0,526,527,
		1,0,0,0,527,529,1,0,0,0,528,526,1,0,0,0,529,531,3,4,2,0,530,532,3,40,20,
		0,531,530,1,0,0,0,531,532,1,0,0,0,532,534,1,0,0,0,533,535,3,18,9,0,534,
		533,1,0,0,0,534,535,1,0,0,0,535,19,1,0,0,0,536,537,3,52,26,0,537,538,5,
		84,0,0,538,540,1,0,0,0,539,536,1,0,0,0,539,540,1,0,0,0,540,544,1,0,0,0,
		541,543,3,254,127,0,542,541,1,0,0,0,543,546,1,0,0,0,544,542,1,0,0,0,544,
		545,1,0,0,0,545,547,1,0,0,0,546,544,1,0,0,0,547,549,3,4,2,0,548,550,3,
		40,20,0,549,548,1,0,0,0,549,550,1,0,0,0,550,552,1,0,0,0,551,553,3,18,9,
		0,552,551,1,0,0,0,552,553,1,0,0,0,553,21,1,0,0,0,554,556,3,254,127,0,555,
		554,1,0,0,0,556,559,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,560,1,
		0,0,0,559,557,1,0,0,0,560,562,3,4,2,0,561,563,3,40,20,0,562,561,1,0,0,
		0,562,563,1,0,0,0,563,589,1,0,0,0,564,565,3,52,26,0,565,569,5,84,0,0,566,
		568,3,254,127,0,567,566,1,0,0,0,568,571,1,0,0,0,569,567,1,0,0,0,569,570,
		1,0,0,0,570,572,1,0,0,0,571,569,1,0,0,0,572,574,3,4,2,0,573,575,3,40,20,
		0,574,573,1,0,0,0,574,575,1,0,0,0,575,589,1,0,0,0,576,577,3,20,10,0,577,
		581,5,84,0,0,578,580,3,254,127,0,579,578,1,0,0,0,580,583,1,0,0,0,581,579,
		1,0,0,0,581,582,1,0,0,0,582,584,1,0,0,0,583,581,1,0,0,0,584,586,3,4,2,
		0,585,587,3,40,20,0,586,585,1,0,0,0,586,587,1,0,0,0,587,589,1,0,0,0,588,
		557,1,0,0,0,588,564,1,0,0,0,588,576,1,0,0,0,589,23,1,0,0,0,590,591,3,22,
		11,0,591,25,1,0,0,0,592,594,3,254,127,0,593,592,1,0,0,0,594,597,1,0,0,
		0,595,593,1,0,0,0,595,596,1,0,0,0,596,598,1,0,0,0,597,595,1,0,0,0,598,
		599,3,4,2,0,599,27,1,0,0,0,600,601,3,8,4,0,601,602,3,30,15,0,602,610,1,
		0,0,0,603,604,3,22,11,0,604,605,3,30,15,0,605,610,1,0,0,0,606,607,3,26,
		13,0,607,608,3,30,15,0,608,610,1,0,0,0,609,600,1,0,0,0,609,603,1,0,0,0,
		609,606,1,0,0,0,610,29,1,0,0,0,611,613,3,254,127,0,612,611,1,0,0,0,613,
		616,1,0,0,0,614,612,1,0,0,0,614,615,1,0,0,0,615,617,1,0,0,0,616,614,1,
		0,0,0,617,618,5,80,0,0,618,629,5,81,0,0,619,621,3,254,127,0,620,619,1,
		0,0,0,621,624,1,0,0,0,622,620,1,0,0,0,622,623,1,0,0,0,623,625,1,0,0,0,
		624,622,1,0,0,0,625,626,5,80,0,0,626,628,5,81,0,0,627,622,1,0,0,0,628,
		631,1,0,0,0,629,627,1,0,0,0,629,630,1,0,0,0,630,31,1,0,0,0,631,629,1,0,
		0,0,632,634,3,34,17,0,633,632,1,0,0,0,634,637,1,0,0,0,635,633,1,0,0,0,
		635,636,1,0,0,0,636,638,1,0,0,0,637,635,1,0,0,0,638,640,3,4,2,0,639,641,
		3,36,18,0,640,639,1,0,0,0,640,641,1,0,0,0,641,33,1,0,0,0,642,643,3,254,
		127,0,643,35,1,0,0,0,644,653,5,34,0,0,645,654,3,26,13,0,646,650,3,20,10,
		0,647,649,3,38,19,0,648,647,1,0,0,0,649,652,1,0,0,0,650,648,1,0,0,0,650,
		651,1,0,0,0,651,654,1,0,0,0,652,650,1,0,0,0,653,645,1,0,0,0,653,646,1,
		0,0,0,654,37,1,0,0,0,655,656,5,108,0,0,656,657,3,24,12,0,657,39,1,0,0,
		0,658,659,5,90,0,0,659,660,3,42,21,0,660,661,5,89,0,0,661,41,1,0,0,0,662,
		667,3,44,22,0,663,664,5,83,0,0,664,666,3,44,22,0,665,663,1,0,0,0,666,669,
		1,0,0,0,667,665,1,0,0,0,667,668,1,0,0,0,668,43,1,0,0,0,669,667,1,0,0,0,
		670,673,3,16,8,0,671,673,3,46,23,0,672,670,1,0,0,0,672,671,1,0,0,0,673,
		45,1,0,0,0,674,676,3,254,127,0,675,674,1,0,0,0,676,679,1,0,0,0,677,675,
		1,0,0,0,677,678,1,0,0,0,678,680,1,0,0,0,679,677,1,0,0,0,680,682,5,93,0,
		0,681,683,3,48,24,0,682,681,1,0,0,0,682,683,1,0,0,0,683,47,1,0,0,0,684,
		685,5,34,0,0,685,689,3,16,8,0,686,687,5,57,0,0,687,689,3,16,8,0,688,684,
		1,0,0,0,688,686,1,0,0,0,689,49,1,0,0,0,690,693,5,123,0,0,691,692,5,84,
		0,0,692,694,3,50,25,0,693,691,1,0,0,0,693,694,1,0,0,0,694,51,1,0,0,0,695,
		698,5,123,0,0,696,697,5,84,0,0,697,699,3,52,26,0,698,696,1,0,0,0,698,699,
		1,0,0,0,699,53,1,0,0,0,700,703,3,52,26,0,701,702,5,84,0,0,702,704,3,4,
		2,0,703,701,1,0,0,0,703,704,1,0,0,0,704,55,1,0,0,0,705,708,5,123,0,0,706,
		707,5,84,0,0,707,709,3,56,28,0,708,706,1,0,0,0,708,709,1,0,0,0,709,57,
		1,0,0,0,710,711,3,62,31,0,711,712,5,84,0,0,712,714,1,0,0,0,713,710,1,0,
		0,0,713,714,1,0,0,0,714,715,1,0,0,0,715,716,5,123,0,0,716,59,1,0,0,0,717,
		718,3,6,3,0,718,61,1,0,0,0,719,722,5,123,0,0,720,721,5,84,0,0,721,723,
		3,62,31,0,722,720,1,0,0,0,722,723,1,0,0,0,723,63,1,0,0,0,724,727,3,66,
		33,0,725,727,3,68,34,0,726,724,1,0,0,0,726,725,1,0,0,0,727,65,1,0,0,0,
		728,730,3,70,35,0,729,728,1,0,0,0,729,730,1,0,0,0,730,734,1,0,0,0,731,
		733,3,74,37,0,732,731,1,0,0,0,733,736,1,0,0,0,734,732,1,0,0,0,734,735,
		1,0,0,0,735,740,1,0,0,0,736,734,1,0,0,0,737,739,3,84,42,0,738,737,1,0,
		0,0,739,742,1,0,0,0,740,738,1,0,0,0,740,741,1,0,0,0,741,67,1,0,0,0,742,
		740,1,0,0,0,743,745,3,74,37,0,744,743,1,0,0,0,745,748,1,0,0,0,746,744,
		1,0,0,0,746,747,1,0,0,0,747,749,1,0,0,0,748,746,1,0,0,0,749,750,3,86,43,
		0,750,69,1,0,0,0,751,753,3,72,36,0,752,751,1,0,0,0,753,756,1,0,0,0,754,
		752,1,0,0,0,754,755,1,0,0,0,755,757,1,0,0,0,756,754,1,0,0,0,757,758,5,
		49,0,0,758,763,5,123,0,0,759,760,5,84,0,0,760,762,5,123,0,0,761,759,1,
		0,0,0,762,765,1,0,0,0,763,761,1,0,0,0,763,764,1,0,0,0,764,766,1,0,0,0,
		765,763,1,0,0,0,766,767,5,82,0,0,767,71,1,0,0,0,768,769,3,254,127,0,769,
		73,1,0,0,0,770,775,3,76,38,0,771,775,3,78,39,0,772,775,3,80,40,0,773,775,
		3,82,41,0,774,770,1,0,0,0,774,771,1,0,0,0,774,772,1,0,0,0,774,773,1,0,
		0,0,775,75,1,0,0,0,776,777,5,42,0,0,777,778,3,54,27,0,778,779,5,82,0,0,
		779,77,1,0,0,0,780,781,5,42,0,0,781,782,3,56,28,0,782,783,5,84,0,0,783,
		784,5,106,0,0,784,785,5,82,0,0,785,79,1,0,0,0,786,787,5,42,0,0,787,788,
		5,55,0,0,788,789,3,54,27,0,789,790,5,84,0,0,790,791,5,123,0,0,791,792,
		5,82,0,0,792,81,1,0,0,0,793,794,5,42,0,0,794,795,5,55,0,0,795,796,3,54,
		27,0,796,797,5,84,0,0,797,798,5,106,0,0,798,799,5,82,0,0,799,83,1,0,0,
		0,800,804,3,92,46,0,801,804,3,220,110,0,802,804,5,82,0,0,803,800,1,0,0,
		0,803,801,1,0,0,0,803,802,1,0,0,0,804,85,1,0,0,0,805,807,3,254,127,0,806,
		805,1,0,0,0,807,810,1,0,0,0,808,806,1,0,0,0,808,809,1,0,0,0,809,812,1,
		0,0,0,810,808,1,0,0,0,811,813,5,5,0,0,812,811,1,0,0,0,812,813,1,0,0,0,
		813,814,1,0,0,0,814,815,5,2,0,0,815,820,5,123,0,0,816,817,5,84,0,0,817,
		819,5,123,0,0,818,816,1,0,0,0,819,822,1,0,0,0,820,818,1,0,0,0,820,821,
		1,0,0,0,821,823,1,0,0,0,822,820,1,0,0,0,823,827,5,78,0,0,824,826,3,88,
		44,0,825,824,1,0,0,0,826,829,1,0,0,0,827,825,1,0,0,0,827,828,1,0,0,0,828,
		830,1,0,0,0,829,827,1,0,0,0,830,831,5,79,0,0,831,87,1,0,0,0,832,836,5,
		10,0,0,833,835,3,90,45,0,834,833,1,0,0,0,835,838,1,0,0,0,836,834,1,0,0,
		0,836,837,1,0,0,0,837,839,1,0,0,0,838,836,1,0,0,0,839,840,3,50,25,0,840,
		841,5,82,0,0,841,890,1,0,0,0,842,843,5,1,0,0,843,853,3,52,26,0,844,845,
		5,12,0,0,845,850,3,50,25,0,846,847,5,83,0,0,847,849,3,50,25,0,848,846,
		1,0,0,0,849,852,1,0,0,0,850,848,1,0,0,0,850,851,1,0,0,0,851,854,1,0,0,
		0,852,850,1,0,0,0,853,844,1,0,0,0,853,854,1,0,0,0,854,855,1,0,0,0,855,
		856,5,82,0,0,856,890,1,0,0,0,857,858,5,6,0,0,858,868,3,52,26,0,859,860,
		5,12,0,0,860,865,3,50,25,0,861,862,5,83,0,0,862,864,3,50,25,0,863,861,
		1,0,0,0,864,867,1,0,0,0,865,863,1,0,0,0,865,866,1,0,0,0,866,869,1,0,0,
		0,867,865,1,0,0,0,868,859,1,0,0,0,868,869,1,0,0,0,869,870,1,0,0,0,870,
		871,5,82,0,0,871,890,1,0,0,0,872,873,5,14,0,0,873,874,3,54,27,0,874,875,
		5,82,0,0,875,890,1,0,0,0,876,877,5,8,0,0,877,878,3,54,27,0,878,879,5,16,
		0,0,879,884,3,54,27,0,880,881,5,83,0,0,881,883,3,54,27,0,882,880,1,0,0,
		0,883,886,1,0,0,0,884,882,1,0,0,0,884,885,1,0,0,0,885,887,1,0,0,0,886,
		884,1,0,0,0,887,888,5,82,0,0,888,890,1,0,0,0,889,832,1,0,0,0,889,842,1,
		0,0,0,889,857,1,0,0,0,889,872,1,0,0,0,889,876,1,0,0,0,890,89,1,0,0,0,891,
		892,7,3,0,0,892,91,1,0,0,0,893,897,3,94,47,0,894,897,3,190,95,0,895,897,
		3,202,101,0,896,893,1,0,0,0,896,894,1,0,0,0,896,895,1,0,0,0,897,93,1,0,
		0,0,898,900,3,96,48,0,899,898,1,0,0,0,900,903,1,0,0,0,901,899,1,0,0,0,
		901,902,1,0,0,0,902,904,1,0,0,0,903,901,1,0,0,0,904,905,5,26,0,0,905,907,
		3,4,2,0,906,908,3,98,49,0,907,906,1,0,0,0,907,908,1,0,0,0,908,910,1,0,
		0,0,909,911,3,102,51,0,910,909,1,0,0,0,910,911,1,0,0,0,911,913,1,0,0,0,
		912,914,3,104,52,0,913,912,1,0,0,0,913,914,1,0,0,0,914,916,1,0,0,0,915,
		917,3,108,54,0,916,915,1,0,0,0,916,917,1,0,0,0,917,918,1,0,0,0,918,919,
		3,110,55,0,919,95,1,0,0,0,920,931,3,254,127,0,921,931,5,52,0,0,922,931,
		5,51,0,0,923,931,5,50,0,0,924,931,5,18,0,0,925,931,5,55,0,0,926,931,5,
		35,0,0,927,931,5,11,0,0,928,931,5,3,0,0,929,931,5,56,0,0,930,920,1,0,0,
		0,930,921,1,0,0,0,930,922,1,0,0,0,930,923,1,0,0,0,930,924,1,0,0,0,930,
		925,1,0,0,0,930,926,1,0,0,0,930,927,1,0,0,0,930,928,1,0,0,0,930,929,1,
		0,0,0,931,97,1,0,0,0,932,933,5,90,0,0,933,934,3,100,50,0,934,935,5,89,
		0,0,935,99,1,0,0,0,936,941,3,32,16,0,937,938,5,83,0,0,938,940,3,32,16,
		0,939,937,1,0,0,0,940,943,1,0,0,0,941,939,1,0,0,0,941,942,1,0,0,0,942,
		101,1,0,0,0,943,941,1,0,0,0,944,945,5,34,0,0,945,946,3,22,11,0,946,103,
		1,0,0,0,947,948,5,41,0,0,948,949,3,106,53,0,949,105,1,0,0,0,950,955,3,
		24,12,0,951,952,5,83,0,0,952,954,3,24,12,0,953,951,1,0,0,0,954,957,1,0,
		0,0,955,953,1,0,0,0,955,956,1,0,0,0,956,107,1,0,0,0,957,955,1,0,0,0,958,
		959,5,7,0,0,959,964,3,54,27,0,960,961,5,83,0,0,961,963,3,54,27,0,962,960,
		1,0,0,0,963,966,1,0,0,0,964,962,1,0,0,0,964,965,1,0,0,0,965,109,1,0,0,
		0,966,964,1,0,0,0,967,971,5,78,0,0,968,970,3,112,56,0,969,968,1,0,0,0,
		970,973,1,0,0,0,971,969,1,0,0,0,971,972,1,0,0,0,972,974,1,0,0,0,973,971,
		1,0,0,0,974,975,5,79,0,0,975,111,1,0,0,0,976,981,3,114,57,0,977,981,3,
		174,87,0,978,981,3,176,88,0,979,981,3,178,89,0,980,976,1,0,0,0,980,977,
		1,0,0,0,980,978,1,0,0,0,980,979,1,0,0,0,981,113,1,0,0,0,982,988,3,116,
		58,0,983,988,3,146,73,0,984,988,3,92,46,0,985,988,3,220,110,0,986,988,
		5,82,0,0,987,982,1,0,0,0,987,983,1,0,0,0,987,984,1,0,0,0,987,985,1,0,0,
		0,987,986,1,0,0,0,988,115,1,0,0,0,989,991,3,118,59,0,990,989,1,0,0,0,991,
		994,1,0,0,0,992,990,1,0,0,0,992,993,1,0,0,0,993,995,1,0,0,0,994,992,1,
		0,0,0,995,996,3,128,64,0,996,997,3,120,60,0,997,998,5,82,0,0,998,117,1,
		0,0,0,999,1008,3,254,127,0,1000,1008,5,52,0,0,1001,1008,5,51,0,0,1002,
		1008,5,50,0,0,1003,1008,5,55,0,0,1004,1008,5,35,0,0,1005,1008,5,63,0,0,
		1006,1008,5,66,0,0,1007,999,1,0,0,0,1007,1000,1,0,0,0,1007,1001,1,0,0,
		0,1007,1002,1,0,0,0,1007,1003,1,0,0,0,1007,1004,1,0,0,0,1007,1005,1,0,
		0,0,1007,1006,1,0,0,0,1008,119,1,0,0,0,1009,1014,3,122,61,0,1010,1011,
		5,83,0,0,1011,1013,3,122,61,0,1012,1010,1,0,0,0,1013,1016,1,0,0,0,1014,
		1012,1,0,0,0,1014,1015,1,0,0,0,1015,121,1,0,0,0,1016,1014,1,0,0,0,1017,
		1020,3,124,62,0,1018,1019,5,88,0,0,1019,1021,3,126,63,0,1020,1018,1,0,
		0,0,1020,1021,1,0,0,0,1021,123,1,0,0,0,1022,1024,5,123,0,0,1023,1025,3,
		30,15,0,1024,1023,1,0,0,0,1024,1025,1,0,0,0,1025,125,1,0,0,0,1026,1029,
		3,388,194,0,1027,1029,3,272,136,0,1028,1026,1,0,0,0,1028,1027,1,0,0,0,
		1029,127,1,0,0,0,1030,1033,3,130,65,0,1031,1033,3,132,66,0,1032,1030,1,
		0,0,0,1032,1031,1,0,0,0,1033,129,1,0,0,0,1034,1037,3,10,5,0,1035,1037,
		5,20,0,0,1036,1034,1,0,0,0,1036,1035,1,0,0,0,1037,131,1,0,0,0,1038,1042,
		3,134,67,0,1039,1042,3,142,71,0,1040,1042,3,144,72,0,1041,1038,1,0,0,0,
		1041,1039,1,0,0,0,1041,1040,1,0,0,0,1042,133,1,0,0,0,1043,1044,3,52,26,
		0,1044,1048,5,84,0,0,1045,1047,3,254,127,0,1046,1045,1,0,0,0,1047,1050,
		1,0,0,0,1048,1046,1,0,0,0,1048,1049,1,0,0,0,1049,1052,1,0,0,0,1050,1048,
		1,0,0,0,1051,1043,1,0,0,0,1051,1052,1,0,0,0,1052,1053,1,0,0,0,1053,1055,
		3,4,2,0,1054,1056,3,40,20,0,1055,1054,1,0,0,0,1055,1056,1,0,0,0,1056,1058,
		1,0,0,0,1057,1059,3,136,68,0,1058,1057,1,0,0,0,1058,1059,1,0,0,0,1059,
		135,1,0,0,0,1060,1064,5,84,0,0,1061,1063,3,254,127,0,1062,1061,1,0,0,0,
		1063,1066,1,0,0,0,1064,1062,1,0,0,0,1064,1065,1,0,0,0,1065,1067,1,0,0,
		0,1066,1064,1,0,0,0,1067,1069,3,4,2,0,1068,1070,3,40,20,0,1069,1068,1,
		0,0,0,1069,1070,1,0,0,0,1070,1072,1,0,0,0,1071,1073,3,136,68,0,1072,1071,
		1,0,0,0,1072,1073,1,0,0,0,1073,137,1,0,0,0,1074,1076,3,4,2,0,1075,1077,
		3,40,20,0,1076,1075,1,0,0,0,1076,1077,1,0,0,0,1077,1094,1,0,0,0,1078,1081,
		3,52,26,0,1079,1081,3,134,67,0,1080,1078,1,0,0,0,1080,1079,1,0,0,0,1081,
		1082,1,0,0,0,1082,1086,5,84,0,0,1083,1085,3,254,127,0,1084,1083,1,0,0,
		0,1085,1088,1,0,0,0,1086,1084,1,0,0,0,1086,1087,1,0,0,0,1087,1089,1,0,
		0,0,1088,1086,1,0,0,0,1089,1091,3,4,2,0,1090,1092,3,40,20,0,1091,1090,
		1,0,0,0,1091,1092,1,0,0,0,1092,1094,1,0,0,0,1093,1074,1,0,0,0,1093,1080,
		1,0,0,0,1094,139,1,0,0,0,1095,1096,3,138,69,0,1096,141,1,0,0,0,1097,1098,
		3,4,2,0,1098,143,1,0,0,0,1099,1103,3,130,65,0,1100,1103,3,134,67,0,1101,
		1103,3,142,71,0,1102,1099,1,0,0,0,1102,1100,1,0,0,0,1102,1101,1,0,0,0,
		1103,1104,1,0,0,0,1104,1105,3,30,15,0,1105,145,1,0,0,0,1106,1108,3,148,
		74,0,1107,1106,1,0,0,0,1108,1111,1,0,0,0,1109,1107,1,0,0,0,1109,1110,1,
		0,0,0,1110,1112,1,0,0,0,1111,1109,1,0,0,0,1112,1113,3,150,75,0,1113,1114,
		3,172,86,0,1114,147,1,0,0,0,1115,1126,3,254,127,0,1116,1126,5,52,0,0,1117,
		1126,5,51,0,0,1118,1126,5,50,0,0,1119,1126,5,18,0,0,1120,1126,5,55,0,0,
		1121,1126,5,35,0,0,1122,1126,5,59,0,0,1123,1126,5,47,0,0,1124,1126,5,56,
		0,0,1125,1115,1,0,0,0,1125,1116,1,0,0,0,1125,1117,1,0,0,0,1125,1118,1,
		0,0,0,1125,1119,1,0,0,0,1125,1120,1,0,0,0,1125,1121,1,0,0,0,1125,1122,
		1,0,0,0,1125,1123,1,0,0,0,1125,1124,1,0,0,0,1126,149,1,0,0,0,1127,1131,
		3,98,49,0,1128,1130,3,254,127,0,1129,1128,1,0,0,0,1130,1133,1,0,0,0,1131,
		1129,1,0,0,0,1131,1132,1,0,0,0,1132,1135,1,0,0,0,1133,1131,1,0,0,0,1134,
		1127,1,0,0,0,1134,1135,1,0,0,0,1135,1136,1,0,0,0,1136,1137,3,152,76,0,
		1137,1139,3,154,77,0,1138,1140,3,166,83,0,1139,1138,1,0,0,0,1139,1140,
		1,0,0,0,1140,151,1,0,0,0,1141,1144,3,128,64,0,1142,1144,5,65,0,0,1143,
		1141,1,0,0,0,1143,1142,1,0,0,0,1144,153,1,0,0,0,1145,1146,5,123,0,0,1146,
		1150,5,76,0,0,1147,1148,3,156,78,0,1148,1149,5,83,0,0,1149,1151,1,0,0,
		0,1150,1147,1,0,0,0,1150,1151,1,0,0,0,1151,1153,1,0,0,0,1152,1154,3,158,
		79,0,1153,1152,1,0,0,0,1153,1154,1,0,0,0,1154,1155,1,0,0,0,1155,1157,5,
		77,0,0,1156,1158,3,30,15,0,1157,1156,1,0,0,0,1157,1158,1,0,0,0,1158,155,
		1,0,0,0,1159,1161,3,254,127,0,1160,1159,1,0,0,0,1161,1164,1,0,0,0,1162,
		1160,1,0,0,0,1162,1163,1,0,0,0,1163,1165,1,0,0,0,1164,1162,1,0,0,0,1165,
		1168,3,128,64,0,1166,1167,5,123,0,0,1167,1169,5,84,0,0,1168,1166,1,0,0,
		0,1168,1169,1,0,0,0,1169,1170,1,0,0,0,1170,1171,5,60,0,0,1171,157,1,0,
		0,0,1172,1177,3,160,80,0,1173,1174,5,83,0,0,1174,1176,3,160,80,0,1175,
		1173,1,0,0,0,1176,1179,1,0,0,0,1177,1175,1,0,0,0,1177,1178,1,0,0,0,1178,
		159,1,0,0,0,1179,1177,1,0,0,0,1180,1182,3,164,82,0,1181,1180,1,0,0,0,1182,
		1185,1,0,0,0,1183,1181,1,0,0,0,1183,1184,1,0,0,0,1184,1186,1,0,0,0,1185,
		1183,1,0,0,0,1186,1187,3,128,64,0,1187,1188,3,124,62,0,1188,1191,1,0,0,
		0,1189,1191,3,162,81,0,1190,1183,1,0,0,0,1190,1189,1,0,0,0,1191,161,1,
		0,0,0,1192,1194,3,164,82,0,1193,1192,1,0,0,0,1194,1197,1,0,0,0,1195,1193,
		1,0,0,0,1195,1196,1,0,0,0,1196,1198,1,0,0,0,1197,1195,1,0,0,0,1198,1202,
		3,128,64,0,1199,1201,3,254,127,0,1200,1199,1,0,0,0,1201,1204,1,0,0,0,1202,
		1200,1,0,0,0,1202,1203,1,0,0,0,1203,1205,1,0,0,0,1204,1202,1,0,0,0,1205,
		1206,5,85,0,0,1206,1207,5,123,0,0,1207,163,1,0,0,0,1208,1211,3,254,127,
		0,1209,1211,5,35,0,0,1210,1208,1,0,0,0,1210,1209,1,0,0,0,1211,165,1,0,
		0,0,1212,1213,5,62,0,0,1213,1214,3,168,84,0,1214,167,1,0,0,0,1215,1220,
		3,170,85,0,1216,1217,5,83,0,0,1217,1219,3,170,85,0,1218,1216,1,0,0,0,1219,
		1222,1,0,0,0,1220,1218,1,0,0,0,1220,1221,1,0,0,0,1221,169,1,0,0,0,1222,
		1220,1,0,0,0,1223,1226,3,22,11,0,1224,1226,3,26,13,0,1225,1223,1,0,0,0,
		1225,1224,1,0,0,0,1226,171,1,0,0,0,1227,1230,3,276,138,0,1228,1230,5,82,
		0,0,1229,1227,1,0,0,0,1229,1228,1,0,0,0,1230,173,1,0,0,0,1231,1232,3,276,
		138,0,1232,175,1,0,0,0,1233,1234,5,55,0,0,1234,1235,3,276,138,0,1235,177,
		1,0,0,0,1236,1238,3,180,90,0,1237,1236,1,0,0,0,1238,1241,1,0,0,0,1239,
		1237,1,0,0,0,1239,1240,1,0,0,0,1240,1242,1,0,0,0,1241,1239,1,0,0,0,1242,
		1244,3,182,91,0,1243,1245,3,166,83,0,1244,1243,1,0,0,0,1244,1245,1,0,0,
		0,1245,1246,1,0,0,0,1246,1247,3,186,93,0,1247,179,1,0,0,0,1248,1253,3,
		254,127,0,1249,1253,5,52,0,0,1250,1253,5,51,0,0,1251,1253,5,50,0,0,1252,
		1248,1,0,0,0,1252,1249,1,0,0,0,1252,1250,1,0,0,0,1252,1251,1,0,0,0,1253,
		181,1,0,0,0,1254,1256,3,98,49,0,1255,1254,1,0,0,0,1255,1256,1,0,0,0,1256,
		1257,1,0,0,0,1257,1258,3,184,92,0,1258,1262,5,76,0,0,1259,1260,3,156,78,
		0,1260,1261,5,83,0,0,1261,1263,1,0,0,0,1262,1259,1,0,0,0,1262,1263,1,0,
		0,0,1263,1265,1,0,0,0,1264,1266,3,158,79,0,1265,1264,1,0,0,0,1265,1266,
		1,0,0,0,1266,1267,1,0,0,0,1267,1268,5,77,0,0,1268,183,1,0,0,0,1269,1270,
		3,4,2,0,1270,185,1,0,0,0,1271,1273,5,78,0,0,1272,1274,3,188,94,0,1273,
		1272,1,0,0,0,1273,1274,1,0,0,0,1274,1276,1,0,0,0,1275,1277,3,278,139,0,
		1276,1275,1,0,0,0,1276,1277,1,0,0,0,1277,1278,1,0,0,0,1278,1279,5,79,0,
		0,1279,187,1,0,0,0,1280,1282,3,40,20,0,1281,1280,1,0,0,0,1281,1282,1,0,
		0,0,1282,1283,1,0,0,0,1283,1284,7,4,0,0,1284,1286,5,76,0,0,1285,1287,3,
		422,211,0,1286,1285,1,0,0,0,1286,1287,1,0,0,0,1287,1288,1,0,0,0,1288,1289,
		5,77,0,0,1289,1307,5,82,0,0,1290,1293,3,58,29,0,1291,1293,3,390,195,0,
		1292,1290,1,0,0,0,1292,1291,1,0,0,0,1293,1294,1,0,0,0,1294,1296,5,84,0,
		0,1295,1297,3,40,20,0,1296,1295,1,0,0,0,1296,1297,1,0,0,0,1297,1298,1,
		0,0,0,1298,1299,5,57,0,0,1299,1301,5,76,0,0,1300,1302,3,422,211,0,1301,
		1300,1,0,0,0,1301,1302,1,0,0,0,1302,1303,1,0,0,0,1303,1304,5,77,0,0,1304,
		1305,5,82,0,0,1305,1307,1,0,0,0,1306,1281,1,0,0,0,1306,1292,1,0,0,0,1307,
		189,1,0,0,0,1308,1310,3,96,48,0,1309,1308,1,0,0,0,1310,1313,1,0,0,0,1311,
		1309,1,0,0,0,1311,1312,1,0,0,0,1312,1314,1,0,0,0,1313,1311,1,0,0,0,1314,
		1315,5,33,0,0,1315,1317,3,4,2,0,1316,1318,3,104,52,0,1317,1316,1,0,0,0,
		1317,1318,1,0,0,0,1318,1319,1,0,0,0,1319,1320,3,192,96,0,1320,191,1,0,
		0,0,1321,1323,5,78,0,0,1322,1324,3,194,97,0,1323,1322,1,0,0,0,1323,1324,
		1,0,0,0,1324,1326,1,0,0,0,1325,1327,5,83,0,0,1326,1325,1,0,0,0,1326,1327,
		1,0,0,0,1327,1329,1,0,0,0,1328,1330,3,200,100,0,1329,1328,1,0,0,0,1329,
		1330,1,0,0,0,1330,1331,1,0,0,0,1331,1332,5,79,0,0,1332,193,1,0,0,0,1333,
		1338,3,196,98,0,1334,1335,5,83,0,0,1335,1337,3,196,98,0,1336,1334,1,0,
		0,0,1337,1340,1,0,0,0,1338,1336,1,0,0,0,1338,1339,1,0,0,0,1339,195,1,0,
		0,0,1340,1338,1,0,0,0,1341,1343,3,198,99,0,1342,1341,1,0,0,0,1343,1346,
		1,0,0,0,1344,1342,1,0,0,0,1344,1345,1,0,0,0,1345,1347,1,0,0,0,1346,1344,
		1,0,0,0,1347,1353,5,123,0,0,1348,1350,5,76,0,0,1349,1351,3,422,211,0,1350,
		1349,1,0,0,0,1350,1351,1,0,0,0,1351,1352,1,0,0,0,1352,1354,5,77,0,0,1353,
		1348,1,0,0,0,1353,1354,1,0,0,0,1354,1356,1,0,0,0,1355,1357,3,110,55,0,
		1356,1355,1,0,0,0,1356,1357,1,0,0,0,1357,197,1,0,0,0,1358,1359,3,254,127,
		0,1359,199,1,0,0,0,1360,1364,5,82,0,0,1361,1363,3,112,56,0,1362,1361,1,
		0,0,0,1363,1366,1,0,0,0,1364,1362,1,0,0,0,1364,1365,1,0,0,0,1365,201,1,
		0,0,0,1366,1364,1,0,0,0,1367,1369,3,96,48,0,1368,1367,1,0,0,0,1369,1372,
		1,0,0,0,1370,1368,1,0,0,0,1370,1371,1,0,0,0,1371,1373,1,0,0,0,1372,1370,
		1,0,0,0,1373,1374,5,9,0,0,1374,1376,3,4,2,0,1375,1377,3,98,49,0,1376,1375,
		1,0,0,0,1376,1377,1,0,0,0,1377,1378,1,0,0,0,1378,1380,3,204,102,0,1379,
		1381,3,104,52,0,1380,1379,1,0,0,0,1380,1381,1,0,0,0,1381,1382,1,0,0,0,
		1382,1383,3,214,107,0,1383,203,1,0,0,0,1384,1386,5,76,0,0,1385,1387,3,
		206,103,0,1386,1385,1,0,0,0,1386,1387,1,0,0,0,1387,1388,1,0,0,0,1388,1389,
		5,77,0,0,1389,205,1,0,0,0,1390,1395,3,208,104,0,1391,1392,5,83,0,0,1392,
		1394,3,208,104,0,1393,1391,1,0,0,0,1394,1397,1,0,0,0,1395,1393,1,0,0,0,
		1395,1396,1,0,0,0,1396,207,1,0,0,0,1397,1395,1,0,0,0,1398,1400,3,212,106,
		0,1399,1398,1,0,0,0,1400,1403,1,0,0,0,1401,1399,1,0,0,0,1401,1402,1,0,
		0,0,1402,1404,1,0,0,0,1403,1401,1,0,0,0,1404,1405,3,128,64,0,1405,1406,
		5,123,0,0,1406,1409,1,0,0,0,1407,1409,3,210,105,0,1408,1401,1,0,0,0,1408,
		1407,1,0,0,0,1409,209,1,0,0,0,1410,1412,3,212,106,0,1411,1410,1,0,0,0,
		1412,1415,1,0,0,0,1413,1411,1,0,0,0,1413,1414,1,0,0,0,1414,1416,1,0,0,
		0,1415,1413,1,0,0,0,1416,1420,3,128,64,0,1417,1419,3,254,127,0,1418,1417,
		1,0,0,0,1419,1422,1,0,0,0,1420,1418,1,0,0,0,1420,1421,1,0,0,0,1421,1423,
		1,0,0,0,1422,1420,1,0,0,0,1423,1424,5,85,0,0,1424,1425,5,123,0,0,1425,
		211,1,0,0,0,1426,1427,3,254,127,0,1427,213,1,0,0,0,1428,1432,5,78,0,0,
		1429,1431,3,216,108,0,1430,1429,1,0,0,0,1431,1434,1,0,0,0,1432,1430,1,
		0,0,0,1432,1433,1,0,0,0,1433,1435,1,0,0,0,1434,1432,1,0,0,0,1435,1436,
		5,79,0,0,1436,215,1,0,0,0,1437,1440,3,112,56,0,1438,1440,3,218,109,0,1439,
		1437,1,0,0,0,1439,1438,1,0,0,0,1440,217,1,0,0,0,1441,1443,3,180,90,0,1442,
		1441,1,0,0,0,1443,1446,1,0,0,0,1444,1442,1,0,0,0,1444,1445,1,0,0,0,1445,
		1447,1,0,0,0,1446,1444,1,0,0,0,1447,1448,3,184,92,0,1448,1449,3,186,93,
		0,1449,219,1,0,0,0,1450,1453,3,222,111,0,1451,1453,3,242,121,0,1452,1450,
		1,0,0,0,1452,1451,1,0,0,0,1453,221,1,0,0,0,1454,1456,3,224,112,0,1455,
		1454,1,0,0,0,1456,1459,1,0,0,0,1457,1455,1,0,0,0,1457,1458,1,0,0,0,1458,
		1460,1,0,0,0,1459,1457,1,0,0,0,1460,1461,5,45,0,0,1461,1463,3,4,2,0,1462,
		1464,3,98,49,0,1463,1462,1,0,0,0,1463,1464,1,0,0,0,1464,1466,1,0,0,0,1465,
		1467,3,226,113,0,1466,1465,1,0,0,0,1466,1467,1,0,0,0,1467,1469,1,0,0,0,
		1468,1470,3,228,114,0,1469,1468,1,0,0,0,1469,1470,1,0,0,0,1470,1471,1,
		0,0,0,1471,1472,3,230,115,0,1472,223,1,0,0,0,1473,1483,3,254,127,0,1474,
		1483,5,52,0,0,1475,1483,5,51,0,0,1476,1483,5,50,0,0,1477,1483,5,18,0,0,
		1478,1483,5,55,0,0,1479,1483,5,11,0,0,1480,1483,5,3,0,0,1481,1483,5,56,
		0,0,1482,1473,1,0,0,0,1482,1474,1,0,0,0,1482,1475,1,0,0,0,1482,1476,1,
		0,0,0,1482,1477,1,0,0,0,1482,1478,1,0,0,0,1482,1479,1,0,0,0,1482,1480,
		1,0,0,0,1482,1481,1,0,0,0,1483,225,1,0,0,0,1484,1485,5,34,0,0,1485,1486,
		3,106,53,0,1486,227,1,0,0,0,1487,1488,5,7,0,0,1488,1493,3,54,27,0,1489,
		1490,5,83,0,0,1490,1492,3,54,27,0,1491,1489,1,0,0,0,1492,1495,1,0,0,0,
		1493,1491,1,0,0,0,1493,1494,1,0,0,0,1494,229,1,0,0,0,1495,1493,1,0,0,0,
		1496,1500,5,78,0,0,1497,1499,3,232,116,0,1498,1497,1,0,0,0,1499,1502,1,
		0,0,0,1500,1498,1,0,0,0,1500,1501,1,0,0,0,1501,1503,1,0,0,0,1502,1500,
		1,0,0,0,1503,1504,5,79,0,0,1504,231,1,0,0,0,1505,1511,3,234,117,0,1506,
		1511,3,238,119,0,1507,1511,3,92,46,0,1508,1511,3,220,110,0,1509,1511,5,
		82,0,0,1510,1505,1,0,0,0,1510,1506,1,0,0,0,1510,1507,1,0,0,0,1510,1508,
		1,0,0,0,1510,1509,1,0,0,0,1511,233,1,0,0,0,1512,1514,3,236,118,0,1513,
		1512,1,0,0,0,1514,1517,1,0,0,0,1515,1513,1,0,0,0,1515,1516,1,0,0,0,1516,
		1518,1,0,0,0,1517,1515,1,0,0,0,1518,1519,3,128,64,0,1519,1520,3,120,60,
		0,1520,1521,5,82,0,0,1521,235,1,0,0,0,1522,1527,3,254,127,0,1523,1527,
		5,52,0,0,1524,1527,5,55,0,0,1525,1527,5,35,0,0,1526,1522,1,0,0,0,1526,
		1523,1,0,0,0,1526,1524,1,0,0,0,1526,1525,1,0,0,0,1527,237,1,0,0,0,1528,
		1530,3,240,120,0,1529,1528,1,0,0,0,1530,1533,1,0,0,0,1531,1529,1,0,0,0,
		1531,1532,1,0,0,0,1532,1534,1,0,0,0,1533,1531,1,0,0,0,1534,1535,3,150,
		75,0,1535,1536,3,172,86,0,1536,239,1,0,0,0,1537,1545,3,254,127,0,1538,
		1545,5,52,0,0,1539,1545,5,50,0,0,1540,1545,5,18,0,0,1541,1545,5,29,0,0,
		1542,1545,5,55,0,0,1543,1545,5,56,0,0,1544,1537,1,0,0,0,1544,1538,1,0,
		0,0,1544,1539,1,0,0,0,1544,1540,1,0,0,0,1544,1541,1,0,0,0,1544,1542,1,
		0,0,0,1544,1543,1,0,0,0,1545,241,1,0,0,0,1546,1548,3,224,112,0,1547,1546,
		1,0,0,0,1548,1551,1,0,0,0,1549,1547,1,0,0,0,1549,1550,1,0,0,0,1550,1552,
		1,0,0,0,1551,1549,1,0,0,0,1552,1553,5,86,0,0,1553,1554,5,45,0,0,1554,1555,
		3,4,2,0,1555,1556,3,244,122,0,1556,243,1,0,0,0,1557,1561,5,78,0,0,1558,
		1560,3,246,123,0,1559,1558,1,0,0,0,1560,1563,1,0,0,0,1561,1559,1,0,0,0,
		1561,1562,1,0,0,0,1562,1564,1,0,0,0,1563,1561,1,0,0,0,1564,1565,5,79,0,
		0,1565,245,1,0,0,0,1566,1572,3,248,124,0,1567,1572,3,234,117,0,1568,1572,
		3,92,46,0,1569,1572,3,220,110,0,1570,1572,5,82,0,0,1571,1566,1,0,0,0,1571,
		1567,1,0,0,0,1571,1568,1,0,0,0,1571,1569,1,0,0,0,1571,1570,1,0,0,0,1572,
		247,1,0,0,0,1573,1575,3,250,125,0,1574,1573,1,0,0,0,1575,1578,1,0,0,0,
		1576,1574,1,0,0,0,1576,1577,1,0,0,0,1577,1579,1,0,0,0,1578,1576,1,0,0,
		0,1579,1580,3,128,64,0,1580,1581,5,123,0,0,1581,1582,5,76,0,0,1582,1584,
		5,77,0,0,1583,1585,3,30,15,0,1584,1583,1,0,0,0,1584,1585,1,0,0,0,1585,
		1587,1,0,0,0,1586,1588,3,252,126,0,1587,1586,1,0,0,0,1587,1588,1,0,0,0,
		1588,1589,1,0,0,0,1589,1590,5,82,0,0,1590,249,1,0,0,0,1591,1595,3,254,
		127,0,1592,1595,5,52,0,0,1593,1595,5,18,0,0,1594,1591,1,0,0,0,1594,1592,
		1,0,0,0,1594,1593,1,0,0,0,1595,251,1,0,0,0,1596,1597,5,29,0,0,1597,1598,
		3,262,131,0,1598,253,1,0,0,0,1599,1603,3,256,128,0,1600,1603,3,268,134,
		0,1601,1603,3,270,135,0,1602,1599,1,0,0,0,1602,1600,1,0,0,0,1602,1601,
		1,0,0,0,1603,255,1,0,0,0,1604,1605,5,86,0,0,1605,1606,3,54,27,0,1606,1608,
		5,76,0,0,1607,1609,3,258,129,0,1608,1607,1,0,0,0,1608,1609,1,0,0,0,1609,
		1610,1,0,0,0,1610,1611,5,77,0,0,1611,257,1,0,0,0,1612,1617,3,260,130,0,
		1613,1614,5,83,0,0,1614,1616,3,260,130,0,1615,1613,1,0,0,0,1616,1619,1,
		0,0,0,1617,1615,1,0,0,0,1617,1618,1,0,0,0,1618,259,1,0,0,0,1619,1617,1,
		0,0,0,1620,1621,5,123,0,0,1621,1622,5,88,0,0,1622,1623,3,262,131,0,1623,
		261,1,0,0,0,1624,1628,3,464,232,0,1625,1628,3,264,132,0,1626,1628,3,254,
		127,0,1627,1624,1,0,0,0,1627,1625,1,0,0,0,1627,1626,1,0,0,0,1628,263,1,
		0,0,0,1629,1631,5,78,0,0,1630,1632,3,266,133,0,1631,1630,1,0,0,0,1631,
		1632,1,0,0,0,1632,1634,1,0,0,0,1633,1635,5,83,0,0,1634,1633,1,0,0,0,1634,
		1635,1,0,0,0,1635,1636,1,0,0,0,1636,1637,5,79,0,0,1637,265,1,0,0,0,1638,
		1643,3,262,131,0,1639,1640,5,83,0,0,1640,1642,3,262,131,0,1641,1639,1,
		0,0,0,1642,1645,1,0,0,0,1643,1641,1,0,0,0,1643,1644,1,0,0,0,1644,267,1,
		0,0,0,1645,1643,1,0,0,0,1646,1647,5,86,0,0,1647,1648,3,54,27,0,1648,269,
		1,0,0,0,1649,1650,5,86,0,0,1650,1651,3,54,27,0,1651,1652,5,76,0,0,1652,
		1653,3,262,131,0,1653,1654,5,77,0,0,1654,271,1,0,0,0,1655,1657,5,78,0,
		0,1656,1658,3,274,137,0,1657,1656,1,0,0,0,1657,1658,1,0,0,0,1658,1660,
		1,0,0,0,1659,1661,5,83,0,0,1660,1659,1,0,0,0,1660,1661,1,0,0,0,1661,1662,
		1,0,0,0,1662,1663,5,79,0,0,1663,273,1,0,0,0,1664,1669,3,126,63,0,1665,
		1666,5,83,0,0,1666,1668,3,126,63,0,1667,1665,1,0,0,0,1668,1671,1,0,0,0,
		1669,1667,1,0,0,0,1669,1670,1,0,0,0,1670,275,1,0,0,0,1671,1669,1,0,0,0,
		1672,1674,5,78,0,0,1673,1675,3,278,139,0,1674,1673,1,0,0,0,1674,1675,1,
		0,0,0,1675,1676,1,0,0,0,1676,1677,5,79,0,0,1677,277,1,0,0,0,1678,1682,
		3,280,140,0,1679,1681,3,280,140,0,1680,1679,1,0,0,0,1681,1684,1,0,0,0,
		1682,1680,1,0,0,0,1682,1683,1,0,0,0,1683,279,1,0,0,0,1684,1682,1,0,0,0,
		1685,1689,3,282,141,0,1686,1689,3,288,144,0,1687,1689,3,290,145,0,1688,
		1685,1,0,0,0,1688,1686,1,0,0,0,1688,1687,1,0,0,0,1689,281,1,0,0,0,1690,
		1693,3,92,46,0,1691,1693,3,222,111,0,1692,1690,1,0,0,0,1692,1691,1,0,0,
		0,1693,283,1,0,0,0,1694,1696,3,164,82,0,1695,1694,1,0,0,0,1696,1699,1,
		0,0,0,1697,1695,1,0,0,0,1697,1698,1,0,0,0,1698,1700,1,0,0,0,1699,1697,
		1,0,0,0,1700,1702,3,286,143,0,1701,1703,3,120,60,0,1702,1701,1,0,0,0,1702,
		1703,1,0,0,0,1703,285,1,0,0,0,1704,1707,3,128,64,0,1705,1707,5,15,0,0,
		1706,1704,1,0,0,0,1706,1705,1,0,0,0,1707,287,1,0,0,0,1708,1709,3,284,142,
		0,1709,1710,5,82,0,0,1710,289,1,0,0,0,1711,1718,3,294,147,0,1712,1718,
		3,298,149,0,1713,1718,3,306,153,0,1714,1718,3,308,154,0,1715,1718,3,326,
		163,0,1716,1718,3,332,166,0,1717,1711,1,0,0,0,1717,1712,1,0,0,0,1717,1713,
		1,0,0,0,1717,1714,1,0,0,0,1717,1715,1,0,0,0,1717,1716,1,0,0,0,1718,291,
		1,0,0,0,1719,1725,3,294,147,0,1720,1725,3,300,150,0,1721,1725,3,310,155,
		0,1722,1725,3,328,164,0,1723,1725,3,334,167,0,1724,1719,1,0,0,0,1724,1720,
		1,0,0,0,1724,1721,1,0,0,0,1724,1722,1,0,0,0,1724,1723,1,0,0,0,1725,293,
		1,0,0,0,1726,1740,3,276,138,0,1727,1740,3,296,148,0,1728,1740,3,302,151,
		0,1729,1740,3,312,156,0,1730,1740,3,314,157,0,1731,1740,3,330,165,0,1732,
		1740,3,350,175,0,1733,1740,3,352,176,0,1734,1740,3,354,177,0,1735,1740,
		3,358,179,0,1736,1740,3,356,178,0,1737,1740,3,360,180,0,1738,1740,3,382,
		191,0,1739,1726,1,0,0,0,1739,1727,1,0,0,0,1739,1728,1,0,0,0,1739,1729,
		1,0,0,0,1739,1730,1,0,0,0,1739,1731,1,0,0,0,1739,1732,1,0,0,0,1739,1733,
		1,0,0,0,1739,1734,1,0,0,0,1739,1735,1,0,0,0,1739,1736,1,0,0,0,1739,1737,
		1,0,0,0,1739,1738,1,0,0,0,1740,295,1,0,0,0,1741,1742,5,82,0,0,1742,297,
		1,0,0,0,1743,1744,5,123,0,0,1744,1745,5,94,0,0,1745,1746,3,290,145,0,1746,
		299,1,0,0,0,1747,1748,5,123,0,0,1748,1749,5,94,0,0,1749,1750,3,292,146,
		0,1750,301,1,0,0,0,1751,1752,3,304,152,0,1752,1753,5,82,0,0,1753,303,1,
		0,0,0,1754,1762,3,468,234,0,1755,1762,3,436,218,0,1756,1762,3,438,219,
		0,1757,1762,3,430,215,0,1758,1762,3,432,216,0,1759,1762,3,420,210,0,1760,
		1762,3,398,199,0,1761,1754,1,0,0,0,1761,1755,1,0,0,0,1761,1756,1,0,0,0,
		1761,1757,1,0,0,0,1761,1758,1,0,0,0,1761,1759,1,0,0,0,1761,1760,1,0,0,
		0,1762,305,1,0,0,0,1763,1764,5,39,0,0,1764,1765,5,76,0,0,1765,1766,3,388,
		194,0,1766,1767,5,77,0,0,1767,1768,3,290,145,0,1768,307,1,0,0,0,1769,1770,
		5,39,0,0,1770,1771,5,76,0,0,1771,1772,3,388,194,0,1772,1773,5,77,0,0,1773,
		1774,3,292,146,0,1774,1775,5,32,0,0,1775,1776,3,290,145,0,1776,309,1,0,
		0,0,1777,1778,5,39,0,0,1778,1779,5,76,0,0,1779,1780,3,388,194,0,1780,1781,
		5,77,0,0,1781,1782,3,292,146,0,1782,1783,5,32,0,0,1783,1784,3,292,146,
		0,1784,311,1,0,0,0,1785,1786,5,19,0,0,1786,1789,3,388,194,0,1787,1788,
		5,94,0,0,1788,1790,3,388,194,0,1789,1787,1,0,0,0,1789,1790,1,0,0,0,1790,
		1791,1,0,0,0,1791,1792,5,82,0,0,1792,313,1,0,0,0,1793,1794,5,58,0,0,1794,
		1795,5,76,0,0,1795,1796,3,388,194,0,1796,1797,5,77,0,0,1797,1798,3,316,
		158,0,1798,315,1,0,0,0,1799,1800,5,78,0,0,1800,1804,3,318,159,0,1801,1803,
		3,318,159,0,1802,1801,1,0,0,0,1803,1806,1,0,0,0,1804,1802,1,0,0,0,1804,
		1805,1,0,0,0,1805,1807,1,0,0,0,1806,1804,1,0,0,0,1807,1808,5,79,0,0,1808,
		1826,1,0,0,0,1809,1813,5,78,0,0,1810,1812,3,320,160,0,1811,1810,1,0,0,
		0,1812,1815,1,0,0,0,1813,1811,1,0,0,0,1813,1814,1,0,0,0,1814,1821,1,0,
		0,0,1815,1813,1,0,0,0,1816,1817,3,322,161,0,1817,1818,5,94,0,0,1818,1820,
		1,0,0,0,1819,1816,1,0,0,0,1820,1823,1,0,0,0,1821,1819,1,0,0,0,1821,1822,
		1,0,0,0,1822,1824,1,0,0,0,1823,1821,1,0,0,0,1824,1826,5,79,0,0,1825,1799,
		1,0,0,0,1825,1809,1,0,0,0,1826,317,1,0,0,0,1827,1828,3,322,161,0,1828,
		1834,5,95,0,0,1829,1830,3,388,194,0,1830,1831,5,82,0,0,1831,1835,1,0,0,
		0,1832,1835,3,276,138,0,1833,1835,3,356,178,0,1834,1829,1,0,0,0,1834,1832,
		1,0,0,0,1834,1833,1,0,0,0,1835,319,1,0,0,0,1836,1837,3,322,161,0,1837,
		1843,5,94,0,0,1838,1839,3,322,161,0,1839,1840,5,94,0,0,1840,1842,1,0,0,
		0,1841,1838,1,0,0,0,1842,1845,1,0,0,0,1843,1841,1,0,0,0,1843,1844,1,0,
		0,0,1844,1846,1,0,0,0,1845,1843,1,0,0,0,1846,1847,3,278,139,0,1847,321,
		1,0,0,0,1848,1849,5,23,0,0,1849,1854,3,324,162,0,1850,1851,5,83,0,0,1851,
		1853,3,324,162,0,1852,1850,1,0,0,0,1853,1856,1,0,0,0,1854,1852,1,0,0,0,
		1854,1855,1,0,0,0,1855,1859,1,0,0,0,1856,1854,1,0,0,0,1857,1859,5,29,0,
		0,1858,1848,1,0,0,0,1858,1857,1,0,0,0,1859,323,1,0,0,0,1860,1861,3,464,
		232,0,1861,325,1,0,0,0,1862,1863,5,67,0,0,1863,1864,5,76,0,0,1864,1865,
		3,388,194,0,1865,1866,5,77,0,0,1866,1867,3,290,145,0,1867,327,1,0,0,0,
		1868,1869,5,67,0,0,1869,1870,5,76,0,0,1870,1871,3,388,194,0,1871,1872,
		5,77,0,0,1872,1873,3,292,146,0,1873,329,1,0,0,0,1874,1875,5,30,0,0,1875,
		1876,3,290,145,0,1876,1877,5,67,0,0,1877,1878,5,76,0,0,1878,1879,3,388,
		194,0,1879,1880,5,77,0,0,1880,1881,5,82,0,0,1881,331,1,0,0,0,1882,1885,
		3,336,168,0,1883,1885,3,346,173,0,1884,1882,1,0,0,0,1884,1883,1,0,0,0,
		1885,333,1,0,0,0,1886,1889,3,338,169,0,1887,1889,3,348,174,0,1888,1886,
		1,0,0,0,1888,1887,1,0,0,0,1889,335,1,0,0,0,1890,1891,5,38,0,0,1891,1893,
		5,76,0,0,1892,1894,3,340,170,0,1893,1892,1,0,0,0,1893,1894,1,0,0,0,1894,
		1895,1,0,0,0,1895,1897,5,82,0,0,1896,1898,3,388,194,0,1897,1896,1,0,0,
		0,1897,1898,1,0,0,0,1898,1899,1,0,0,0,1899,1901,5,82,0,0,1900,1902,3,342,
		171,0,1901,1900,1,0,0,0,1901,1902,1,0,0,0,1902,1903,1,0,0,0,1903,1904,
		5,77,0,0,1904,1905,3,290,145,0,1905,337,1,0,0,0,1906,1907,5,38,0,0,1907,
		1909,5,76,0,0,1908,1910,3,340,170,0,1909,1908,1,0,0,0,1909,1910,1,0,0,
		0,1910,1911,1,0,0,0,1911,1913,5,82,0,0,1912,1914,3,388,194,0,1913,1912,
		1,0,0,0,1913,1914,1,0,0,0,1914,1915,1,0,0,0,1915,1917,5,82,0,0,1916,1918,
		3,342,171,0,1917,1916,1,0,0,0,1917,1918,1,0,0,0,1918,1919,1,0,0,0,1919,
		1920,5,77,0,0,1920,1921,3,292,146,0,1921,339,1,0,0,0,1922,1925,3,344,172,
		0,1923,1925,3,284,142,0,1924,1922,1,0,0,0,1924,1923,1,0,0,0,1925,341,1,
		0,0,0,1926,1927,3,344,172,0,1927,343,1,0,0,0,1928,1933,3,304,152,0,1929,
		1930,5,83,0,0,1930,1932,3,304,152,0,1931,1929,1,0,0,0,1932,1935,1,0,0,
		0,1933,1931,1,0,0,0,1933,1934,1,0,0,0,1934,345,1,0,0,0,1935,1933,1,0,0,
		0,1936,1937,5,38,0,0,1937,1938,5,76,0,0,1938,1939,3,284,142,0,1939,1940,
		5,94,0,0,1940,1941,3,388,194,0,1941,1942,5,77,0,0,1942,1943,3,290,145,
		0,1943,347,1,0,0,0,1944,1945,5,38,0,0,1945,1946,5,76,0,0,1946,1947,3,284,
		142,0,1947,1948,5,94,0,0,1948,1949,3,388,194,0,1949,1950,5,77,0,0,1950,
		1951,3,292,146,0,1951,349,1,0,0,0,1952,1954,5,21,0,0,1953,1955,5,123,0,
		0,1954,1953,1,0,0,0,1954,1955,1,0,0,0,1955,1956,1,0,0,0,1956,1957,5,82,
		0,0,1957,351,1,0,0,0,1958,1960,5,28,0,0,1959,1961,5,123,0,0,1960,1959,
		1,0,0,0,1960,1961,1,0,0,0,1961,1962,1,0,0,0,1962,1963,5,82,0,0,1963,353,
		1,0,0,0,1964,1966,5,53,0,0,1965,1967,3,388,194,0,1966,1965,1,0,0,0,1966,
		1967,1,0,0,0,1967,1968,1,0,0,0,1968,1969,5,82,0,0,1969,355,1,0,0,0,1970,
		1971,5,61,0,0,1971,1972,3,388,194,0,1972,1973,5,82,0,0,1973,357,1,0,0,
		0,1974,1975,5,59,0,0,1975,1976,5,76,0,0,1976,1977,3,388,194,0,1977,1978,
		5,77,0,0,1978,1979,3,276,138,0,1979,359,1,0,0,0,1980,1981,5,64,0,0,1981,
		1982,3,276,138,0,1982,1983,3,362,181,0,1983,1997,1,0,0,0,1984,1985,5,64,
		0,0,1985,1986,3,276,138,0,1986,1987,3,370,185,0,1987,1997,1,0,0,0,1988,
		1989,5,64,0,0,1989,1991,3,276,138,0,1990,1992,3,362,181,0,1991,1990,1,
		0,0,0,1991,1992,1,0,0,0,1992,1993,1,0,0,0,1993,1994,3,370,185,0,1994,1997,
		1,0,0,0,1995,1997,3,372,186,0,1996,1980,1,0,0,0,1996,1984,1,0,0,0,1996,
		1988,1,0,0,0,1996,1995,1,0,0,0,1997,361,1,0,0,0,1998,2002,3,364,182,0,
		1999,2001,3,364,182,0,2000,1999,1,0,0,0,2001,2004,1,0,0,0,2002,2000,1,
		0,0,0,2002,2003,1,0,0,0,2003,363,1,0,0,0,2004,2002,1,0,0,0,2005,2006,5,
		24,0,0,2006,2007,5,76,0,0,2007,2008,3,366,183,0,2008,2009,5,77,0,0,2009,
		2010,3,276,138,0,2010,365,1,0,0,0,2011,2013,3,164,82,0,2012,2011,1,0,0,
		0,2013,2016,1,0,0,0,2014,2012,1,0,0,0,2014,2015,1,0,0,0,2015,2017,1,0,
		0,0,2016,2014,1,0,0,0,2017,2018,3,368,184,0,2018,2019,3,124,62,0,2019,
		367,1,0,0,0,2020,2025,3,138,69,0,2021,2022,5,109,0,0,2022,2024,3,22,11,
		0,2023,2021,1,0,0,0,2024,2027,1,0,0,0,2025,2023,1,0,0,0,2025,2026,1,0,
		0,0,2026,369,1,0,0,0,2027,2025,1,0,0,0,2028,2029,5,36,0,0,2029,2030,3,
		276,138,0,2030,371,1,0,0,0,2031,2032,5,64,0,0,2032,2033,3,374,187,0,2033,
		2035,3,276,138,0,2034,2036,3,362,181,0,2035,2034,1,0,0,0,2035,2036,1,0,
		0,0,2036,2038,1,0,0,0,2037,2039,3,370,185,0,2038,2037,1,0,0,0,2038,2039,
		1,0,0,0,2039,373,1,0,0,0,2040,2041,5,76,0,0,2041,2043,3,376,188,0,2042,
		2044,5,82,0,0,2043,2042,1,0,0,0,2043,2044,1,0,0,0,2044,2045,1,0,0,0,2045,
		2046,5,77,0,0,2046,375,1,0,0,0,2047,2052,3,378,189,0,2048,2049,5,82,0,
		0,2049,2051,3,378,189,0,2050,2048,1,0,0,0,2051,2054,1,0,0,0,2052,2050,
		1,0,0,0,2052,2053,1,0,0,0,2053,377,1,0,0,0,2054,2052,1,0,0,0,2055,2058,
		3,284,142,0,2056,2058,3,380,190,0,2057,2055,1,0,0,0,2057,2056,1,0,0,0,
		2058,379,1,0,0,0,2059,2062,3,58,29,0,2060,2062,3,418,209,0,2061,2059,1,
		0,0,0,2061,2060,1,0,0,0,2062,381,1,0,0,0,2063,2064,5,17,0,0,2064,2065,
		3,388,194,0,2065,2066,5,82,0,0,2066,383,1,0,0,0,2067,2068,3,386,193,0,
		2068,385,1,0,0,0,2069,2070,3,284,142,0,2070,387,1,0,0,0,2071,2074,3,474,
		237,0,2072,2074,3,466,233,0,2073,2071,1,0,0,0,2073,2072,1,0,0,0,2074,389,
		1,0,0,0,2075,2078,3,392,196,0,2076,2078,3,406,203,0,2077,2075,1,0,0,0,
		2077,2076,1,0,0,0,2078,391,1,0,0,0,2079,2081,3,2,1,0,2080,2082,3,394,197,
		0,2081,2080,1,0,0,0,2081,2082,1,0,0,0,2082,2297,1,0,0,0,2083,2085,3,396,
		198,0,2084,2086,3,394,197,0,2085,2084,1,0,0,0,2085,2086,1,0,0,0,2086,2297,
		1,0,0,0,2087,2089,5,60,0,0,2088,2090,3,394,197,0,2089,2088,1,0,0,0,2089,
		2090,1,0,0,0,2090,2297,1,0,0,0,2091,2092,3,54,27,0,2092,2093,5,84,0,0,
		2093,2095,5,60,0,0,2094,2096,3,394,197,0,2095,2094,1,0,0,0,2095,2096,1,
		0,0,0,2096,2297,1,0,0,0,2097,2098,5,76,0,0,2098,2099,3,388,194,0,2099,
		2101,5,77,0,0,2100,2102,3,394,197,0,2101,2100,1,0,0,0,2101,2102,1,0,0,
		0,2102,2297,1,0,0,0,2103,2105,3,400,200,0,2104,2106,3,394,197,0,2105,2104,
		1,0,0,0,2105,2106,1,0,0,0,2106,2297,1,0,0,0,2107,2108,3,58,29,0,2108,2109,
		5,84,0,0,2109,2111,3,400,200,0,2110,2112,3,394,197,0,2111,2110,1,0,0,0,
		2111,2112,1,0,0,0,2112,2297,1,0,0,0,2113,2114,3,406,203,0,2114,2115,5,
		84,0,0,2115,2117,3,400,200,0,2116,2118,3,394,197,0,2117,2116,1,0,0,0,2117,
		2118,1,0,0,0,2118,2297,1,0,0,0,2119,2120,3,406,203,0,2120,2121,5,84,0,
		0,2121,2123,5,123,0,0,2122,2124,3,394,197,0,2123,2122,1,0,0,0,2123,2124,
		1,0,0,0,2124,2297,1,0,0,0,2125,2126,5,57,0,0,2126,2127,5,84,0,0,2127,2129,
		5,123,0,0,2128,2130,3,394,197,0,2129,2128,1,0,0,0,2129,2130,1,0,0,0,2130,
		2297,1,0,0,0,2131,2132,3,54,27,0,2132,2133,5,84,0,0,2133,2134,5,57,0,0,
		2134,2135,5,84,0,0,2135,2137,5,123,0,0,2136,2138,3,394,197,0,2137,2136,
		1,0,0,0,2137,2138,1,0,0,0,2138,2297,1,0,0,0,2139,2140,3,58,29,0,2140,2141,
		5,80,0,0,2141,2142,3,388,194,0,2142,2144,5,81,0,0,2143,2145,3,394,197,
		0,2144,2143,1,0,0,0,2144,2145,1,0,0,0,2145,2297,1,0,0,0,2146,2147,3,410,
		205,0,2147,2148,5,80,0,0,2148,2149,3,388,194,0,2149,2151,5,81,0,0,2150,
		2152,3,394,197,0,2151,2150,1,0,0,0,2151,2152,1,0,0,0,2152,2297,1,0,0,0,
		2153,2154,3,60,30,0,2154,2156,5,76,0,0,2155,2157,3,422,211,0,2156,2155,
		1,0,0,0,2156,2157,1,0,0,0,2157,2158,1,0,0,0,2158,2160,5,77,0,0,2159,2161,
		3,394,197,0,2160,2159,1,0,0,0,2160,2161,1,0,0,0,2161,2297,1,0,0,0,2162,
		2163,3,54,27,0,2163,2165,5,84,0,0,2164,2166,3,40,20,0,2165,2164,1,0,0,
		0,2165,2166,1,0,0,0,2166,2167,1,0,0,0,2167,2168,5,123,0,0,2168,2170,5,
		76,0,0,2169,2171,3,422,211,0,2170,2169,1,0,0,0,2170,2171,1,0,0,0,2171,
		2172,1,0,0,0,2172,2174,5,77,0,0,2173,2175,3,394,197,0,2174,2173,1,0,0,
		0,2174,2175,1,0,0,0,2175,2297,1,0,0,0,2176,2177,3,58,29,0,2177,2179,5,
		84,0,0,2178,2180,3,40,20,0,2179,2178,1,0,0,0,2179,2180,1,0,0,0,2180,2181,
		1,0,0,0,2181,2182,5,123,0,0,2182,2184,5,76,0,0,2183,2185,3,422,211,0,2184,
		2183,1,0,0,0,2184,2185,1,0,0,0,2185,2186,1,0,0,0,2186,2188,5,77,0,0,2187,
		2189,3,394,197,0,2188,2187,1,0,0,0,2188,2189,1,0,0,0,2189,2297,1,0,0,0,
		2190,2191,3,406,203,0,2191,2193,5,84,0,0,2192,2194,3,40,20,0,2193,2192,
		1,0,0,0,2193,2194,1,0,0,0,2194,2195,1,0,0,0,2195,2196,5,123,0,0,2196,2198,
		5,76,0,0,2197,2199,3,422,211,0,2198,2197,1,0,0,0,2198,2199,1,0,0,0,2199,
		2200,1,0,0,0,2200,2202,5,77,0,0,2201,2203,3,394,197,0,2202,2201,1,0,0,
		0,2202,2203,1,0,0,0,2203,2297,1,0,0,0,2204,2205,5,57,0,0,2205,2207,5,84,
		0,0,2206,2208,3,40,20,0,2207,2206,1,0,0,0,2207,2208,1,0,0,0,2208,2209,
		1,0,0,0,2209,2210,5,123,0,0,2210,2212,5,76,0,0,2211,2213,3,422,211,0,2212,
		2211,1,0,0,0,2212,2213,1,0,0,0,2213,2214,1,0,0,0,2214,2216,5,77,0,0,2215,
		2217,3,394,197,0,2216,2215,1,0,0,0,2216,2217,1,0,0,0,2217,2297,1,0,0,0,
		2218,2219,3,54,27,0,2219,2220,5,84,0,0,2220,2221,5,57,0,0,2221,2223,5,
		84,0,0,2222,2224,3,40,20,0,2223,2222,1,0,0,0,2223,2224,1,0,0,0,2224,2225,
		1,0,0,0,2225,2226,5,123,0,0,2226,2228,5,76,0,0,2227,2229,3,422,211,0,2228,
		2227,1,0,0,0,2228,2229,1,0,0,0,2229,2230,1,0,0,0,2230,2232,5,77,0,0,2231,
		2233,3,394,197,0,2232,2231,1,0,0,0,2232,2233,1,0,0,0,2233,2297,1,0,0,0,
		2234,2235,3,58,29,0,2235,2237,5,87,0,0,2236,2238,3,40,20,0,2237,2236,1,
		0,0,0,2237,2238,1,0,0,0,2238,2239,1,0,0,0,2239,2241,5,123,0,0,2240,2242,
		3,394,197,0,2241,2240,1,0,0,0,2241,2242,1,0,0,0,2242,2297,1,0,0,0,2243,
		2244,3,406,203,0,2244,2246,5,87,0,0,2245,2247,3,40,20,0,2246,2245,1,0,
		0,0,2246,2247,1,0,0,0,2247,2248,1,0,0,0,2248,2250,5,123,0,0,2249,2251,
		3,394,197,0,2250,2249,1,0,0,0,2250,2251,1,0,0,0,2251,2297,1,0,0,0,2252,
		2253,3,16,8,0,2253,2255,5,87,0,0,2254,2256,3,40,20,0,2255,2254,1,0,0,0,
		2255,2256,1,0,0,0,2256,2257,1,0,0,0,2257,2259,5,123,0,0,2258,2260,3,394,
		197,0,2259,2258,1,0,0,0,2259,2260,1,0,0,0,2260,2297,1,0,0,0,2261,2262,
		5,57,0,0,2262,2264,5,87,0,0,2263,2265,3,40,20,0,2264,2263,1,0,0,0,2264,
		2265,1,0,0,0,2265,2266,1,0,0,0,2266,2268,5,123,0,0,2267,2269,3,394,197,
		0,2268,2267,1,0,0,0,2268,2269,1,0,0,0,2269,2297,1,0,0,0,2270,2271,3,54,
		27,0,2271,2272,5,84,0,0,2272,2273,5,57,0,0,2273,2275,5,87,0,0,2274,2276,
		3,40,20,0,2275,2274,1,0,0,0,2275,2276,1,0,0,0,2276,2277,1,0,0,0,2277,2279,
		5,123,0,0,2278,2280,3,394,197,0,2279,2278,1,0,0,0,2279,2280,1,0,0,0,2280,
		2297,1,0,0,0,2281,2282,3,22,11,0,2282,2284,5,87,0,0,2283,2285,3,40,20,
		0,2284,2283,1,0,0,0,2284,2285,1,0,0,0,2285,2286,1,0,0,0,2286,2288,5,48,
		0,0,2287,2289,3,394,197,0,2288,2287,1,0,0,0,2288,2289,1,0,0,0,2289,2297,
		1,0,0,0,2290,2291,3,28,14,0,2291,2292,5,87,0,0,2292,2294,5,48,0,0,2293,
		2295,3,394,197,0,2294,2293,1,0,0,0,2294,2295,1,0,0,0,2295,2297,1,0,0,0,
		2296,2079,1,0,0,0,2296,2083,1,0,0,0,2296,2087,1,0,0,0,2296,2091,1,0,0,
		0,2296,2097,1,0,0,0,2296,2103,1,0,0,0,2296,2107,1,0,0,0,2296,2113,1,0,
		0,0,2296,2119,1,0,0,0,2296,2125,1,0,0,0,2296,2131,1,0,0,0,2296,2139,1,
		0,0,0,2296,2146,1,0,0,0,2296,2153,1,0,0,0,2296,2162,1,0,0,0,2296,2176,
		1,0,0,0,2296,2190,1,0,0,0,2296,2204,1,0,0,0,2296,2218,1,0,0,0,2296,2234,
		1,0,0,0,2296,2243,1,0,0,0,2296,2252,1,0,0,0,2296,2261,1,0,0,0,2296,2270,
		1,0,0,0,2296,2281,1,0,0,0,2296,2290,1,0,0,0,2297,393,1,0,0,0,2298,2299,
		5,84,0,0,2299,2301,3,400,200,0,2300,2302,3,394,197,0,2301,2300,1,0,0,0,
		2301,2302,1,0,0,0,2302,2336,1,0,0,0,2303,2304,5,84,0,0,2304,2306,5,123,
		0,0,2305,2307,3,394,197,0,2306,2305,1,0,0,0,2306,2307,1,0,0,0,2307,2336,
		1,0,0,0,2308,2309,5,80,0,0,2309,2310,3,388,194,0,2310,2312,5,81,0,0,2311,
		2313,3,394,197,0,2312,2311,1,0,0,0,2312,2313,1,0,0,0,2313,2336,1,0,0,0,
		2314,2316,5,84,0,0,2315,2317,3,40,20,0,2316,2315,1,0,0,0,2316,2317,1,0,
		0,0,2317,2318,1,0,0,0,2318,2319,5,123,0,0,2319,2321,5,76,0,0,2320,2322,
		3,422,211,0,2321,2320,1,0,0,0,2321,2322,1,0,0,0,2322,2323,1,0,0,0,2323,
		2325,5,77,0,0,2324,2326,3,394,197,0,2325,2324,1,0,0,0,2325,2326,1,0,0,
		0,2326,2336,1,0,0,0,2327,2329,5,87,0,0,2328,2330,3,40,20,0,2329,2328,1,
		0,0,0,2329,2330,1,0,0,0,2330,2331,1,0,0,0,2331,2333,5,123,0,0,2332,2334,
		3,394,197,0,2333,2332,1,0,0,0,2333,2334,1,0,0,0,2334,2336,1,0,0,0,2335,
		2298,1,0,0,0,2335,2303,1,0,0,0,2335,2308,1,0,0,0,2335,2314,1,0,0,0,2335,
		2327,1,0,0,0,2336,395,1,0,0,0,2337,2342,3,54,27,0,2338,2339,5,80,0,0,2339,
		2341,5,81,0,0,2340,2338,1,0,0,0,2341,2344,1,0,0,0,2342,2340,1,0,0,0,2342,
		2343,1,0,0,0,2343,2345,1,0,0,0,2344,2342,1,0,0,0,2345,2346,5,84,0,0,2346,
		2347,5,26,0,0,2347,2373,1,0,0,0,2348,2353,3,10,5,0,2349,2350,5,80,0,0,
		2350,2352,5,81,0,0,2351,2349,1,0,0,0,2352,2355,1,0,0,0,2353,2351,1,0,0,
		0,2353,2354,1,0,0,0,2354,2356,1,0,0,0,2355,2353,1,0,0,0,2356,2357,5,84,
		0,0,2357,2358,5,26,0,0,2358,2373,1,0,0,0,2359,2364,5,20,0,0,2360,2361,
		5,80,0,0,2361,2363,5,81,0,0,2362,2360,1,0,0,0,2363,2366,1,0,0,0,2364,2362,
		1,0,0,0,2364,2365,1,0,0,0,2365,2367,1,0,0,0,2366,2364,1,0,0,0,2367,2368,
		5,84,0,0,2368,2373,5,26,0,0,2369,2370,5,65,0,0,2370,2371,5,84,0,0,2371,
		2373,5,26,0,0,2372,2337,1,0,0,0,2372,2348,1,0,0,0,2372,2359,1,0,0,0,2372,
		2369,1,0,0,0,2373,397,1,0,0,0,2374,2384,3,400,200,0,2375,2376,3,58,29,
		0,2376,2377,5,84,0,0,2377,2378,3,400,200,0,2378,2384,1,0,0,0,2379,2380,
		3,390,195,0,2380,2381,5,84,0,0,2381,2382,3,400,200,0,2382,2384,1,0,0,0,
		2383,2374,1,0,0,0,2383,2375,1,0,0,0,2383,2379,1,0,0,0,2384,399,1,0,0,0,
		2385,2387,5,48,0,0,2386,2388,3,40,20,0,2387,2386,1,0,0,0,2387,2388,1,0,
		0,0,2388,2389,1,0,0,0,2389,2390,3,402,201,0,2390,2392,5,76,0,0,2391,2393,
		3,422,211,0,2392,2391,1,0,0,0,2392,2393,1,0,0,0,2393,2394,1,0,0,0,2394,
		2396,5,77,0,0,2395,2397,3,110,55,0,2396,2395,1,0,0,0,2396,2397,1,0,0,0,
		2397,401,1,0,0,0,2398,2400,3,254,127,0,2399,2398,1,0,0,0,2400,2403,1,0,
		0,0,2401,2399,1,0,0,0,2401,2402,1,0,0,0,2402,2404,1,0,0,0,2403,2401,1,
		0,0,0,2404,2415,5,123,0,0,2405,2409,5,84,0,0,2406,2408,3,254,127,0,2407,
		2406,1,0,0,0,2408,2411,1,0,0,0,2409,2407,1,0,0,0,2409,2410,1,0,0,0,2410,
		2412,1,0,0,0,2411,2409,1,0,0,0,2412,2414,5,123,0,0,2413,2405,1,0,0,0,2414,
		2417,1,0,0,0,2415,2413,1,0,0,0,2415,2416,1,0,0,0,2416,2419,1,0,0,0,2417,
		2415,1,0,0,0,2418,2420,3,404,202,0,2419,2418,1,0,0,0,2419,2420,1,0,0,0,
		2420,403,1,0,0,0,2421,2424,3,40,20,0,2422,2424,5,4,0,0,2423,2421,1,0,0,
		0,2423,2422,1,0,0,0,2424,405,1,0,0,0,2425,2428,3,408,204,0,2426,2428,3,
		410,205,0,2427,2425,1,0,0,0,2427,2426,1,0,0,0,2428,407,1,0,0,0,2429,2430,
		5,48,0,0,2430,2431,3,8,4,0,2431,2433,3,412,206,0,2432,2434,3,30,15,0,2433,
		2432,1,0,0,0,2433,2434,1,0,0,0,2434,2442,1,0,0,0,2435,2436,5,48,0,0,2436,
		2437,3,22,11,0,2437,2439,3,412,206,0,2438,2440,3,30,15,0,2439,2438,1,0,
		0,0,2439,2440,1,0,0,0,2440,2442,1,0,0,0,2441,2429,1,0,0,0,2441,2435,1,
		0,0,0,2442,409,1,0,0,0,2443,2444,5,48,0,0,2444,2445,3,8,4,0,2445,2446,
		3,30,15,0,2446,2447,3,272,136,0,2447,2454,1,0,0,0,2448,2449,5,48,0,0,2449,
		2450,3,20,10,0,2450,2451,3,30,15,0,2451,2452,3,272,136,0,2452,2454,1,0,
		0,0,2453,2443,1,0,0,0,2453,2448,1,0,0,0,2454,411,1,0,0,0,2455,2459,3,414,
		207,0,2456,2458,3,414,207,0,2457,2456,1,0,0,0,2458,2461,1,0,0,0,2459,2457,
		1,0,0,0,2459,2460,1,0,0,0,2460,413,1,0,0,0,2461,2459,1,0,0,0,2462,2464,
		3,254,127,0,2463,2462,1,0,0,0,2464,2467,1,0,0,0,2465,2463,1,0,0,0,2465,
		2466,1,0,0,0,2466,2468,1,0,0,0,2467,2465,1,0,0,0,2468,2469,5,80,0,0,2469,
		2470,3,388,194,0,2470,2471,5,81,0,0,2471,415,1,0,0,0,2472,2473,3,58,29,
		0,2473,2474,5,80,0,0,2474,2475,3,388,194,0,2475,2476,5,81,0,0,2476,2488,
		1,0,0,0,2477,2478,3,392,196,0,2478,2479,5,80,0,0,2479,2480,3,388,194,0,
		2480,2481,5,81,0,0,2481,2488,1,0,0,0,2482,2483,3,410,205,0,2483,2484,5,
		80,0,0,2484,2485,3,388,194,0,2485,2486,5,81,0,0,2486,2488,1,0,0,0,2487,
		2472,1,0,0,0,2487,2477,1,0,0,0,2487,2482,1,0,0,0,2488,417,1,0,0,0,2489,
		2490,3,390,195,0,2490,2491,5,84,0,0,2491,2492,5,123,0,0,2492,2503,1,0,
		0,0,2493,2494,5,57,0,0,2494,2495,5,84,0,0,2495,2503,5,123,0,0,2496,2497,
		3,54,27,0,2497,2498,5,84,0,0,2498,2499,5,57,0,0,2499,2500,5,84,0,0,2500,
		2501,5,123,0,0,2501,2503,1,0,0,0,2502,2489,1,0,0,0,2502,2493,1,0,0,0,2502,
		2496,1,0,0,0,2503,419,1,0,0,0,2504,2505,3,60,30,0,2505,2507,5,76,0,0,2506,
		2508,3,422,211,0,2507,2506,1,0,0,0,2507,2508,1,0,0,0,2508,2509,1,0,0,0,
		2509,2510,5,77,0,0,2510,2573,1,0,0,0,2511,2512,3,54,27,0,2512,2514,5,84,
		0,0,2513,2515,3,40,20,0,2514,2513,1,0,0,0,2514,2515,1,0,0,0,2515,2516,
		1,0,0,0,2516,2517,5,123,0,0,2517,2519,5,76,0,0,2518,2520,3,422,211,0,2519,
		2518,1,0,0,0,2519,2520,1,0,0,0,2520,2521,1,0,0,0,2521,2522,5,77,0,0,2522,
		2573,1,0,0,0,2523,2524,3,58,29,0,2524,2526,5,84,0,0,2525,2527,3,40,20,
		0,2526,2525,1,0,0,0,2526,2527,1,0,0,0,2527,2528,1,0,0,0,2528,2529,5,123,
		0,0,2529,2531,5,76,0,0,2530,2532,3,422,211,0,2531,2530,1,0,0,0,2531,2532,
		1,0,0,0,2532,2533,1,0,0,0,2533,2534,5,77,0,0,2534,2573,1,0,0,0,2535,2536,
		3,390,195,0,2536,2538,5,84,0,0,2537,2539,3,40,20,0,2538,2537,1,0,0,0,2538,
		2539,1,0,0,0,2539,2540,1,0,0,0,2540,2541,5,123,0,0,2541,2543,5,76,0,0,
		2542,2544,3,422,211,0,2543,2542,1,0,0,0,2543,2544,1,0,0,0,2544,2545,1,
		0,0,0,2545,2546,5,77,0,0,2546,2573,1,0,0,0,2547,2548,5,57,0,0,2548,2550,
		5,84,0,0,2549,2551,3,40,20,0,2550,2549,1,0,0,0,2550,2551,1,0,0,0,2551,
		2552,1,0,0,0,2552,2553,5,123,0,0,2553,2555,5,76,0,0,2554,2556,3,422,211,
		0,2555,2554,1,0,0,0,2555,2556,1,0,0,0,2556,2557,1,0,0,0,2557,2573,5,77,
		0,0,2558,2559,3,54,27,0,2559,2560,5,84,0,0,2560,2561,5,57,0,0,2561,2563,
		5,84,0,0,2562,2564,3,40,20,0,2563,2562,1,0,0,0,2563,2564,1,0,0,0,2564,
		2565,1,0,0,0,2565,2566,5,123,0,0,2566,2568,5,76,0,0,2567,2569,3,422,211,
		0,2568,2567,1,0,0,0,2568,2569,1,0,0,0,2569,2570,1,0,0,0,2570,2571,5,77,
		0,0,2571,2573,1,0,0,0,2572,2504,1,0,0,0,2572,2511,1,0,0,0,2572,2523,1,
		0,0,0,2572,2535,1,0,0,0,2572,2547,1,0,0,0,2572,2558,1,0,0,0,2573,421,1,
		0,0,0,2574,2579,3,388,194,0,2575,2576,5,83,0,0,2576,2578,3,388,194,0,2577,
		2575,1,0,0,0,2578,2581,1,0,0,0,2579,2577,1,0,0,0,2579,2580,1,0,0,0,2580,
		423,1,0,0,0,2581,2579,1,0,0,0,2582,2583,3,58,29,0,2583,2585,5,87,0,0,2584,
		2586,3,40,20,0,2585,2584,1,0,0,0,2585,2586,1,0,0,0,2586,2587,1,0,0,0,2587,
		2588,5,123,0,0,2588,2630,1,0,0,0,2589,2590,3,390,195,0,2590,2592,5,87,
		0,0,2591,2593,3,40,20,0,2592,2591,1,0,0,0,2592,2593,1,0,0,0,2593,2594,
		1,0,0,0,2594,2595,5,123,0,0,2595,2630,1,0,0,0,2596,2597,3,16,8,0,2597,
		2599,5,87,0,0,2598,2600,3,40,20,0,2599,2598,1,0,0,0,2599,2600,1,0,0,0,
		2600,2601,1,0,0,0,2601,2602,5,123,0,0,2602,2630,1,0,0,0,2603,2604,5,57,
		0,0,2604,2606,5,87,0,0,2605,2607,3,40,20,0,2606,2605,1,0,0,0,2606,2607,
		1,0,0,0,2607,2608,1,0,0,0,2608,2630,5,123,0,0,2609,2610,3,54,27,0,2610,
		2611,5,84,0,0,2611,2612,5,57,0,0,2612,2614,5,87,0,0,2613,2615,3,40,20,
		0,2614,2613,1,0,0,0,2614,2615,1,0,0,0,2615,2616,1,0,0,0,2616,2617,5,123,
		0,0,2617,2630,1,0,0,0,2618,2619,3,22,11,0,2619,2621,5,87,0,0,2620,2622,
		3,40,20,0,2621,2620,1,0,0,0,2621,2622,1,0,0,0,2622,2623,1,0,0,0,2623,2624,
		5,48,0,0,2624,2630,1,0,0,0,2625,2626,3,28,14,0,2626,2627,5,87,0,0,2627,
		2628,5,48,0,0,2628,2630,1,0,0,0,2629,2582,1,0,0,0,2629,2589,1,0,0,0,2629,
		2596,1,0,0,0,2629,2603,1,0,0,0,2629,2609,1,0,0,0,2629,2618,1,0,0,0,2629,
		2625,1,0,0,0,2630,425,1,0,0,0,2631,2633,3,390,195,0,2632,2634,3,428,214,
		0,2633,2632,1,0,0,0,2633,2634,1,0,0,0,2634,2640,1,0,0,0,2635,2637,3,58,
		29,0,2636,2638,3,428,214,0,2637,2636,1,0,0,0,2637,2638,1,0,0,0,2638,2640,
		1,0,0,0,2639,2631,1,0,0,0,2639,2635,1,0,0,0,2640,427,1,0,0,0,2641,2643,
		5,102,0,0,2642,2644,3,428,214,0,2643,2642,1,0,0,0,2643,2644,1,0,0,0,2644,
		2650,1,0,0,0,2645,2647,5,103,0,0,2646,2648,3,428,214,0,2647,2646,1,0,0,
		0,2647,2648,1,0,0,0,2648,2650,1,0,0,0,2649,2641,1,0,0,0,2649,2645,1,0,
		0,0,2650,429,1,0,0,0,2651,2652,3,426,213,0,2652,2653,5,102,0,0,2653,431,
		1,0,0,0,2654,2655,3,426,213,0,2655,2656,5,103,0,0,2656,433,1,0,0,0,2657,
		2665,3,436,218,0,2658,2665,3,438,219,0,2659,2660,5,104,0,0,2660,2665,3,
		434,217,0,2661,2662,5,105,0,0,2662,2665,3,434,217,0,2663,2665,3,440,220,
		0,2664,2657,1,0,0,0,2664,2658,1,0,0,0,2664,2659,1,0,0,0,2664,2661,1,0,
		0,0,2664,2663,1,0,0,0,2665,435,1,0,0,0,2666,2667,5,102,0,0,2667,2668,3,
		434,217,0,2668,437,1,0,0,0,2669,2670,5,103,0,0,2670,2671,3,434,217,0,2671,
		439,1,0,0,0,2672,2680,3,426,213,0,2673,2674,5,92,0,0,2674,2680,3,434,217,
		0,2675,2676,5,91,0,0,2676,2680,3,434,217,0,2677,2680,3,442,221,0,2678,
		2680,3,486,243,0,2679,2672,1,0,0,0,2679,2673,1,0,0,0,2679,2675,1,0,0,0,
		2679,2677,1,0,0,0,2679,2678,1,0,0,0,2680,441,1,0,0,0,2681,2682,5,76,0,
		0,2682,2683,3,8,4,0,2683,2684,5,77,0,0,2684,2685,3,434,217,0,2685,2709,
		1,0,0,0,2686,2687,5,76,0,0,2687,2691,3,16,8,0,2688,2690,3,38,19,0,2689,
		2688,1,0,0,0,2690,2693,1,0,0,0,2691,2689,1,0,0,0,2691,2692,1,0,0,0,2692,
		2694,1,0,0,0,2693,2691,1,0,0,0,2694,2695,5,77,0,0,2695,2696,3,440,220,
		0,2696,2709,1,0,0,0,2697,2698,5,76,0,0,2698,2702,3,16,8,0,2699,2701,3,
		38,19,0,2700,2699,1,0,0,0,2701,2704,1,0,0,0,2702,2700,1,0,0,0,2702,2703,
		1,0,0,0,2703,2705,1,0,0,0,2704,2702,1,0,0,0,2705,2706,5,77,0,0,2706,2707,
		3,474,237,0,2707,2709,1,0,0,0,2708,2681,1,0,0,0,2708,2686,1,0,0,0,2708,
		2697,1,0,0,0,2709,443,1,0,0,0,2710,2711,6,222,-1,0,2711,2712,3,434,217,
		0,2712,2724,1,0,0,0,2713,2714,10,3,0,0,2714,2715,5,106,0,0,2715,2723,3,
		434,217,0,2716,2717,10,2,0,0,2717,2718,5,107,0,0,2718,2723,3,434,217,0,
		2719,2720,10,1,0,0,2720,2721,5,111,0,0,2721,2723,3,434,217,0,2722,2713,
		1,0,0,0,2722,2716,1,0,0,0,2722,2719,1,0,0,0,2723,2726,1,0,0,0,2724,2722,
		1,0,0,0,2724,2725,1,0,0,0,2725,445,1,0,0,0,2726,2724,1,0,0,0,2727,2728,
		6,223,-1,0,2728,2729,3,444,222,0,2729,2738,1,0,0,0,2730,2731,10,2,0,0,
		2731,2732,5,104,0,0,2732,2737,3,444,222,0,2733,2734,10,1,0,0,2734,2735,
		5,105,0,0,2735,2737,3,444,222,0,2736,2730,1,0,0,0,2736,2733,1,0,0,0,2737,
		2740,1,0,0,0,2738,2736,1,0,0,0,2738,2739,1,0,0,0,2739,447,1,0,0,0,2740,
		2738,1,0,0,0,2741,2742,6,224,-1,0,2742,2743,3,446,223,0,2743,2759,1,0,
		0,0,2744,2745,10,3,0,0,2745,2746,5,90,0,0,2746,2747,5,90,0,0,2747,2758,
		3,446,223,0,2748,2749,10,2,0,0,2749,2750,5,89,0,0,2750,2751,5,89,0,0,2751,
		2758,3,446,223,0,2752,2753,10,1,0,0,2753,2754,5,89,0,0,2754,2755,5,89,
		0,0,2755,2756,5,89,0,0,2756,2758,3,446,223,0,2757,2744,1,0,0,0,2757,2748,
		1,0,0,0,2757,2752,1,0,0,0,2758,2761,1,0,0,0,2759,2757,1,0,0,0,2759,2760,
		1,0,0,0,2760,449,1,0,0,0,2761,2759,1,0,0,0,2762,2763,6,225,-1,0,2763,2764,
		3,448,224,0,2764,2785,1,0,0,0,2765,2766,10,5,0,0,2766,2767,5,90,0,0,2767,
		2784,3,448,224,0,2768,2769,10,4,0,0,2769,2770,5,89,0,0,2770,2784,3,448,
		224,0,2771,2772,10,3,0,0,2772,2773,5,97,0,0,2773,2784,3,448,224,0,2774,
		2775,10,2,0,0,2775,2776,5,98,0,0,2776,2784,3,448,224,0,2777,2778,10,1,
		0,0,2778,2781,5,43,0,0,2779,2782,3,16,8,0,2780,2782,3,384,192,0,2781,2779,
		1,0,0,0,2781,2780,1,0,0,0,2782,2784,1,0,0,0,2783,2765,1,0,0,0,2783,2768,
		1,0,0,0,2783,2771,1,0,0,0,2783,2774,1,0,0,0,2783,2777,1,0,0,0,2784,2787,
		1,0,0,0,2785,2783,1,0,0,0,2785,2786,1,0,0,0,2786,451,1,0,0,0,2787,2785,
		1,0,0,0,2788,2789,6,226,-1,0,2789,2790,3,450,225,0,2790,2799,1,0,0,0,2791,
		2792,10,2,0,0,2792,2793,5,96,0,0,2793,2798,3,450,225,0,2794,2795,10,1,
		0,0,2795,2796,5,99,0,0,2796,2798,3,450,225,0,2797,2791,1,0,0,0,2797,2794,
		1,0,0,0,2798,2801,1,0,0,0,2799,2797,1,0,0,0,2799,2800,1,0,0,0,2800,453,
		1,0,0,0,2801,2799,1,0,0,0,2802,2803,6,227,-1,0,2803,2804,3,452,226,0,2804,
		2810,1,0,0,0,2805,2806,10,1,0,0,2806,2807,5,108,0,0,2807,2809,3,452,226,
		0,2808,2805,1,0,0,0,2809,2812,1,0,0,0,2810,2808,1,0,0,0,2810,2811,1,0,
		0,0,2811,455,1,0,0,0,2812,2810,1,0,0,0,2813,2814,6,228,-1,0,2814,2815,
		3,454,227,0,2815,2821,1,0,0,0,2816,2817,10,1,0,0,2817,2818,5,110,0,0,2818,
		2820,3,454,227,0,2819,2816,1,0,0,0,2820,2823,1,0,0,0,2821,2819,1,0,0,0,
		2821,2822,1,0,0,0,2822,457,1,0,0,0,2823,2821,1,0,0,0,2824,2825,6,229,-1,
		0,2825,2826,3,456,228,0,2826,2832,1,0,0,0,2827,2828,10,1,0,0,2828,2829,
		5,109,0,0,2829,2831,3,456,228,0,2830,2827,1,0,0,0,2831,2834,1,0,0,0,2832,
		2830,1,0,0,0,2832,2833,1,0,0,0,2833,459,1,0,0,0,2834,2832,1,0,0,0,2835,
		2836,6,230,-1,0,2836,2837,3,458,229,0,2837,2843,1,0,0,0,2838,2839,10,1,
		0,0,2839,2840,5,100,0,0,2840,2842,3,458,229,0,2841,2838,1,0,0,0,2842,2845,
		1,0,0,0,2843,2841,1,0,0,0,2843,2844,1,0,0,0,2844,461,1,0,0,0,2845,2843,
		1,0,0,0,2846,2847,6,231,-1,0,2847,2848,3,460,230,0,2848,2854,1,0,0,0,2849,
		2850,10,1,0,0,2850,2851,5,101,0,0,2851,2853,3,460,230,0,2852,2849,1,0,
		0,0,2853,2856,1,0,0,0,2854,2852,1,0,0,0,2854,2855,1,0,0,0,2855,463,1,0,
		0,0,2856,2854,1,0,0,0,2857,2871,3,462,231,0,2858,2859,3,462,231,0,2859,
		2860,5,93,0,0,2860,2861,3,388,194,0,2861,2862,5,94,0,0,2862,2863,3,464,
		232,0,2863,2871,1,0,0,0,2864,2865,3,462,231,0,2865,2866,5,93,0,0,2866,
		2867,3,388,194,0,2867,2868,5,94,0,0,2868,2869,3,474,237,0,2869,2871,1,
		0,0,0,2870,2857,1,0,0,0,2870,2858,1,0,0,0,2870,2864,1,0,0,0,2871,465,1,
		0,0,0,2872,2875,3,464,232,0,2873,2875,3,468,234,0,2874,2872,1,0,0,0,2874,
		2873,1,0,0,0,2875,467,1,0,0,0,2876,2877,3,470,235,0,2877,2878,3,472,236,
		0,2878,2879,3,388,194,0,2879,469,1,0,0,0,2880,2884,3,58,29,0,2881,2884,
		3,418,209,0,2882,2884,3,416,208,0,2883,2880,1,0,0,0,2883,2881,1,0,0,0,
		2883,2882,1,0,0,0,2884,471,1,0,0,0,2885,2886,7,5,0,0,2886,473,1,0,0,0,
		2887,2888,3,476,238,0,2888,2889,5,95,0,0,2889,2890,3,484,242,0,2890,475,
		1,0,0,0,2891,2893,5,76,0,0,2892,2894,3,478,239,0,2893,2892,1,0,0,0,2893,
		2894,1,0,0,0,2894,2895,1,0,0,0,2895,2898,5,77,0,0,2896,2898,5,123,0,0,
		2897,2891,1,0,0,0,2897,2896,1,0,0,0,2898,477,1,0,0,0,2899,2904,3,480,240,
		0,2900,2901,5,83,0,0,2901,2903,3,480,240,0,2902,2900,1,0,0,0,2903,2906,
		1,0,0,0,2904,2902,1,0,0,0,2904,2905,1,0,0,0,2905,2916,1,0,0,0,2906,2904,
		1,0,0,0,2907,2912,5,123,0,0,2908,2909,5,83,0,0,2909,2911,5,123,0,0,2910,
		2908,1,0,0,0,2911,2914,1,0,0,0,2912,2910,1,0,0,0,2912,2913,1,0,0,0,2913,
		2916,1,0,0,0,2914,2912,1,0,0,0,2915,2899,1,0,0,0,2915,2907,1,0,0,0,2916,
		479,1,0,0,0,2917,2919,3,164,82,0,2918,2917,1,0,0,0,2919,2922,1,0,0,0,2920,
		2918,1,0,0,0,2920,2921,1,0,0,0,2921,2923,1,0,0,0,2922,2920,1,0,0,0,2923,
		2924,3,482,241,0,2924,2925,3,124,62,0,2925,2928,1,0,0,0,2926,2928,3,162,
		81,0,2927,2920,1,0,0,0,2927,2926,1,0,0,0,2928,481,1,0,0,0,2929,2932,3,
		128,64,0,2930,2932,5,15,0,0,2931,2929,1,0,0,0,2931,2930,1,0,0,0,2932,483,
		1,0,0,0,2933,2936,3,388,194,0,2934,2936,3,276,138,0,2935,2933,1,0,0,0,
		2935,2934,1,0,0,0,2936,485,1,0,0,0,2937,2938,5,58,0,0,2938,2939,5,76,0,
		0,2939,2940,3,388,194,0,2940,2941,5,77,0,0,2941,2942,3,316,158,0,2942,
		487,1,0,0,0,2943,2944,3,388,194,0,2944,489,1,0,0,0,360,502,507,511,520,
		526,531,534,539,544,549,552,557,562,569,574,581,586,588,595,609,614,622,
		629,635,640,650,653,667,672,677,682,688,693,698,703,708,713,722,726,729,
		734,740,746,754,763,774,803,808,812,820,827,836,850,853,865,868,884,889,
		896,901,907,910,913,916,930,941,955,964,971,980,987,992,1007,1014,1020,
		1024,1028,1032,1036,1041,1048,1051,1055,1058,1064,1069,1072,1076,1080,
		1086,1091,1093,1102,1109,1125,1131,1134,1139,1143,1150,1153,1157,1162,
		1168,1177,1183,1190,1195,1202,1210,1220,1225,1229,1239,1244,1252,1255,
		1262,1265,1273,1276,1281,1286,1292,1296,1301,1306,1311,1317,1323,1326,
		1329,1338,1344,1350,1353,1356,1364,1370,1376,1380,1386,1395,1401,1408,
		1413,1420,1432,1439,1444,1452,1457,1463,1466,1469,1482,1493,1500,1510,
		1515,1526,1531,1544,1549,1561,1571,1576,1584,1587,1594,1602,1608,1617,
		1627,1631,1634,1643,1657,1660,1669,1674,1682,1688,1692,1697,1702,1706,
		1717,1724,1739,1761,1789,1804,1813,1821,1825,1834,1843,1854,1858,1884,
		1888,1893,1897,1901,1909,1913,1917,1924,1933,1954,1960,1966,1991,1996,
		2002,2014,2025,2035,2038,2043,2052,2057,2061,2073,2077,2081,2085,2089,
		2095,2101,2105,2111,2117,2123,2129,2137,2144,2151,2156,2160,2165,2170,
		2174,2179,2184,2188,2193,2198,2202,2207,2212,2216,2223,2228,2232,2237,
		2241,2246,2250,2255,2259,2264,2268,2275,2279,2284,2288,2294,2296,2301,
		2306,2312,2316,2321,2325,2329,2333,2335,2342,2353,2364,2372,2383,2387,
		2392,2396,2401,2409,2415,2419,2423,2427,2433,2439,2441,2453,2459,2465,
		2487,2502,2507,2514,2519,2526,2531,2538,2543,2550,2555,2563,2568,2572,
		2579,2585,2592,2599,2606,2614,2621,2629,2633,2637,2639,2643,2647,2649,
		2664,2679,2691,2702,2708,2722,2724,2736,2738,2757,2759,2781,2783,2785,
		2797,2799,2810,2821,2832,2843,2854,2870,2874,2883,2893,2897,2904,2912,
		2915,2920,2927,2931,2935
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
