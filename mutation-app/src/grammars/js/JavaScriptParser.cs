//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from javascript/javascript/JavaScriptParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class JavaScriptParser : JavaScriptParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		HashBangLine=1, MultiLineComment=2, SingleLineComment=3, RegularExpressionLiteral=4, 
		OpenBracket=5, CloseBracket=6, OpenParen=7, CloseParen=8, OpenBrace=9, 
		TemplateCloseBrace=10, CloseBrace=11, SemiColon=12, Comma=13, Assign=14, 
		QuestionMark=15, QuestionMarkDot=16, Colon=17, Ellipsis=18, Dot=19, PlusPlus=20, 
		MinusMinus=21, Plus=22, Minus=23, BitNot=24, Not=25, Multiply=26, Divide=27, 
		Modulus=28, Power=29, NullCoalesce=30, Hashtag=31, RightShiftArithmetic=32, 
		LeftShiftArithmetic=33, RightShiftLogical=34, LessThan=35, MoreThan=36, 
		LessThanEquals=37, GreaterThanEquals=38, Equals_=39, NotEquals=40, IdentityEquals=41, 
		IdentityNotEquals=42, BitAnd=43, BitXOr=44, BitOr=45, And=46, Or=47, MultiplyAssign=48, 
		DivideAssign=49, ModulusAssign=50, PlusAssign=51, MinusAssign=52, LeftShiftArithmeticAssign=53, 
		RightShiftArithmeticAssign=54, RightShiftLogicalAssign=55, BitAndAssign=56, 
		BitXorAssign=57, BitOrAssign=58, PowerAssign=59, ARROW=60, NullLiteral=61, 
		BooleanLiteral=62, DecimalLiteral=63, HexIntegerLiteral=64, OctalIntegerLiteral=65, 
		OctalIntegerLiteral2=66, BinaryIntegerLiteral=67, BigHexIntegerLiteral=68, 
		BigOctalIntegerLiteral=69, BigBinaryIntegerLiteral=70, BigDecimalIntegerLiteral=71, 
		Break=72, Do=73, Instanceof=74, Typeof=75, Case=76, Else=77, New=78, Var=79, 
		Catch=80, Finally=81, Return=82, Void=83, Continue=84, For=85, Switch=86, 
		While=87, Debugger=88, Function_=89, This=90, With=91, Default=92, If=93, 
		Throw=94, Delete=95, In=96, Try=97, As=98, From=99, Class=100, Enum=101, 
		Extends=102, Super=103, Const=104, Export=105, Import=106, Async=107, 
		Await=108, Yield=109, Implements=110, StrictLet=111, NonStrictLet=112, 
		Private=113, Public=114, Interface=115, Package=116, Protected=117, Static=118, 
		Identifier=119, StringLiteral=120, BackTick=121, WhiteSpaces=122, LineTerminator=123, 
		HtmlComment=124, CDataComment=125, UnexpectedCharacter=126, TemplateStringStartExpression=127, 
		TemplateStringAtom=128;
	public const int
		RULE_program = 0, RULE_sourceElement = 1, RULE_statement = 2, RULE_block = 3, 
		RULE_statementList = 4, RULE_importStatement = 5, RULE_importFromBlock = 6, 
		RULE_importModuleItems = 7, RULE_importAliasName = 8, RULE_moduleExportName = 9, 
		RULE_importedBinding = 10, RULE_importDefault = 11, RULE_importNamespace = 12, 
		RULE_importFrom = 13, RULE_aliasName = 14, RULE_exportStatement = 15, 
		RULE_exportFromBlock = 16, RULE_exportModuleItems = 17, RULE_exportAliasName = 18, 
		RULE_declaration = 19, RULE_variableStatement = 20, RULE_variableDeclarationList = 21, 
		RULE_variableDeclaration = 22, RULE_emptyStatement_ = 23, RULE_expressionStatement = 24, 
		RULE_ifStatement = 25, RULE_iterationStatement = 26, RULE_varModifier = 27, 
		RULE_continueStatement = 28, RULE_breakStatement = 29, RULE_returnStatement = 30, 
		RULE_yieldStatement = 31, RULE_withStatement = 32, RULE_switchStatement = 33, 
		RULE_caseBlock = 34, RULE_caseClauses = 35, RULE_caseClause = 36, RULE_defaultClause = 37, 
		RULE_labelledStatement = 38, RULE_throwStatement = 39, RULE_tryStatement = 40, 
		RULE_catchProduction = 41, RULE_finallyProduction = 42, RULE_debuggerStatement = 43, 
		RULE_functionDeclaration = 44, RULE_classDeclaration = 45, RULE_classTail = 46, 
		RULE_classElement = 47, RULE_methodDefinition = 48, RULE_fieldDefinition = 49, 
		RULE_classElementName = 50, RULE_privateIdentifier = 51, RULE_formalParameterList = 52, 
		RULE_formalParameterArg = 53, RULE_lastFormalParameterArg = 54, RULE_functionBody = 55, 
		RULE_sourceElements = 56, RULE_arrayLiteral = 57, RULE_elementList = 58, 
		RULE_arrayElement = 59, RULE_propertyAssignment = 60, RULE_propertyName = 61, 
		RULE_arguments = 62, RULE_argument = 63, RULE_expressionSequence = 64, 
		RULE_singleExpression = 65, RULE_initializer = 66, RULE_assignable = 67, 
		RULE_objectLiteral = 68, RULE_anonymousFunction = 69, RULE_arrowFunctionParameters = 70, 
		RULE_arrowFunctionBody = 71, RULE_assignmentOperator = 72, RULE_literal = 73, 
		RULE_templateStringLiteral = 74, RULE_templateStringAtom = 75, RULE_numericLiteral = 76, 
		RULE_bigintLiteral = 77, RULE_getter = 78, RULE_setter = 79, RULE_identifierName = 80, 
		RULE_identifier = 81, RULE_reservedWord = 82, RULE_keyword = 83, RULE_let_ = 84, 
		RULE_eos = 85;
	public static readonly string[] ruleNames = {
		"program", "sourceElement", "statement", "block", "statementList", "importStatement", 
		"importFromBlock", "importModuleItems", "importAliasName", "moduleExportName", 
		"importedBinding", "importDefault", "importNamespace", "importFrom", "aliasName", 
		"exportStatement", "exportFromBlock", "exportModuleItems", "exportAliasName", 
		"declaration", "variableStatement", "variableDeclarationList", "variableDeclaration", 
		"emptyStatement_", "expressionStatement", "ifStatement", "iterationStatement", 
		"varModifier", "continueStatement", "breakStatement", "returnStatement", 
		"yieldStatement", "withStatement", "switchStatement", "caseBlock", "caseClauses", 
		"caseClause", "defaultClause", "labelledStatement", "throwStatement", 
		"tryStatement", "catchProduction", "finallyProduction", "debuggerStatement", 
		"functionDeclaration", "classDeclaration", "classTail", "classElement", 
		"methodDefinition", "fieldDefinition", "classElementName", "privateIdentifier", 
		"formalParameterList", "formalParameterArg", "lastFormalParameterArg", 
		"functionBody", "sourceElements", "arrayLiteral", "elementList", "arrayElement", 
		"propertyAssignment", "propertyName", "arguments", "argument", "expressionSequence", 
		"singleExpression", "initializer", "assignable", "objectLiteral", "anonymousFunction", 
		"arrowFunctionParameters", "arrowFunctionBody", "assignmentOperator", 
		"literal", "templateStringLiteral", "templateStringAtom", "numericLiteral", 
		"bigintLiteral", "getter", "setter", "identifierName", "identifier", "reservedWord", 
		"keyword", "let_", "eos"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'['", "']'", "'('", "')'", "'{'", null, 
		"'}'", "';'", "','", "'='", "'?'", "'?.'", "':'", "'...'", "'.'", "'++'", 
		"'--'", "'+'", "'-'", "'~'", "'!'", "'*'", "'/'", "'%'", "'**'", "'??'", 
		"'#'", "'>>'", "'<<'", "'>>>'", "'<'", "'>'", "'<='", "'>='", "'=='", 
		"'!='", "'==='", "'!=='", "'&'", "'^'", "'|'", "'&&'", "'||'", "'*='", 
		"'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'>>>='", "'&='", "'^='", 
		"'|='", "'**='", "'=>'", "'null'", null, null, null, null, null, null, 
		null, null, null, null, "'break'", "'do'", "'instanceof'", "'typeof'", 
		"'case'", "'else'", "'new'", "'var'", "'catch'", "'finally'", "'return'", 
		"'void'", "'continue'", "'for'", "'switch'", "'while'", "'debugger'", 
		"'function'", "'this'", "'with'", "'default'", "'if'", "'throw'", "'delete'", 
		"'in'", "'try'", "'as'", "'from'", "'class'", "'enum'", "'extends'", "'super'", 
		"'const'", "'export'", "'import'", "'async'", "'await'", "'yield'", "'implements'", 
		null, null, "'private'", "'public'", "'interface'", "'package'", "'protected'", 
		"'static'", null, null, null, null, null, null, null, null, "'${'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "HashBangLine", "MultiLineComment", "SingleLineComment", "RegularExpressionLiteral", 
		"OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
		"TemplateCloseBrace", "CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", 
		"QuestionMarkDot", "Colon", "Ellipsis", "Dot", "PlusPlus", "MinusMinus", 
		"Plus", "Minus", "BitNot", "Not", "Multiply", "Divide", "Modulus", "Power", 
		"NullCoalesce", "Hashtag", "RightShiftArithmetic", "LeftShiftArithmetic", 
		"RightShiftLogical", "LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", 
		"Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", "BitAnd", 
		"BitXOr", "BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign", 
		"PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
		"RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign", 
		"PowerAssign", "ARROW", "NullLiteral", "BooleanLiteral", "DecimalLiteral", 
		"HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
		"BigHexIntegerLiteral", "BigOctalIntegerLiteral", "BigBinaryIntegerLiteral", 
		"BigDecimalIntegerLiteral", "Break", "Do", "Instanceof", "Typeof", "Case", 
		"Else", "New", "Var", "Catch", "Finally", "Return", "Void", "Continue", 
		"For", "Switch", "While", "Debugger", "Function_", "This", "With", "Default", 
		"If", "Throw", "Delete", "In", "Try", "As", "From", "Class", "Enum", "Extends", 
		"Super", "Const", "Export", "Import", "Async", "Await", "Yield", "Implements", 
		"StrictLet", "NonStrictLet", "Private", "Public", "Interface", "Package", 
		"Protected", "Static", "Identifier", "StringLiteral", "BackTick", "WhiteSpaces", 
		"LineTerminator", "HtmlComment", "CDataComment", "UnexpectedCharacter", 
		"TemplateStringStartExpression", "TemplateStringAtom"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JavaScriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static JavaScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JavaScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JavaScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(JavaScriptParser.Eof, 0); }
		public ITerminalNode HashBangLine() { return GetToken(JavaScriptParser.HashBangLine, 0); }
		public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 172; Match(HashBangLine);
				}
				break;
			}
			State = 176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 175; sourceElements();
				}
				break;
			}
			State = 178; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SourceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSourceElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSourceElement(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementContext sourceElement() {
		SourceElementContext _localctx = new SourceElementContext(Context, State);
		EnterRule(_localctx, 2, RULE_sourceElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		public ExportStatementContext exportStatement() {
			return GetRuleContext<ExportStatementContext>(0);
		}
		public EmptyStatement_Context emptyStatement_() {
			return GetRuleContext<EmptyStatement_Context>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		public WithStatementContext withStatement() {
			return GetRuleContext<WithStatementContext>(0);
		}
		public LabelledStatementContext labelledStatement() {
			return GetRuleContext<LabelledStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		public DebuggerStatementContext debuggerStatement() {
			return GetRuleContext<DebuggerStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 182; block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183; variableStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 184; importStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 185; exportStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 186; emptyStatement_();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 187; classDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 188; functionDeclaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 189; expressionStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 190; ifStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 191; iterationStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 192; continueStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 193; breakStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 194; returnStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 195; yieldStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 196; withStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 197; labelledStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 198; switchStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 199; throwStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 200; tryStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 201; debuggerStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; Match(OpenBrace);
			State = 206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 205; statementList();
				}
				break;
			}
			State = 208; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 8, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 210; statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 213;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		public ITerminalNode Import() { return GetToken(JavaScriptParser.Import, 0); }
		public ImportFromBlockContext importFromBlock() {
			return GetRuleContext<ImportFromBlockContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(Import);
			State = 216; importFromBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromBlockContext : ParserRuleContext {
		public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		public ImportModuleItemsContext importModuleItems() {
			return GetRuleContext<ImportModuleItemsContext>(0);
		}
		public ImportDefaultContext importDefault() {
			return GetRuleContext<ImportDefaultContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
		public ImportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFromBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportFromBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportFromBlock(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromBlockContext importFromBlock() {
		ImportFromBlockContext _localctx = new ImportFromBlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_importFromBlock);
		try {
			State = 230;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBrace:
			case Multiply:
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Yield:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 219;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 218; importDefault();
					}
					break;
				}
				State = 223;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Multiply:
				case NullLiteral:
				case BooleanLiteral:
				case Break:
				case Do:
				case Instanceof:
				case Typeof:
				case Case:
				case Else:
				case New:
				case Var:
				case Catch:
				case Finally:
				case Return:
				case Void:
				case Continue:
				case For:
				case Switch:
				case While:
				case Debugger:
				case Function_:
				case This:
				case With:
				case Default:
				case If:
				case Throw:
				case Delete:
				case In:
				case Try:
				case As:
				case From:
				case Class:
				case Enum:
				case Extends:
				case Super:
				case Const:
				case Export:
				case Import:
				case Async:
				case Await:
				case Yield:
				case Implements:
				case StrictLet:
				case NonStrictLet:
				case Private:
				case Public:
				case Interface:
				case Package:
				case Protected:
				case Static:
				case Identifier:
					{
					State = 221; importNamespace();
					}
					break;
				case OpenBrace:
					{
					State = 222; importModuleItems();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 225; importFrom();
				State = 226; eos();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 228; Match(StringLiteral);
				State = 229; eos();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportModuleItemsContext : ParserRuleContext {
		public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		public ImportAliasNameContext[] importAliasName() {
			return GetRuleContexts<ImportAliasNameContext>();
		}
		public ImportAliasNameContext importAliasName(int i) {
			return GetRuleContext<ImportAliasNameContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ImportModuleItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importModuleItems; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportModuleItems(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportModuleItems(this);
		}
	}

	[RuleVersion(0)]
	public ImportModuleItemsContext importModuleItems() {
		ImportModuleItemsContext _localctx = new ImportModuleItemsContext(Context, State);
		EnterRule(_localctx, 14, RULE_importModuleItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; Match(OpenBrace);
			State = 238;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 233; importAliasName();
					State = 234; Match(Comma);
					}
					} 
				}
				State = 240;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (NullLiteral - 61)) | (1L << (BooleanLiteral - 61)) | (1L << (Break - 61)) | (1L << (Do - 61)) | (1L << (Instanceof - 61)) | (1L << (Typeof - 61)) | (1L << (Case - 61)) | (1L << (Else - 61)) | (1L << (New - 61)) | (1L << (Var - 61)) | (1L << (Catch - 61)) | (1L << (Finally - 61)) | (1L << (Return - 61)) | (1L << (Void - 61)) | (1L << (Continue - 61)) | (1L << (For - 61)) | (1L << (Switch - 61)) | (1L << (While - 61)) | (1L << (Debugger - 61)) | (1L << (Function_ - 61)) | (1L << (This - 61)) | (1L << (With - 61)) | (1L << (Default - 61)) | (1L << (If - 61)) | (1L << (Throw - 61)) | (1L << (Delete - 61)) | (1L << (In - 61)) | (1L << (Try - 61)) | (1L << (As - 61)) | (1L << (From - 61)) | (1L << (Class - 61)) | (1L << (Enum - 61)) | (1L << (Extends - 61)) | (1L << (Super - 61)) | (1L << (Const - 61)) | (1L << (Export - 61)) | (1L << (Import - 61)) | (1L << (Async - 61)) | (1L << (Await - 61)) | (1L << (Yield - 61)) | (1L << (Implements - 61)) | (1L << (StrictLet - 61)) | (1L << (NonStrictLet - 61)) | (1L << (Private - 61)) | (1L << (Public - 61)) | (1L << (Interface - 61)) | (1L << (Package - 61)) | (1L << (Protected - 61)) | (1L << (Static - 61)) | (1L << (Identifier - 61)) | (1L << (StringLiteral - 61)))) != 0)) {
				{
				State = 241; importAliasName();
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 242; Match(Comma);
					}
				}

				}
			}

			State = 247; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportAliasNameContext : ParserRuleContext {
		public ModuleExportNameContext moduleExportName() {
			return GetRuleContext<ModuleExportNameContext>(0);
		}
		public ITerminalNode As() { return GetToken(JavaScriptParser.As, 0); }
		public ImportedBindingContext importedBinding() {
			return GetRuleContext<ImportedBindingContext>(0);
		}
		public ImportAliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importAliasName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportAliasName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportAliasName(this);
		}
	}

	[RuleVersion(0)]
	public ImportAliasNameContext importAliasName() {
		ImportAliasNameContext _localctx = new ImportAliasNameContext(Context, State);
		EnterRule(_localctx, 16, RULE_importAliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; moduleExportName();
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 250; Match(As);
				State = 251; importedBinding();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleExportNameContext : ParserRuleContext {
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
		public ModuleExportNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleExportName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterModuleExportName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitModuleExportName(this);
		}
	}

	[RuleVersion(0)]
	public ModuleExportNameContext moduleExportName() {
		ModuleExportNameContext _localctx = new ModuleExportNameContext(Context, State);
		EnterRule(_localctx, 18, RULE_moduleExportName);
		try {
			State = 256;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Yield:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 254; identifierName();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 255; Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportedBindingContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
		public ITerminalNode Yield() { return GetToken(JavaScriptParser.Yield, 0); }
		public ITerminalNode Await() { return GetToken(JavaScriptParser.Await, 0); }
		public ImportedBindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importedBinding; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportedBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportedBinding(this);
		}
	}

	[RuleVersion(0)]
	public ImportedBindingContext importedBinding() {
		ImportedBindingContext _localctx = new ImportedBindingContext(Context, State);
		EnterRule(_localctx, 20, RULE_importedBinding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (Await - 108)) | (1L << (Yield - 108)) | (1L << (Identifier - 108)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDefaultContext : ParserRuleContext {
		public AliasNameContext aliasName() {
			return GetRuleContext<AliasNameContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(JavaScriptParser.Comma, 0); }
		public ImportDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDefault; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportDefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportDefault(this);
		}
	}

	[RuleVersion(0)]
	public ImportDefaultContext importDefault() {
		ImportDefaultContext _localctx = new ImportDefaultContext(Context, State);
		EnterRule(_localctx, 22, RULE_importDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; aliasName();
			State = 261; Match(Comma);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportNamespaceContext : ParserRuleContext {
		public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		public ITerminalNode As() { return GetToken(JavaScriptParser.As, 0); }
		public ImportNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importNamespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportNamespace(this);
		}
	}

	[RuleVersion(0)]
	public ImportNamespaceContext importNamespace() {
		ImportNamespaceContext _localctx = new ImportNamespaceContext(Context, State);
		EnterRule(_localctx, 24, RULE_importNamespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
				{
				State = 263; Match(Multiply);
				}
				break;
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Yield:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Identifier:
				{
				State = 264; identifierName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 267; Match(As);
				State = 268; identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromContext : ParserRuleContext {
		public ITerminalNode From() { return GetToken(JavaScriptParser.From, 0); }
		public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
		public ImportFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFrom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportFrom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportFrom(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromContext importFrom() {
		ImportFromContext _localctx = new ImportFromContext(Context, State);
		EnterRule(_localctx, 26, RULE_importFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; Match(From);
			State = 272; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasNameContext : ParserRuleContext {
		public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		public ITerminalNode As() { return GetToken(JavaScriptParser.As, 0); }
		public AliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAliasName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAliasName(this);
		}
	}

	[RuleVersion(0)]
	public AliasNameContext aliasName() {
		AliasNameContext _localctx = new AliasNameContext(Context, State);
		EnterRule(_localctx, 28, RULE_aliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; identifierName();
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 275; Match(As);
				State = 276; identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportStatementContext : ParserRuleContext {
		public ExportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportStatement; } }
	 
		public ExportStatementContext() { }
		public virtual void CopyFrom(ExportStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExportDefaultDeclarationContext : ExportStatementContext {
		public ITerminalNode Export() { return GetToken(JavaScriptParser.Export, 0); }
		public ITerminalNode Default() { return GetToken(JavaScriptParser.Default, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExportDefaultDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExportDefaultDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExportDefaultDeclaration(this);
		}
	}
	public partial class ExportDeclarationContext : ExportStatementContext {
		public ITerminalNode Export() { return GetToken(JavaScriptParser.Export, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExportFromBlockContext exportFromBlock() {
			return GetRuleContext<ExportFromBlockContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ITerminalNode Default() { return GetToken(JavaScriptParser.Default, 0); }
		public ExportDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExportDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ExportStatementContext exportStatement() {
		ExportStatementContext _localctx = new ExportStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_exportStatement);
		try {
			State = 294;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				_localctx = new ExportDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 279; Match(Export);
				State = 281;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 280; Match(Default);
					}
					break;
				}
				State = 285;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 283; exportFromBlock();
					}
					break;
				case 2:
					{
					State = 284; declaration();
					}
					break;
				}
				State = 287; eos();
				}
				break;
			case 2:
				_localctx = new ExportDefaultDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 289; Match(Export);
				State = 290; Match(Default);
				State = 291; singleExpression(0);
				State = 292; eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportFromBlockContext : ParserRuleContext {
		public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExportModuleItemsContext exportModuleItems() {
			return GetRuleContext<ExportModuleItemsContext>(0);
		}
		public ExportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportFromBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExportFromBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExportFromBlock(this);
		}
	}

	[RuleVersion(0)]
	public ExportFromBlockContext exportFromBlock() {
		ExportFromBlockContext _localctx = new ExportFromBlockContext(Context, State);
		EnterRule(_localctx, 32, RULE_exportFromBlock);
		try {
			State = 306;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Yield:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 296; importNamespace();
				State = 297; importFrom();
				State = 298; eos();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 300; exportModuleItems();
				State = 302;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 301; importFrom();
					}
					break;
				}
				State = 304; eos();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportModuleItemsContext : ParserRuleContext {
		public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		public ExportAliasNameContext[] exportAliasName() {
			return GetRuleContexts<ExportAliasNameContext>();
		}
		public ExportAliasNameContext exportAliasName(int i) {
			return GetRuleContext<ExportAliasNameContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ExportModuleItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportModuleItems; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExportModuleItems(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExportModuleItems(this);
		}
	}

	[RuleVersion(0)]
	public ExportModuleItemsContext exportModuleItems() {
		ExportModuleItemsContext _localctx = new ExportModuleItemsContext(Context, State);
		EnterRule(_localctx, 34, RULE_exportModuleItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; Match(OpenBrace);
			State = 314;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 309; exportAliasName();
					State = 310; Match(Comma);
					}
					} 
				}
				State = 316;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (NullLiteral - 61)) | (1L << (BooleanLiteral - 61)) | (1L << (Break - 61)) | (1L << (Do - 61)) | (1L << (Instanceof - 61)) | (1L << (Typeof - 61)) | (1L << (Case - 61)) | (1L << (Else - 61)) | (1L << (New - 61)) | (1L << (Var - 61)) | (1L << (Catch - 61)) | (1L << (Finally - 61)) | (1L << (Return - 61)) | (1L << (Void - 61)) | (1L << (Continue - 61)) | (1L << (For - 61)) | (1L << (Switch - 61)) | (1L << (While - 61)) | (1L << (Debugger - 61)) | (1L << (Function_ - 61)) | (1L << (This - 61)) | (1L << (With - 61)) | (1L << (Default - 61)) | (1L << (If - 61)) | (1L << (Throw - 61)) | (1L << (Delete - 61)) | (1L << (In - 61)) | (1L << (Try - 61)) | (1L << (As - 61)) | (1L << (From - 61)) | (1L << (Class - 61)) | (1L << (Enum - 61)) | (1L << (Extends - 61)) | (1L << (Super - 61)) | (1L << (Const - 61)) | (1L << (Export - 61)) | (1L << (Import - 61)) | (1L << (Async - 61)) | (1L << (Await - 61)) | (1L << (Yield - 61)) | (1L << (Implements - 61)) | (1L << (StrictLet - 61)) | (1L << (NonStrictLet - 61)) | (1L << (Private - 61)) | (1L << (Public - 61)) | (1L << (Interface - 61)) | (1L << (Package - 61)) | (1L << (Protected - 61)) | (1L << (Static - 61)) | (1L << (Identifier - 61)) | (1L << (StringLiteral - 61)))) != 0)) {
				{
				State = 317; exportAliasName();
				State = 319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 318; Match(Comma);
					}
				}

				}
			}

			State = 323; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportAliasNameContext : ParserRuleContext {
		public ModuleExportNameContext[] moduleExportName() {
			return GetRuleContexts<ModuleExportNameContext>();
		}
		public ModuleExportNameContext moduleExportName(int i) {
			return GetRuleContext<ModuleExportNameContext>(i);
		}
		public ITerminalNode As() { return GetToken(JavaScriptParser.As, 0); }
		public ExportAliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportAliasName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExportAliasName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExportAliasName(this);
		}
	}

	[RuleVersion(0)]
	public ExportAliasNameContext exportAliasName() {
		ExportAliasNameContext _localctx = new ExportAliasNameContext(Context, State);
		EnterRule(_localctx, 36, RULE_exportAliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325; moduleExportName();
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 326; Match(As);
				State = 327; moduleExportName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_declaration);
		try {
			State = 333;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Var:
			case Const:
			case StrictLet:
			case NonStrictLet:
				EnterOuterAlt(_localctx, 1);
				{
				State = 330; variableStatement();
				}
				break;
			case Class:
				EnterOuterAlt(_localctx, 2);
				{
				State = 331; classDeclaration();
				}
				break;
			case Function_:
			case Async:
				EnterOuterAlt(_localctx, 3);
				{
				State = 332; functionDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStatementContext : ParserRuleContext {
		public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public VariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableStatement(this);
		}
	}

	[RuleVersion(0)]
	public VariableStatementContext variableStatement() {
		VariableStatementContext _localctx = new VariableStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_variableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335; variableDeclarationList();
			State = 336; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationListContext : ParserRuleContext {
		public VarModifierContext varModifier() {
			return GetRuleContext<VarModifierContext>(0);
		}
		public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationList(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationListContext variableDeclarationList() {
		VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
		EnterRule(_localctx, 42, RULE_variableDeclarationList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 338; varModifier();
			State = 339; variableDeclaration();
			State = 344;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 340; Match(Comma);
					State = 341; variableDeclaration();
					}
					} 
				}
				State = 346;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		public ITerminalNode Assign() { return GetToken(JavaScriptParser.Assign, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; assignable();
			State = 350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 348; Match(Assign);
				State = 349; singleExpression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatement_Context : ParserRuleContext {
		public ITerminalNode SemiColon() { return GetToken(JavaScriptParser.SemiColon, 0); }
		public EmptyStatement_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement_(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatement_Context emptyStatement_() {
		EmptyStatement_Context _localctx = new EmptyStatement_Context(Context, State);
		EnterRule(_localctx, 46, RULE_emptyStatement_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352; Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			if (!(this.notOpenBraceAndNotFunction())) throw new FailedPredicateException(this, "this.notOpenBraceAndNotFunction()");
			State = 355; expressionSequence();
			State = 356; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(JavaScriptParser.If, 0); }
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode Else() { return GetToken(JavaScriptParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358; Match(If);
			State = 359; Match(OpenParen);
			State = 360; expressionSequence();
			State = 361; Match(CloseParen);
			State = 362; statement();
			State = 365;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 363; Match(Else);
				State = 364; statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
	 
		public IterationStatementContext() { }
		public virtual void CopyFrom(IterationStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DoStatementContext : IterationStatementContext {
		public ITerminalNode Do() { return GetToken(JavaScriptParser.Do, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode While() { return GetToken(JavaScriptParser.While, 0); }
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public DoStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
	}
	public partial class WhileStatementContext : IterationStatementContext {
		public ITerminalNode While() { return GetToken(JavaScriptParser.While, 0); }
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}
	public partial class ForStatementContext : IterationStatementContext {
		public ITerminalNode For() { return GetToken(JavaScriptParser.For, 0); }
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ITerminalNode[] SemiColon() { return GetTokens(JavaScriptParser.SemiColon); }
		public ITerminalNode SemiColon(int i) {
			return GetToken(JavaScriptParser.SemiColon, i);
		}
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionSequenceContext[] expressionSequence() {
			return GetRuleContexts<ExpressionSequenceContext>();
		}
		public ExpressionSequenceContext expressionSequence(int i) {
			return GetRuleContext<ExpressionSequenceContext>(i);
		}
		public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		public ForStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}
	public partial class ForInStatementContext : IterationStatementContext {
		public ITerminalNode For() { return GetToken(JavaScriptParser.For, 0); }
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ITerminalNode In() { return GetToken(JavaScriptParser.In, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		public ForInStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterForInStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitForInStatement(this);
		}
	}
	public partial class ForOfStatementContext : IterationStatementContext {
		public ITerminalNode For() { return GetToken(JavaScriptParser.For, 0); }
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		public ITerminalNode Await() { return GetToken(JavaScriptParser.Await, 0); }
		public ForOfStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterForOfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitForOfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_iterationStatement);
		int _la;
		try {
			State = 423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				_localctx = new DoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 367; Match(Do);
				State = 368; statement();
				State = 369; Match(While);
				State = 370; Match(OpenParen);
				State = 371; expressionSequence();
				State = 372; Match(CloseParen);
				State = 373; eos();
				}
				break;
			case 2:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 375; Match(While);
				State = 376; Match(OpenParen);
				State = 377; expressionSequence();
				State = 378; Match(CloseParen);
				State = 379; statement();
				}
				break;
			case 3:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 381; Match(For);
				State = 382; Match(OpenParen);
				State = 385;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 383; expressionSequence();
					}
					break;
				case 2:
					{
					State = 384; variableDeclarationList();
					}
					break;
				}
				State = 387; Match(SemiColon);
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (HexIntegerLiteral - 64)) | (1L << (OctalIntegerLiteral - 64)) | (1L << (OctalIntegerLiteral2 - 64)) | (1L << (BinaryIntegerLiteral - 64)) | (1L << (BigHexIntegerLiteral - 64)) | (1L << (BigOctalIntegerLiteral - 64)) | (1L << (BigBinaryIntegerLiteral - 64)) | (1L << (BigDecimalIntegerLiteral - 64)) | (1L << (Typeof - 64)) | (1L << (New - 64)) | (1L << (Void - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (Delete - 64)) | (1L << (As - 64)) | (1L << (From - 64)) | (1L << (Class - 64)) | (1L << (Super - 64)) | (1L << (Import - 64)) | (1L << (Async - 64)) | (1L << (Await - 64)) | (1L << (Yield - 64)) | (1L << (NonStrictLet - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (BackTick - 64)))) != 0)) {
					{
					State = 388; expressionSequence();
					}
				}

				State = 391; Match(SemiColon);
				State = 393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (HexIntegerLiteral - 64)) | (1L << (OctalIntegerLiteral - 64)) | (1L << (OctalIntegerLiteral2 - 64)) | (1L << (BinaryIntegerLiteral - 64)) | (1L << (BigHexIntegerLiteral - 64)) | (1L << (BigOctalIntegerLiteral - 64)) | (1L << (BigBinaryIntegerLiteral - 64)) | (1L << (BigDecimalIntegerLiteral - 64)) | (1L << (Typeof - 64)) | (1L << (New - 64)) | (1L << (Void - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (Delete - 64)) | (1L << (As - 64)) | (1L << (From - 64)) | (1L << (Class - 64)) | (1L << (Super - 64)) | (1L << (Import - 64)) | (1L << (Async - 64)) | (1L << (Await - 64)) | (1L << (Yield - 64)) | (1L << (NonStrictLet - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (BackTick - 64)))) != 0)) {
					{
					State = 392; expressionSequence();
					}
				}

				State = 395; Match(CloseParen);
				State = 396; statement();
				}
				break;
			case 4:
				_localctx = new ForInStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 397; Match(For);
				State = 398; Match(OpenParen);
				State = 401;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 399; singleExpression(0);
					}
					break;
				case 2:
					{
					State = 400; variableDeclarationList();
					}
					break;
				}
				State = 403; Match(In);
				State = 404; expressionSequence();
				State = 405; Match(CloseParen);
				State = 406; statement();
				}
				break;
			case 5:
				_localctx = new ForOfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 408; Match(For);
				State = 410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Await) {
					{
					State = 409; Match(Await);
					}
				}

				State = 412; Match(OpenParen);
				State = 415;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 413; singleExpression(0);
					}
					break;
				case 2:
					{
					State = 414; variableDeclarationList();
					}
					break;
				}
				State = 417; identifier();
				State = 418;
				if (!(this.p("of"))) throw new FailedPredicateException(this, "this.p(\"of\")");
				State = 419; expressionSequence();
				State = 420; Match(CloseParen);
				State = 421; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarModifierContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(JavaScriptParser.Var, 0); }
		public Let_Context let_() {
			return GetRuleContext<Let_Context>(0);
		}
		public ITerminalNode Const() { return GetToken(JavaScriptParser.Const, 0); }
		public VarModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVarModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVarModifier(this);
		}
	}

	[RuleVersion(0)]
	public VarModifierContext varModifier() {
		VarModifierContext _localctx = new VarModifierContext(Context, State);
		EnterRule(_localctx, 54, RULE_varModifier);
		try {
			State = 428;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Var:
				EnterOuterAlt(_localctx, 1);
				{
				State = 425; Match(Var);
				}
				break;
			case StrictLet:
			case NonStrictLet:
				EnterOuterAlt(_localctx, 2);
				{
				State = 426; let_();
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 3);
				{
				State = 427; Match(Const);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ITerminalNode Continue() { return GetToken(JavaScriptParser.Continue, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430; Match(Continue);
			State = 433;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 431;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 432; identifier();
				}
				break;
			}
			State = 435; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public ITerminalNode Break() { return GetToken(JavaScriptParser.Break, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437; Match(Break);
			State = 440;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 438;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 439; identifier();
				}
				break;
			}
			State = 442; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode Return() { return GetToken(JavaScriptParser.Return, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444; Match(Return);
			State = 447;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 445;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 446; expressionSequence();
				}
				break;
			}
			State = 449; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YieldStatementContext : ParserRuleContext {
		public ITerminalNode Yield() { return GetToken(JavaScriptParser.Yield, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public YieldStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yieldStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterYieldStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitYieldStatement(this);
		}
	}

	[RuleVersion(0)]
	public YieldStatementContext yieldStatement() {
		YieldStatementContext _localctx = new YieldStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_yieldStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; Match(Yield);
			State = 454;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 452;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 453; expressionSequence();
				}
				break;
			}
			State = 456; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStatementContext : ParserRuleContext {
		public ITerminalNode With() { return GetToken(JavaScriptParser.With, 0); }
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WithStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterWithStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitWithStatement(this);
		}
	}

	[RuleVersion(0)]
	public WithStatementContext withStatement() {
		WithStatementContext _localctx = new WithStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_withStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458; Match(With);
			State = 459; Match(OpenParen);
			State = 460; expressionSequence();
			State = 461; Match(CloseParen);
			State = 462; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public ITerminalNode Switch() { return GetToken(JavaScriptParser.Switch, 0); }
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464; Match(Switch);
			State = 465; Match(OpenParen);
			State = 466; expressionSequence();
			State = 467; Match(CloseParen);
			State = 468; caseBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		public CaseClausesContext[] caseClauses() {
			return GetRuleContexts<CaseClausesContext>();
		}
		public CaseClausesContext caseClauses(int i) {
			return GetRuleContext<CaseClausesContext>(i);
		}
		public DefaultClauseContext defaultClause() {
			return GetRuleContext<DefaultClauseContext>(0);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 68, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470; Match(OpenBrace);
			State = 472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Case) {
				{
				State = 471; caseClauses();
				}
			}

			State = 478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Default) {
				{
				State = 474; defaultClause();
				State = 476;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Case) {
					{
					State = 475; caseClauses();
					}
				}

				}
			}

			State = 480; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClausesContext : ParserRuleContext {
		public CaseClauseContext[] caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public CaseClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseClauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseClauses(this);
		}
	}

	[RuleVersion(0)]
	public CaseClausesContext caseClauses() {
		CaseClausesContext _localctx = new CaseClausesContext(Context, State);
		EnterRule(_localctx, 70, RULE_caseClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 482; caseClause();
				}
				}
				State = 485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Case );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		public ITerminalNode Case() { return GetToken(JavaScriptParser.Case, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseClause(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(Context, State);
		EnterRule(_localctx, 72, RULE_caseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487; Match(Case);
			State = 488; expressionSequence();
			State = 489; Match(Colon);
			State = 491;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 490; statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultClauseContext : ParserRuleContext {
		public ITerminalNode Default() { return GetToken(JavaScriptParser.Default, 0); }
		public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public DefaultClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterDefaultClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitDefaultClause(this);
		}
	}

	[RuleVersion(0)]
	public DefaultClauseContext defaultClause() {
		DefaultClauseContext _localctx = new DefaultClauseContext(Context, State);
		EnterRule(_localctx, 74, RULE_defaultClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493; Match(Default);
			State = 494; Match(Colon);
			State = 496;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 495; statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelledStatementContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabelledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelledStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLabelledStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLabelledStatement(this);
		}
	}

	[RuleVersion(0)]
	public LabelledStatementContext labelledStatement() {
		LabelledStatementContext _localctx = new LabelledStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_labelledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498; identifier();
			State = 499; Match(Colon);
			State = 500; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		public ITerminalNode Throw() { return GetToken(JavaScriptParser.Throw, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502; Match(Throw);
			State = 503;
			if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
			State = 504; expressionSequence();
			State = 505; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		public ITerminalNode Try() { return GetToken(JavaScriptParser.Try, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchProductionContext catchProduction() {
			return GetRuleContext<CatchProductionContext>(0);
		}
		public FinallyProductionContext finallyProduction() {
			return GetRuleContext<FinallyProductionContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_tryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507; Match(Try);
			State = 508; block();
			State = 514;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Catch:
				{
				State = 509; catchProduction();
				State = 511;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
				case 1:
					{
					State = 510; finallyProduction();
					}
					break;
				}
				}
				break;
			case Finally:
				{
				State = 513; finallyProduction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchProductionContext : ParserRuleContext {
		public ITerminalNode Catch() { return GetToken(JavaScriptParser.Catch, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		public CatchProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchProduction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCatchProduction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCatchProduction(this);
		}
	}

	[RuleVersion(0)]
	public CatchProductionContext catchProduction() {
		CatchProductionContext _localctx = new CatchProductionContext(Context, State);
		EnterRule(_localctx, 82, RULE_catchProduction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516; Match(Catch);
			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpenParen) {
				{
				State = 517; Match(OpenParen);
				State = 519;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpenBracket || _la==OpenBrace || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (As - 98)) | (1L << (From - 98)) | (1L << (Async - 98)) | (1L << (NonStrictLet - 98)) | (1L << (Identifier - 98)))) != 0)) {
					{
					State = 518; assignable();
					}
				}

				State = 521; Match(CloseParen);
				}
			}

			State = 524; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyProductionContext : ParserRuleContext {
		public ITerminalNode Finally() { return GetToken(JavaScriptParser.Finally, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FinallyProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyProduction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFinallyProduction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFinallyProduction(this);
		}
	}

	[RuleVersion(0)]
	public FinallyProductionContext finallyProduction() {
		FinallyProductionContext _localctx = new FinallyProductionContext(Context, State);
		EnterRule(_localctx, 84, RULE_finallyProduction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526; Match(Finally);
			State = 527; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebuggerStatementContext : ParserRuleContext {
		public ITerminalNode Debugger() { return GetToken(JavaScriptParser.Debugger, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public DebuggerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debuggerStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterDebuggerStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitDebuggerStatement(this);
		}
	}

	[RuleVersion(0)]
	public DebuggerStatementContext debuggerStatement() {
		DebuggerStatementContext _localctx = new DebuggerStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_debuggerStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529; Match(Debugger);
			State = 530; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public ITerminalNode Function_() { return GetToken(JavaScriptParser.Function_, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 88, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Async) {
				{
				State = 532; Match(Async);
				}
			}

			State = 535; Match(Function_);
			State = 537;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Multiply) {
				{
				State = 536; Match(Multiply);
				}
			}

			State = 539; identifier();
			State = 540; Match(OpenParen);
			State = 542;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (As - 98)) | (1L << (From - 98)) | (1L << (Async - 98)) | (1L << (NonStrictLet - 98)) | (1L << (Identifier - 98)))) != 0)) {
				{
				State = 541; formalParameterList();
				}
			}

			State = 544; Match(CloseParen);
			State = 545; functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(JavaScriptParser.Class, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 90, RULE_classDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547; Match(Class);
			State = 548; identifier();
			State = 549; classTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTailContext : ParserRuleContext {
		public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		public ITerminalNode Extends() { return GetToken(JavaScriptParser.Extends, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ClassElementContext[] classElement() {
			return GetRuleContexts<ClassElementContext>();
		}
		public ClassElementContext classElement(int i) {
			return GetRuleContext<ClassElementContext>(i);
		}
		public ClassTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTail; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterClassTail(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitClassTail(this);
		}
	}

	[RuleVersion(0)]
	public ClassTailContext classTail() {
		ClassTailContext _localctx = new ClassTailContext(Context, State);
		EnterRule(_localctx, 92, RULE_classTail);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Extends) {
				{
				State = 551; Match(Extends);
				State = 552; singleExpression(0);
				}
			}

			State = 555; Match(OpenBrace);
			State = 559;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 556; classElement();
					}
					} 
				}
				State = 561;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			State = 562; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassElementContext : ParserRuleContext {
		public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		public ITerminalNode Static() { return GetToken(JavaScriptParser.Static, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FieldDefinitionContext fieldDefinition() {
			return GetRuleContext<FieldDefinitionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public EmptyStatement_Context emptyStatement_() {
			return GetRuleContext<EmptyStatement_Context>(0);
		}
		public ClassElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterClassElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitClassElement(this);
		}
	}

	[RuleVersion(0)]
	public ClassElementContext classElement() {
		ClassElementContext _localctx = new ClassElementContext(Context, State);
		EnterRule(_localctx, 94, RULE_classElement);
		try {
			State = 583;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 567;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
				case 1:
					{
					State = 564; Match(Static);
					}
					break;
				case 2:
					{
					State = 565;
					if (!(this.n("static"))) throw new FailedPredicateException(this, "this.n(\"static\")");
					State = 566; identifier();
					}
					break;
				}
				State = 569; methodDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 573;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 570; Match(Static);
					}
					break;
				case 2:
					{
					State = 571;
					if (!(this.n("static"))) throw new FailedPredicateException(this, "this.n(\"static\")");
					State = 572; identifier();
					}
					break;
				}
				State = 575; fieldDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 579;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 576; Match(Static);
					}
					break;
				case 2:
					{
					State = 577;
					if (!(this.n("static"))) throw new FailedPredicateException(this, "this.n(\"static\")");
					State = 578; identifier();
					}
					break;
				}
				State = 581; block();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 582; emptyStatement_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefinitionContext : ParserRuleContext {
		public ClassElementNameContext classElementName() {
			return GetRuleContext<ClassElementNameContext>(0);
		}
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public GetterContext getter() {
			return GetRuleContext<GetterContext>(0);
		}
		public SetterContext setter() {
			return GetRuleContext<SetterContext>(0);
		}
		public MethodDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterMethodDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitMethodDefinition(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefinitionContext methodDefinition() {
		MethodDefinitionContext _localctx = new MethodDefinitionContext(Context, State);
		EnterRule(_localctx, 96, RULE_methodDefinition);
		int _la;
		try {
			State = 619;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 587;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
				case 1:
					{
					State = 585; Match(Async);
					State = 586;
					if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
					}
					break;
				}
				State = 590;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply) {
					{
					State = 589; Match(Multiply);
					}
				}

				State = 592; classElementName();
				State = 593; Match(OpenParen);
				State = 595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (As - 98)) | (1L << (From - 98)) | (1L << (Async - 98)) | (1L << (NonStrictLet - 98)) | (1L << (Identifier - 98)))) != 0)) {
					{
					State = 594; formalParameterList();
					}
				}

				State = 597; Match(CloseParen);
				State = 598; functionBody();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 601;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
				case 1:
					{
					State = 600; Match(Multiply);
					}
					break;
				}
				State = 603; getter();
				State = 604; Match(OpenParen);
				State = 605; Match(CloseParen);
				State = 606; functionBody();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 609;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
				case 1:
					{
					State = 608; Match(Multiply);
					}
					break;
				}
				State = 611; setter();
				State = 612; Match(OpenParen);
				State = 614;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (As - 98)) | (1L << (From - 98)) | (1L << (Async - 98)) | (1L << (NonStrictLet - 98)) | (1L << (Identifier - 98)))) != 0)) {
					{
					State = 613; formalParameterList();
					}
				}

				State = 616; Match(CloseParen);
				State = 617; functionBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		public ClassElementNameContext classElementName() {
			return GetRuleContext<ClassElementNameContext>(0);
		}
		public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFieldDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFieldDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(Context, State);
		EnterRule(_localctx, 98, RULE_fieldDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621; classElementName();
			State = 623;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 622; initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassElementNameContext : ParserRuleContext {
		public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public PrivateIdentifierContext privateIdentifier() {
			return GetRuleContext<PrivateIdentifierContext>(0);
		}
		public ClassElementNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classElementName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterClassElementName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitClassElementName(this);
		}
	}

	[RuleVersion(0)]
	public ClassElementNameContext classElementName() {
		ClassElementNameContext _localctx = new ClassElementNameContext(Context, State);
		EnterRule(_localctx, 100, RULE_classElementName);
		try {
			State = 627;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracket:
			case NullLiteral:
			case BooleanLiteral:
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Yield:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Identifier:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 625; propertyName();
				}
				break;
			case Hashtag:
				EnterOuterAlt(_localctx, 2);
				{
				State = 626; privateIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivateIdentifierContext : ParserRuleContext {
		public ITerminalNode Hashtag() { return GetToken(JavaScriptParser.Hashtag, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public PrivateIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privateIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPrivateIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPrivateIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public PrivateIdentifierContext privateIdentifier() {
		PrivateIdentifierContext _localctx = new PrivateIdentifierContext(Context, State);
		EnterRule(_localctx, 102, RULE_privateIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629; Match(Hashtag);
			State = 630; identifierName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public FormalParameterArgContext[] formalParameterArg() {
			return GetRuleContexts<FormalParameterArgContext>();
		}
		public FormalParameterArgContext formalParameterArg(int i) {
			return GetRuleContext<FormalParameterArgContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public LastFormalParameterArgContext lastFormalParameterArg() {
			return GetRuleContext<LastFormalParameterArgContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 104, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			State = 645;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracket:
			case OpenBrace:
			case As:
			case From:
			case Async:
			case NonStrictLet:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 632; formalParameterArg();
				State = 637;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 633; Match(Comma);
						State = 634; formalParameterArg();
						}
						} 
					}
					State = 639;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
				}
				State = 642;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 640; Match(Comma);
					State = 641; lastFormalParameterArg();
					}
				}

				}
				break;
			case Ellipsis:
				EnterOuterAlt(_localctx, 2);
				{
				State = 644; lastFormalParameterArg();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterArgContext : ParserRuleContext {
		public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		public ITerminalNode Assign() { return GetToken(JavaScriptParser.Assign, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public FormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterArg(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterArgContext formalParameterArg() {
		FormalParameterArgContext _localctx = new FormalParameterArgContext(Context, State);
		EnterRule(_localctx, 106, RULE_formalParameterArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 647; assignable();
			State = 650;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 648; Match(Assign);
				State = 649; singleExpression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterArgContext : ParserRuleContext {
		public ITerminalNode Ellipsis() { return GetToken(JavaScriptParser.Ellipsis, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public LastFormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameterArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLastFormalParameterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLastFormalParameterArg(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterArgContext lastFormalParameterArg() {
		LastFormalParameterArgContext _localctx = new LastFormalParameterArgContext(Context, State);
		EnterRule(_localctx, 108, RULE_lastFormalParameterArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652; Match(Ellipsis);
			State = 653; singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 110, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 655; Match(OpenBrace);
			State = 657;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 656; sourceElements();
				}
				break;
			}
			State = 659; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementsContext : ParserRuleContext {
		public SourceElementContext[] sourceElement() {
			return GetRuleContexts<SourceElementContext>();
		}
		public SourceElementContext sourceElement(int i) {
			return GetRuleContext<SourceElementContext>(i);
		}
		public SourceElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSourceElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSourceElements(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementsContext sourceElements() {
		SourceElementsContext _localctx = new SourceElementsContext(Context, State);
		EnterRule(_localctx, 112, RULE_sourceElements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 662;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 661; sourceElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 664;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		public ITerminalNode OpenBracket() { return GetToken(JavaScriptParser.OpenBracket, 0); }
		public ElementListContext elementList() {
			return GetRuleContext<ElementListContext>(0);
		}
		public ITerminalNode CloseBracket() { return GetToken(JavaScriptParser.CloseBracket, 0); }
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 114, RULE_arrayLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 666; Match(OpenBracket);
			State = 667; elementList();
			State = 668; Match(CloseBracket);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementListContext : ParserRuleContext {
		public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ArrayElementContext[] arrayElement() {
			return GetRuleContexts<ArrayElementContext>();
		}
		public ArrayElementContext arrayElement(int i) {
			return GetRuleContext<ArrayElementContext>(i);
		}
		public ElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterElementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitElementList(this);
		}
	}

	[RuleVersion(0)]
	public ElementListContext elementList() {
		ElementListContext _localctx = new ElementListContext(Context, State);
		EnterRule(_localctx, 116, RULE_elementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 673;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 670; Match(Comma);
					}
					} 
				}
				State = 675;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			State = 677;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (HexIntegerLiteral - 64)) | (1L << (OctalIntegerLiteral - 64)) | (1L << (OctalIntegerLiteral2 - 64)) | (1L << (BinaryIntegerLiteral - 64)) | (1L << (BigHexIntegerLiteral - 64)) | (1L << (BigOctalIntegerLiteral - 64)) | (1L << (BigBinaryIntegerLiteral - 64)) | (1L << (BigDecimalIntegerLiteral - 64)) | (1L << (Typeof - 64)) | (1L << (New - 64)) | (1L << (Void - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (Delete - 64)) | (1L << (As - 64)) | (1L << (From - 64)) | (1L << (Class - 64)) | (1L << (Super - 64)) | (1L << (Import - 64)) | (1L << (Async - 64)) | (1L << (Await - 64)) | (1L << (Yield - 64)) | (1L << (NonStrictLet - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (BackTick - 64)))) != 0)) {
				{
				State = 676; arrayElement();
				}
			}

			State = 687;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 680;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 679; Match(Comma);
						}
						}
						State = 682;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==Comma );
					State = 684; arrayElement();
					}
					} 
				}
				State = 689;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			}
			State = 693;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 690; Match(Comma);
				}
				}
				State = 695;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementContext : ParserRuleContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(JavaScriptParser.Ellipsis, 0); }
		public ArrayElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayElement(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementContext arrayElement() {
		ArrayElementContext _localctx = new ArrayElementContext(Context, State);
		EnterRule(_localctx, 118, RULE_arrayElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 696; Match(Ellipsis);
				}
			}

			State = 699; singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAssignmentContext : ParserRuleContext {
		public PropertyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAssignment; } }
	 
		public PropertyAssignmentContext() { }
		public virtual void CopyFrom(PropertyAssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropertyExpressionAssignmentContext : PropertyAssignmentContext {
		public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyExpressionAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyExpressionAssignment(this);
		}
	}
	public partial class ComputedPropertyExpressionAssignmentContext : PropertyAssignmentContext {
		public ITerminalNode OpenBracket() { return GetToken(JavaScriptParser.OpenBracket, 0); }
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode CloseBracket() { return GetToken(JavaScriptParser.CloseBracket, 0); }
		public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		public ComputedPropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterComputedPropertyExpressionAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitComputedPropertyExpressionAssignment(this);
		}
	}
	public partial class PropertyShorthandContext : PropertyAssignmentContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(JavaScriptParser.Ellipsis, 0); }
		public PropertyShorthandContext(PropertyAssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyShorthand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyShorthand(this);
		}
	}
	public partial class PropertySetterContext : PropertyAssignmentContext {
		public SetterContext setter() {
			return GetRuleContext<SetterContext>(0);
		}
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public FormalParameterArgContext formalParameterArg() {
			return GetRuleContext<FormalParameterArgContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public PropertySetterContext(PropertyAssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertySetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertySetter(this);
		}
	}
	public partial class PropertyGetterContext : PropertyAssignmentContext {
		public GetterContext getter() {
			return GetRuleContext<GetterContext>(0);
		}
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public PropertyGetterContext(PropertyAssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyGetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyGetter(this);
		}
	}
	public partial class FunctionPropertyContext : PropertyAssignmentContext {
		public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionPropertyContext(PropertyAssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionProperty(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAssignmentContext propertyAssignment() {
		PropertyAssignmentContext _localctx = new PropertyAssignmentContext(Context, State);
		EnterRule(_localctx, 120, RULE_propertyAssignment);
		int _la;
		try {
			State = 740;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				_localctx = new PropertyExpressionAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 701; propertyName();
				State = 702; Match(Colon);
				State = 703; singleExpression(0);
				}
				break;
			case 2:
				_localctx = new ComputedPropertyExpressionAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 705; Match(OpenBracket);
				State = 706; singleExpression(0);
				State = 707; Match(CloseBracket);
				State = 708; Match(Colon);
				State = 709; singleExpression(0);
				}
				break;
			case 3:
				_localctx = new FunctionPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 712;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
				case 1:
					{
					State = 711; Match(Async);
					}
					break;
				}
				State = 715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply) {
					{
					State = 714; Match(Multiply);
					}
				}

				State = 717; propertyName();
				State = 718; Match(OpenParen);
				State = 720;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (As - 98)) | (1L << (From - 98)) | (1L << (Async - 98)) | (1L << (NonStrictLet - 98)) | (1L << (Identifier - 98)))) != 0)) {
					{
					State = 719; formalParameterList();
					}
				}

				State = 722; Match(CloseParen);
				State = 723; functionBody();
				}
				break;
			case 4:
				_localctx = new PropertyGetterContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 725; getter();
				State = 726; Match(OpenParen);
				State = 727; Match(CloseParen);
				State = 728; functionBody();
				}
				break;
			case 5:
				_localctx = new PropertySetterContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 730; setter();
				State = 731; Match(OpenParen);
				State = 732; formalParameterArg();
				State = 733; Match(CloseParen);
				State = 734; functionBody();
				}
				break;
			case 6:
				_localctx = new PropertyShorthandContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 737;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 736; Match(Ellipsis);
					}
				}

				State = 739; singleExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
		public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public ITerminalNode OpenBracket() { return GetToken(JavaScriptParser.OpenBracket, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ITerminalNode CloseBracket() { return GetToken(JavaScriptParser.CloseBracket, 0); }
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyName(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 122, RULE_propertyName);
		try {
			State = 749;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Yield:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 742; identifierName();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 743; Match(StringLiteral);
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 744; numericLiteral();
				}
				break;
			case OpenBracket:
				EnterOuterAlt(_localctx, 4);
				{
				State = 745; Match(OpenBracket);
				State = 746; singleExpression(0);
				State = 747; Match(CloseBracket);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 124, RULE_arguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 751; Match(OpenParen);
			State = 763;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (HexIntegerLiteral - 64)) | (1L << (OctalIntegerLiteral - 64)) | (1L << (OctalIntegerLiteral2 - 64)) | (1L << (BinaryIntegerLiteral - 64)) | (1L << (BigHexIntegerLiteral - 64)) | (1L << (BigOctalIntegerLiteral - 64)) | (1L << (BigBinaryIntegerLiteral - 64)) | (1L << (BigDecimalIntegerLiteral - 64)) | (1L << (Typeof - 64)) | (1L << (New - 64)) | (1L << (Void - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (Delete - 64)) | (1L << (As - 64)) | (1L << (From - 64)) | (1L << (Class - 64)) | (1L << (Super - 64)) | (1L << (Import - 64)) | (1L << (Async - 64)) | (1L << (Await - 64)) | (1L << (Yield - 64)) | (1L << (NonStrictLet - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (BackTick - 64)))) != 0)) {
				{
				State = 752; argument();
				State = 757;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 753; Match(Comma);
						State = 754; argument();
						}
						} 
					}
					State = 759;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
				}
				State = 761;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 760; Match(Comma);
					}
				}

				}
			}

			State = 765; Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(JavaScriptParser.Ellipsis, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 126, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 768;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 767; Match(Ellipsis);
				}
			}

			State = 772;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				State = 770; singleExpression(0);
				}
				break;
			case 2:
				{
				State = 771; identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSequenceContext : ParserRuleContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ExpressionSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExpressionSequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExpressionSequence(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSequenceContext expressionSequence() {
		ExpressionSequenceContext _localctx = new ExpressionSequenceContext(Context, State);
		EnterRule(_localctx, 128, RULE_expressionSequence);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 774; singleExpression(0);
			State = 779;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 775; Match(Comma);
					State = 776; singleExpression(0);
					}
					} 
				}
				State = 781;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleExpressionContext : ParserRuleContext {
		public SingleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleExpression; } }
	 
		public SingleExpressionContext() { }
		public virtual void CopyFrom(SingleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TemplateStringExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public TemplateStringLiteralContext templateStringLiteral() {
			return GetRuleContext<TemplateStringLiteralContext>(0);
		}
		public TemplateStringExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterTemplateStringExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitTemplateStringExpression(this);
		}
	}
	public partial class TernaryExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode QuestionMark() { return GetToken(JavaScriptParser.QuestionMark, 0); }
		public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		public TernaryExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterTernaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitTernaryExpression(this);
		}
	}
	public partial class LogicalAndExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode And() { return GetToken(JavaScriptParser.And, 0); }
		public LogicalAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
	}
	public partial class PowerExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode Power() { return GetToken(JavaScriptParser.Power, 0); }
		public PowerExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPowerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPowerExpression(this);
		}
	}
	public partial class PreIncrementExpressionContext : SingleExpressionContext {
		public ITerminalNode PlusPlus() { return GetToken(JavaScriptParser.PlusPlus, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPreIncrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPreIncrementExpression(this);
		}
	}
	public partial class ObjectLiteralExpressionContext : SingleExpressionContext {
		public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public ObjectLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterObjectLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitObjectLiteralExpression(this);
		}
	}
	public partial class MetaExpressionContext : SingleExpressionContext {
		public ITerminalNode New() { return GetToken(JavaScriptParser.New, 0); }
		public ITerminalNode Dot() { return GetToken(JavaScriptParser.Dot, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MetaExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterMetaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitMetaExpression(this);
		}
	}
	public partial class InExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode In() { return GetToken(JavaScriptParser.In, 0); }
		public InExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
	}
	public partial class LogicalOrExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode Or() { return GetToken(JavaScriptParser.Or, 0); }
		public LogicalOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
	}
	public partial class OptionalChainExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode QuestionMarkDot() { return GetToken(JavaScriptParser.QuestionMarkDot, 0); }
		public OptionalChainExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterOptionalChainExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitOptionalChainExpression(this);
		}
	}
	public partial class NotExpressionContext : SingleExpressionContext {
		public ITerminalNode Not() { return GetToken(JavaScriptParser.Not, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public NotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
	}
	public partial class PreDecreaseExpressionContext : SingleExpressionContext {
		public ITerminalNode MinusMinus() { return GetToken(JavaScriptParser.MinusMinus, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPreDecreaseExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPreDecreaseExpression(this);
		}
	}
	public partial class ArgumentsExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ArgumentsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArgumentsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArgumentsExpression(this);
		}
	}
	public partial class AwaitExpressionContext : SingleExpressionContext {
		public ITerminalNode Await() { return GetToken(JavaScriptParser.Await, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public AwaitExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAwaitExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAwaitExpression(this);
		}
	}
	public partial class ThisExpressionContext : SingleExpressionContext {
		public ITerminalNode This() { return GetToken(JavaScriptParser.This, 0); }
		public ThisExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
	}
	public partial class FunctionExpressionContext : SingleExpressionContext {
		public AnonymousFunctionContext anonymousFunction() {
			return GetRuleContext<AnonymousFunctionContext>(0);
		}
		public FunctionExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionExpression(this);
		}
	}
	public partial class UnaryMinusExpressionContext : SingleExpressionContext {
		public ITerminalNode Minus() { return GetToken(JavaScriptParser.Minus, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryMinusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterUnaryMinusExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitUnaryMinusExpression(this);
		}
	}
	public partial class AssignmentExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode Assign() { return GetToken(JavaScriptParser.Assign, 0); }
		public AssignmentExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}
	public partial class PostDecreaseExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ITerminalNode MinusMinus() { return GetToken(JavaScriptParser.MinusMinus, 0); }
		public PostDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPostDecreaseExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPostDecreaseExpression(this);
		}
	}
	public partial class TypeofExpressionContext : SingleExpressionContext {
		public ITerminalNode Typeof() { return GetToken(JavaScriptParser.Typeof, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public TypeofExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeofExpression(this);
		}
	}
	public partial class InstanceofExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode Instanceof() { return GetToken(JavaScriptParser.Instanceof, 0); }
		public InstanceofExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterInstanceofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitInstanceofExpression(this);
		}
	}
	public partial class UnaryPlusExpressionContext : SingleExpressionContext {
		public ITerminalNode Plus() { return GetToken(JavaScriptParser.Plus, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryPlusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterUnaryPlusExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitUnaryPlusExpression(this);
		}
	}
	public partial class DeleteExpressionContext : SingleExpressionContext {
		public ITerminalNode Delete() { return GetToken(JavaScriptParser.Delete, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public DeleteExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterDeleteExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitDeleteExpression(this);
		}
	}
	public partial class ImportExpressionContext : SingleExpressionContext {
		public ITerminalNode Import() { return GetToken(JavaScriptParser.Import, 0); }
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public ImportExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportExpression(this);
		}
	}
	public partial class EqualityExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode Equals_() { return GetToken(JavaScriptParser.Equals_, 0); }
		public ITerminalNode NotEquals() { return GetToken(JavaScriptParser.NotEquals, 0); }
		public ITerminalNode IdentityEquals() { return GetToken(JavaScriptParser.IdentityEquals, 0); }
		public ITerminalNode IdentityNotEquals() { return GetToken(JavaScriptParser.IdentityNotEquals, 0); }
		public EqualityExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
	}
	public partial class BitXOrExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode BitXOr() { return GetToken(JavaScriptParser.BitXOr, 0); }
		public BitXOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBitXOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBitXOrExpression(this);
		}
	}
	public partial class SuperExpressionContext : SingleExpressionContext {
		public ITerminalNode Super() { return GetToken(JavaScriptParser.Super, 0); }
		public SuperExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSuperExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSuperExpression(this);
		}
	}
	public partial class MultiplicativeExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(JavaScriptParser.Divide, 0); }
		public ITerminalNode Modulus() { return GetToken(JavaScriptParser.Modulus, 0); }
		public MultiplicativeExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
	}
	public partial class BitShiftExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode LeftShiftArithmetic() { return GetToken(JavaScriptParser.LeftShiftArithmetic, 0); }
		public ITerminalNode RightShiftArithmetic() { return GetToken(JavaScriptParser.RightShiftArithmetic, 0); }
		public ITerminalNode RightShiftLogical() { return GetToken(JavaScriptParser.RightShiftLogical, 0); }
		public BitShiftExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBitShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBitShiftExpression(this);
		}
	}
	public partial class ParenthesizedExpressionContext : SingleExpressionContext {
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public ParenthesizedExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
	}
	public partial class AdditiveExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode Plus() { return GetToken(JavaScriptParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(JavaScriptParser.Minus, 0); }
		public AdditiveExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
	}
	public partial class RelationalExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode LessThan() { return GetToken(JavaScriptParser.LessThan, 0); }
		public ITerminalNode MoreThan() { return GetToken(JavaScriptParser.MoreThan, 0); }
		public ITerminalNode LessThanEquals() { return GetToken(JavaScriptParser.LessThanEquals, 0); }
		public ITerminalNode GreaterThanEquals() { return GetToken(JavaScriptParser.GreaterThanEquals, 0); }
		public RelationalExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
	}
	public partial class PostIncrementExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ITerminalNode PlusPlus() { return GetToken(JavaScriptParser.PlusPlus, 0); }
		public PostIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression(this);
		}
	}
	public partial class YieldExpressionContext : SingleExpressionContext {
		public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		public YieldExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterYieldExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitYieldExpression(this);
		}
	}
	public partial class BitNotExpressionContext : SingleExpressionContext {
		public ITerminalNode BitNot() { return GetToken(JavaScriptParser.BitNot, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public BitNotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBitNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBitNotExpression(this);
		}
	}
	public partial class NewExpressionContext : SingleExpressionContext {
		public ITerminalNode New() { return GetToken(JavaScriptParser.New, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public NewExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
	}
	public partial class LiteralExpressionContext : SingleExpressionContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
	}
	public partial class ArrayLiteralExpressionContext : SingleExpressionContext {
		public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ArrayLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayLiteralExpression(this);
		}
	}
	public partial class MemberDotExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ITerminalNode Dot() { return GetToken(JavaScriptParser.Dot, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode QuestionMark() { return GetToken(JavaScriptParser.QuestionMark, 0); }
		public ITerminalNode Hashtag() { return GetToken(JavaScriptParser.Hashtag, 0); }
		public MemberDotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterMemberDotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitMemberDotExpression(this);
		}
	}
	public partial class ClassExpressionContext : SingleExpressionContext {
		public ITerminalNode Class() { return GetToken(JavaScriptParser.Class, 0); }
		public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ClassExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterClassExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitClassExpression(this);
		}
	}
	public partial class MemberIndexExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ITerminalNode OpenBracket() { return GetToken(JavaScriptParser.OpenBracket, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ITerminalNode CloseBracket() { return GetToken(JavaScriptParser.CloseBracket, 0); }
		public ITerminalNode QuestionMarkDot() { return GetToken(JavaScriptParser.QuestionMarkDot, 0); }
		public MemberIndexExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterMemberIndexExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitMemberIndexExpression(this);
		}
	}
	public partial class IdentifierExpressionContext : SingleExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
	}
	public partial class BitAndExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode BitAnd() { return GetToken(JavaScriptParser.BitAnd, 0); }
		public BitAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBitAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBitAndExpression(this);
		}
	}
	public partial class BitOrExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode BitOr() { return GetToken(JavaScriptParser.BitOr, 0); }
		public BitOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBitOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBitOrExpression(this);
		}
	}
	public partial class AssignmentOperatorExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public AssignmentOperatorExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperatorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperatorExpression(this);
		}
	}
	public partial class VoidExpressionContext : SingleExpressionContext {
		public ITerminalNode Void() { return GetToken(JavaScriptParser.Void, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public VoidExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVoidExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVoidExpression(this);
		}
	}
	public partial class CoalesceExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode NullCoalesce() { return GetToken(JavaScriptParser.NullCoalesce, 0); }
		public CoalesceExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCoalesceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCoalesceExpression(this);
		}
	}

	[RuleVersion(0)]
	public SingleExpressionContext singleExpression() {
		return singleExpression(0);
	}

	private SingleExpressionContext singleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SingleExpressionContext _localctx = new SingleExpressionContext(Context, _parentState);
		SingleExpressionContext _prevctx = _localctx;
		int _startState = 130;
		EnterRecursionRule(_localctx, 130, RULE_singleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 834;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				{
				_localctx = new FunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 783; anonymousFunction();
				}
				break;
			case 2:
				{
				_localctx = new ClassExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 784; Match(Class);
				State = 786;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (As - 98)) | (1L << (From - 98)) | (1L << (Async - 98)) | (1L << (NonStrictLet - 98)) | (1L << (Identifier - 98)))) != 0)) {
					{
					State = 785; identifier();
					}
				}

				State = 788; classTail();
				}
				break;
			case 3:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 789; Match(New);
				State = 790; singleExpression(0);
				State = 791; arguments();
				}
				break;
			case 4:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 793; Match(New);
				State = 794; singleExpression(42);
				}
				break;
			case 5:
				{
				_localctx = new MetaExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 795; Match(New);
				State = 796; Match(Dot);
				State = 797; identifier();
				}
				break;
			case 6:
				{
				_localctx = new DeleteExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 798; Match(Delete);
				State = 799; singleExpression(37);
				}
				break;
			case 7:
				{
				_localctx = new VoidExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 800; Match(Void);
				State = 801; singleExpression(36);
				}
				break;
			case 8:
				{
				_localctx = new TypeofExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 802; Match(Typeof);
				State = 803; singleExpression(35);
				}
				break;
			case 9:
				{
				_localctx = new PreIncrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 804; Match(PlusPlus);
				State = 805; singleExpression(34);
				}
				break;
			case 10:
				{
				_localctx = new PreDecreaseExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 806; Match(MinusMinus);
				State = 807; singleExpression(33);
				}
				break;
			case 11:
				{
				_localctx = new UnaryPlusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 808; Match(Plus);
				State = 809; singleExpression(32);
				}
				break;
			case 12:
				{
				_localctx = new UnaryMinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 810; Match(Minus);
				State = 811; singleExpression(31);
				}
				break;
			case 13:
				{
				_localctx = new BitNotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 812; Match(BitNot);
				State = 813; singleExpression(30);
				}
				break;
			case 14:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 814; Match(Not);
				State = 815; singleExpression(29);
				}
				break;
			case 15:
				{
				_localctx = new AwaitExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 816; Match(Await);
				State = 817; singleExpression(28);
				}
				break;
			case 16:
				{
				_localctx = new ImportExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 818; Match(Import);
				State = 819; Match(OpenParen);
				State = 820; singleExpression(0);
				State = 821; Match(CloseParen);
				}
				break;
			case 17:
				{
				_localctx = new YieldExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 823; yieldStatement();
				}
				break;
			case 18:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 824; Match(This);
				}
				break;
			case 19:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 825; identifier();
				}
				break;
			case 20:
				{
				_localctx = new SuperExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 826; Match(Super);
				}
				break;
			case 21:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 827; literal();
				}
				break;
			case 22:
				{
				_localctx = new ArrayLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 828; arrayLiteral();
				}
				break;
			case 23:
				{
				_localctx = new ObjectLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 829; objectLiteral();
				}
				break;
			case 24:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 830; Match(OpenParen);
				State = 831; expressionSequence();
				State = 832; Match(CloseParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 923;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,99,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 921;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
					case 1:
						{
						_localctx = new OptionalChainExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 836;
						if (!(Precpred(Context, 46))) throw new FailedPredicateException(this, "Precpred(Context, 46)");
						State = 837; Match(QuestionMarkDot);
						State = 838; singleExpression(47);
						}
						break;
					case 2:
						{
						_localctx = new PowerExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 839;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 840; Match(Power);
						State = 841; singleExpression(27);
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 842;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 843;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulus))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 844; singleExpression(27);
						}
						break;
					case 4:
						{
						_localctx = new AdditiveExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 845;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 846;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 847; singleExpression(26);
						}
						break;
					case 5:
						{
						_localctx = new CoalesceExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 848;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 849; Match(NullCoalesce);
						State = 850; singleExpression(25);
						}
						break;
					case 6:
						{
						_localctx = new BitShiftExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 851;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 852;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RightShiftArithmetic) | (1L << LeftShiftArithmetic) | (1L << RightShiftLogical))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 853; singleExpression(24);
						}
						break;
					case 7:
						{
						_localctx = new RelationalExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 854;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 855;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LessThan) | (1L << MoreThan) | (1L << LessThanEquals) | (1L << GreaterThanEquals))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 856; singleExpression(23);
						}
						break;
					case 8:
						{
						_localctx = new InstanceofExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 857;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 858; Match(Instanceof);
						State = 859; singleExpression(22);
						}
						break;
					case 9:
						{
						_localctx = new InExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 860;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 861; Match(In);
						State = 862; singleExpression(21);
						}
						break;
					case 10:
						{
						_localctx = new EqualityExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 863;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 864;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equals_) | (1L << NotEquals) | (1L << IdentityEquals) | (1L << IdentityNotEquals))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 865; singleExpression(20);
						}
						break;
					case 11:
						{
						_localctx = new BitAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 866;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 867; Match(BitAnd);
						State = 868; singleExpression(19);
						}
						break;
					case 12:
						{
						_localctx = new BitXOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 869;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 870; Match(BitXOr);
						State = 871; singleExpression(18);
						}
						break;
					case 13:
						{
						_localctx = new BitOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 872;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 873; Match(BitOr);
						State = 874; singleExpression(17);
						}
						break;
					case 14:
						{
						_localctx = new LogicalAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 875;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 876; Match(And);
						State = 877; singleExpression(16);
						}
						break;
					case 15:
						{
						_localctx = new LogicalOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 878;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 879; Match(Or);
						State = 880; singleExpression(15);
						}
						break;
					case 16:
						{
						_localctx = new TernaryExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 881;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 882; Match(QuestionMark);
						State = 883; singleExpression(0);
						State = 884; Match(Colon);
						State = 885; singleExpression(14);
						}
						break;
					case 17:
						{
						_localctx = new AssignmentExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 887;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 888; Match(Assign);
						State = 889; singleExpression(12);
						}
						break;
					case 18:
						{
						_localctx = new AssignmentOperatorExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 890;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 891; assignmentOperator();
						State = 892; singleExpression(11);
						}
						break;
					case 19:
						{
						_localctx = new MemberIndexExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 894;
						if (!(Precpred(Context, 45))) throw new FailedPredicateException(this, "Precpred(Context, 45)");
						State = 896;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==QuestionMarkDot) {
							{
							State = 895; Match(QuestionMarkDot);
							}
						}

						State = 898; Match(OpenBracket);
						State = 899; expressionSequence();
						State = 900; Match(CloseBracket);
						}
						break;
					case 20:
						{
						_localctx = new MemberDotExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 902;
						if (!(Precpred(Context, 44))) throw new FailedPredicateException(this, "Precpred(Context, 44)");
						State = 904;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==QuestionMark) {
							{
							State = 903; Match(QuestionMark);
							}
						}

						State = 906; Match(Dot);
						State = 908;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Hashtag) {
							{
							State = 907; Match(Hashtag);
							}
						}

						State = 910; identifierName();
						}
						break;
					case 21:
						{
						_localctx = new ArgumentsExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 911;
						if (!(Precpred(Context, 41))) throw new FailedPredicateException(this, "Precpred(Context, 41)");
						State = 912; arguments();
						}
						break;
					case 22:
						{
						_localctx = new PostIncrementExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 913;
						if (!(Precpred(Context, 39))) throw new FailedPredicateException(this, "Precpred(Context, 39)");
						State = 914;
						if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
						State = 915; Match(PlusPlus);
						}
						break;
					case 23:
						{
						_localctx = new PostDecreaseExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 916;
						if (!(Precpred(Context, 38))) throw new FailedPredicateException(this, "Precpred(Context, 38)");
						State = 917;
						if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
						State = 918; Match(MinusMinus);
						}
						break;
					case 24:
						{
						_localctx = new TemplateStringExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 919;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 920; templateStringLiteral();
						}
						break;
					}
					} 
				}
				State = 925;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,99,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		public ITerminalNode Assign() { return GetToken(JavaScriptParser.Assign, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 132, RULE_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 926; Match(Assign);
			State = 927; singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public AssignableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignable(this);
		}
	}

	[RuleVersion(0)]
	public AssignableContext assignable() {
		AssignableContext _localctx = new AssignableContext(Context, State);
		EnterRule(_localctx, 134, RULE_assignable);
		try {
			State = 932;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case As:
			case From:
			case Async:
			case NonStrictLet:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 929; identifier();
				}
				break;
			case OpenBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 930; arrayLiteral();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 3);
				{
				State = 931; objectLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		public PropertyAssignmentContext[] propertyAssignment() {
			return GetRuleContexts<PropertyAssignmentContext>();
		}
		public PropertyAssignmentContext propertyAssignment(int i) {
			return GetRuleContext<PropertyAssignmentContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterObjectLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitObjectLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 136, RULE_objectLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 934; Match(OpenBrace);
			State = 946;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 935; propertyAssignment();
				State = 940;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 936; Match(Comma);
						State = 937; propertyAssignment();
						}
						} 
					}
					State = 942;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
				}
				State = 944;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 943; Match(Comma);
					}
				}

				}
				break;
			}
			State = 948; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousFunctionContext : ParserRuleContext {
		public AnonymousFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousFunction; } }
	 
		public AnonymousFunctionContext() { }
		public virtual void CopyFrom(AnonymousFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnonymousFunctionDeclContext : AnonymousFunctionContext {
		public ITerminalNode Function_() { return GetToken(JavaScriptParser.Function_, 0); }
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public AnonymousFunctionDeclContext(AnonymousFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAnonymousFunctionDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAnonymousFunctionDecl(this);
		}
	}
	public partial class ArrowFunctionContext : AnonymousFunctionContext {
		public ArrowFunctionParametersContext arrowFunctionParameters() {
			return GetRuleContext<ArrowFunctionParametersContext>(0);
		}
		public ITerminalNode ARROW() { return GetToken(JavaScriptParser.ARROW, 0); }
		public ArrowFunctionBodyContext arrowFunctionBody() {
			return GetRuleContext<ArrowFunctionBodyContext>(0);
		}
		public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		public ArrowFunctionContext(AnonymousFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunction(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousFunctionContext anonymousFunction() {
		AnonymousFunctionContext _localctx = new AnonymousFunctionContext(Context, State);
		EnterRule(_localctx, 138, RULE_anonymousFunction);
		int _la;
		try {
			State = 970;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				_localctx = new AnonymousFunctionDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 951;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Async) {
					{
					State = 950; Match(Async);
					}
				}

				State = 953; Match(Function_);
				State = 955;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply) {
					{
					State = 954; Match(Multiply);
					}
				}

				State = 957; Match(OpenParen);
				State = 959;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (As - 98)) | (1L << (From - 98)) | (1L << (Async - 98)) | (1L << (NonStrictLet - 98)) | (1L << (Identifier - 98)))) != 0)) {
					{
					State = 958; formalParameterList();
					}
				}

				State = 961; Match(CloseParen);
				State = 962; functionBody();
				}
				break;
			case 2:
				_localctx = new ArrowFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 964;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
				case 1:
					{
					State = 963; Match(Async);
					}
					break;
				}
				State = 966; arrowFunctionParameters();
				State = 967; Match(ARROW);
				State = 968; arrowFunctionBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowFunctionParametersContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ArrowFunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowFunctionParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunctionParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunctionParameters(this);
		}
	}

	[RuleVersion(0)]
	public ArrowFunctionParametersContext arrowFunctionParameters() {
		ArrowFunctionParametersContext _localctx = new ArrowFunctionParametersContext(Context, State);
		EnterRule(_localctx, 140, RULE_arrowFunctionParameters);
		int _la;
		try {
			State = 978;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case As:
			case From:
			case Async:
			case NonStrictLet:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 972; identifier();
				}
				break;
			case OpenParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 973; Match(OpenParen);
				State = 975;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (As - 98)) | (1L << (From - 98)) | (1L << (Async - 98)) | (1L << (NonStrictLet - 98)) | (1L << (Identifier - 98)))) != 0)) {
					{
					State = 974; formalParameterList();
					}
				}

				State = 977; Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowFunctionBodyContext : ParserRuleContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ArrowFunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowFunctionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunctionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunctionBody(this);
		}
	}

	[RuleVersion(0)]
	public ArrowFunctionBodyContext arrowFunctionBody() {
		ArrowFunctionBodyContext _localctx = new ArrowFunctionBodyContext(Context, State);
		EnterRule(_localctx, 142, RULE_arrowFunctionBody);
		try {
			State = 982;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 980; singleExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 981; functionBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public ITerminalNode MultiplyAssign() { return GetToken(JavaScriptParser.MultiplyAssign, 0); }
		public ITerminalNode DivideAssign() { return GetToken(JavaScriptParser.DivideAssign, 0); }
		public ITerminalNode ModulusAssign() { return GetToken(JavaScriptParser.ModulusAssign, 0); }
		public ITerminalNode PlusAssign() { return GetToken(JavaScriptParser.PlusAssign, 0); }
		public ITerminalNode MinusAssign() { return GetToken(JavaScriptParser.MinusAssign, 0); }
		public ITerminalNode LeftShiftArithmeticAssign() { return GetToken(JavaScriptParser.LeftShiftArithmeticAssign, 0); }
		public ITerminalNode RightShiftArithmeticAssign() { return GetToken(JavaScriptParser.RightShiftArithmeticAssign, 0); }
		public ITerminalNode RightShiftLogicalAssign() { return GetToken(JavaScriptParser.RightShiftLogicalAssign, 0); }
		public ITerminalNode BitAndAssign() { return GetToken(JavaScriptParser.BitAndAssign, 0); }
		public ITerminalNode BitXorAssign() { return GetToken(JavaScriptParser.BitXorAssign, 0); }
		public ITerminalNode BitOrAssign() { return GetToken(JavaScriptParser.BitOrAssign, 0); }
		public ITerminalNode PowerAssign() { return GetToken(JavaScriptParser.PowerAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 144, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 984;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MultiplyAssign) | (1L << DivideAssign) | (1L << ModulusAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftArithmeticAssign) | (1L << RightShiftArithmeticAssign) | (1L << RightShiftLogicalAssign) | (1L << BitAndAssign) | (1L << BitXorAssign) | (1L << BitOrAssign) | (1L << PowerAssign))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode NullLiteral() { return GetToken(JavaScriptParser.NullLiteral, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(JavaScriptParser.BooleanLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
		public TemplateStringLiteralContext templateStringLiteral() {
			return GetRuleContext<TemplateStringLiteralContext>(0);
		}
		public ITerminalNode RegularExpressionLiteral() { return GetToken(JavaScriptParser.RegularExpressionLiteral, 0); }
		public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public BigintLiteralContext bigintLiteral() {
			return GetRuleContext<BigintLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 146, RULE_literal);
		try {
			State = 993;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 986; Match(NullLiteral);
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 987; Match(BooleanLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 988; Match(StringLiteral);
				}
				break;
			case BackTick:
				EnterOuterAlt(_localctx, 4);
				{
				State = 989; templateStringLiteral();
				}
				break;
			case RegularExpressionLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 990; Match(RegularExpressionLiteral);
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 991; numericLiteral();
				}
				break;
			case BigHexIntegerLiteral:
			case BigOctalIntegerLiteral:
			case BigBinaryIntegerLiteral:
			case BigDecimalIntegerLiteral:
				EnterOuterAlt(_localctx, 7);
				{
				State = 992; bigintLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStringLiteralContext : ParserRuleContext {
		public ITerminalNode[] BackTick() { return GetTokens(JavaScriptParser.BackTick); }
		public ITerminalNode BackTick(int i) {
			return GetToken(JavaScriptParser.BackTick, i);
		}
		public TemplateStringAtomContext[] templateStringAtom() {
			return GetRuleContexts<TemplateStringAtomContext>();
		}
		public TemplateStringAtomContext templateStringAtom(int i) {
			return GetRuleContext<TemplateStringAtomContext>(i);
		}
		public TemplateStringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterTemplateStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitTemplateStringLiteral(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStringLiteralContext templateStringLiteral() {
		TemplateStringLiteralContext _localctx = new TemplateStringLiteralContext(Context, State);
		EnterRule(_localctx, 148, RULE_templateStringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 995; Match(BackTick);
			State = 999;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TemplateStringStartExpression || _la==TemplateStringAtom) {
				{
				{
				State = 996; templateStringAtom();
				}
				}
				State = 1001;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1002; Match(BackTick);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStringAtomContext : ParserRuleContext {
		public ITerminalNode TemplateStringAtom() { return GetToken(JavaScriptParser.TemplateStringAtom, 0); }
		public ITerminalNode TemplateStringStartExpression() { return GetToken(JavaScriptParser.TemplateStringStartExpression, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ITerminalNode TemplateCloseBrace() { return GetToken(JavaScriptParser.TemplateCloseBrace, 0); }
		public TemplateStringAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStringAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterTemplateStringAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitTemplateStringAtom(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStringAtomContext templateStringAtom() {
		TemplateStringAtomContext _localctx = new TemplateStringAtomContext(Context, State);
		EnterRule(_localctx, 150, RULE_templateStringAtom);
		try {
			State = 1009;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TemplateStringAtom:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1004; Match(TemplateStringAtom);
				}
				break;
			case TemplateStringStartExpression:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1005; Match(TemplateStringStartExpression);
				State = 1006; singleExpression(0);
				State = 1007; Match(TemplateCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		public ITerminalNode DecimalLiteral() { return GetToken(JavaScriptParser.DecimalLiteral, 0); }
		public ITerminalNode HexIntegerLiteral() { return GetToken(JavaScriptParser.HexIntegerLiteral, 0); }
		public ITerminalNode OctalIntegerLiteral() { return GetToken(JavaScriptParser.OctalIntegerLiteral, 0); }
		public ITerminalNode OctalIntegerLiteral2() { return GetToken(JavaScriptParser.OctalIntegerLiteral2, 0); }
		public ITerminalNode BinaryIntegerLiteral() { return GetToken(JavaScriptParser.BinaryIntegerLiteral, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterNumericLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitNumericLiteral(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 152, RULE_numericLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1011;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (DecimalLiteral - 63)) | (1L << (HexIntegerLiteral - 63)) | (1L << (OctalIntegerLiteral - 63)) | (1L << (OctalIntegerLiteral2 - 63)) | (1L << (BinaryIntegerLiteral - 63)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BigintLiteralContext : ParserRuleContext {
		public ITerminalNode BigDecimalIntegerLiteral() { return GetToken(JavaScriptParser.BigDecimalIntegerLiteral, 0); }
		public ITerminalNode BigHexIntegerLiteral() { return GetToken(JavaScriptParser.BigHexIntegerLiteral, 0); }
		public ITerminalNode BigOctalIntegerLiteral() { return GetToken(JavaScriptParser.BigOctalIntegerLiteral, 0); }
		public ITerminalNode BigBinaryIntegerLiteral() { return GetToken(JavaScriptParser.BigBinaryIntegerLiteral, 0); }
		public BigintLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bigintLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBigintLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBigintLiteral(this);
		}
	}

	[RuleVersion(0)]
	public BigintLiteralContext bigintLiteral() {
		BigintLiteralContext _localctx = new BigintLiteralContext(Context, State);
		EnterRule(_localctx, 154, RULE_bigintLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1013;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (BigHexIntegerLiteral - 68)) | (1L << (BigOctalIntegerLiteral - 68)) | (1L << (BigBinaryIntegerLiteral - 68)) | (1L << (BigDecimalIntegerLiteral - 68)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ClassElementNameContext classElementName() {
			return GetRuleContext<ClassElementNameContext>(0);
		}
		public GetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterGetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitGetter(this);
		}
	}

	[RuleVersion(0)]
	public GetterContext getter() {
		GetterContext _localctx = new GetterContext(Context, State);
		EnterRule(_localctx, 156, RULE_getter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1015;
			if (!(this.n("get"))) throw new FailedPredicateException(this, "this.n(\"get\")");
			State = 1016; identifier();
			State = 1017; classElementName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ClassElementNameContext classElementName() {
			return GetRuleContext<ClassElementNameContext>(0);
		}
		public SetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSetter(this);
		}
	}

	[RuleVersion(0)]
	public SetterContext setter() {
		SetterContext _localctx = new SetterContext(Context, State);
		EnterRule(_localctx, 158, RULE_setter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1019;
			if (!(this.n("set"))) throw new FailedPredicateException(this, "this.n(\"set\")");
			State = 1020; identifier();
			State = 1021; classElementName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(Context, State);
		EnterRule(_localctx, 160, RULE_identifierName);
		try {
			State = 1025;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1023; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1024; reservedWord();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
		public ITerminalNode NonStrictLet() { return GetToken(JavaScriptParser.NonStrictLet, 0); }
		public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		public ITerminalNode As() { return GetToken(JavaScriptParser.As, 0); }
		public ITerminalNode From() { return GetToken(JavaScriptParser.From, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 162, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1027;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (As - 98)) | (1L << (From - 98)) | (1L << (Async - 98)) | (1L << (NonStrictLet - 98)) | (1L << (Identifier - 98)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedWordContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode NullLiteral() { return GetToken(JavaScriptParser.NullLiteral, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(JavaScriptParser.BooleanLiteral, 0); }
		public ReservedWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedWord; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterReservedWord(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitReservedWord(this);
		}
	}

	[RuleVersion(0)]
	public ReservedWordContext reservedWord() {
		ReservedWordContext _localctx = new ReservedWordContext(Context, State);
		EnterRule(_localctx, 164, RULE_reservedWord);
		try {
			State = 1032;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Yield:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1029; keyword();
				}
				break;
			case NullLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1030; Match(NullLiteral);
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1031; Match(BooleanLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode Break() { return GetToken(JavaScriptParser.Break, 0); }
		public ITerminalNode Do() { return GetToken(JavaScriptParser.Do, 0); }
		public ITerminalNode Instanceof() { return GetToken(JavaScriptParser.Instanceof, 0); }
		public ITerminalNode Typeof() { return GetToken(JavaScriptParser.Typeof, 0); }
		public ITerminalNode Case() { return GetToken(JavaScriptParser.Case, 0); }
		public ITerminalNode Else() { return GetToken(JavaScriptParser.Else, 0); }
		public ITerminalNode New() { return GetToken(JavaScriptParser.New, 0); }
		public ITerminalNode Var() { return GetToken(JavaScriptParser.Var, 0); }
		public ITerminalNode Catch() { return GetToken(JavaScriptParser.Catch, 0); }
		public ITerminalNode Finally() { return GetToken(JavaScriptParser.Finally, 0); }
		public ITerminalNode Return() { return GetToken(JavaScriptParser.Return, 0); }
		public ITerminalNode Void() { return GetToken(JavaScriptParser.Void, 0); }
		public ITerminalNode Continue() { return GetToken(JavaScriptParser.Continue, 0); }
		public ITerminalNode For() { return GetToken(JavaScriptParser.For, 0); }
		public ITerminalNode Switch() { return GetToken(JavaScriptParser.Switch, 0); }
		public ITerminalNode While() { return GetToken(JavaScriptParser.While, 0); }
		public ITerminalNode Debugger() { return GetToken(JavaScriptParser.Debugger, 0); }
		public ITerminalNode Function_() { return GetToken(JavaScriptParser.Function_, 0); }
		public ITerminalNode This() { return GetToken(JavaScriptParser.This, 0); }
		public ITerminalNode With() { return GetToken(JavaScriptParser.With, 0); }
		public ITerminalNode Default() { return GetToken(JavaScriptParser.Default, 0); }
		public ITerminalNode If() { return GetToken(JavaScriptParser.If, 0); }
		public ITerminalNode Throw() { return GetToken(JavaScriptParser.Throw, 0); }
		public ITerminalNode Delete() { return GetToken(JavaScriptParser.Delete, 0); }
		public ITerminalNode In() { return GetToken(JavaScriptParser.In, 0); }
		public ITerminalNode Try() { return GetToken(JavaScriptParser.Try, 0); }
		public ITerminalNode Class() { return GetToken(JavaScriptParser.Class, 0); }
		public ITerminalNode Enum() { return GetToken(JavaScriptParser.Enum, 0); }
		public ITerminalNode Extends() { return GetToken(JavaScriptParser.Extends, 0); }
		public ITerminalNode Super() { return GetToken(JavaScriptParser.Super, 0); }
		public ITerminalNode Const() { return GetToken(JavaScriptParser.Const, 0); }
		public ITerminalNode Export() { return GetToken(JavaScriptParser.Export, 0); }
		public ITerminalNode Import() { return GetToken(JavaScriptParser.Import, 0); }
		public ITerminalNode Implements() { return GetToken(JavaScriptParser.Implements, 0); }
		public Let_Context let_() {
			return GetRuleContext<Let_Context>(0);
		}
		public ITerminalNode Private() { return GetToken(JavaScriptParser.Private, 0); }
		public ITerminalNode Public() { return GetToken(JavaScriptParser.Public, 0); }
		public ITerminalNode Interface() { return GetToken(JavaScriptParser.Interface, 0); }
		public ITerminalNode Package() { return GetToken(JavaScriptParser.Package, 0); }
		public ITerminalNode Protected() { return GetToken(JavaScriptParser.Protected, 0); }
		public ITerminalNode Static() { return GetToken(JavaScriptParser.Static, 0); }
		public ITerminalNode Yield() { return GetToken(JavaScriptParser.Yield, 0); }
		public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		public ITerminalNode Await() { return GetToken(JavaScriptParser.Await, 0); }
		public ITerminalNode From() { return GetToken(JavaScriptParser.From, 0); }
		public ITerminalNode As() { return GetToken(JavaScriptParser.As, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 166, RULE_keyword);
		try {
			State = 1080;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Break:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1034; Match(Break);
				}
				break;
			case Do:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1035; Match(Do);
				}
				break;
			case Instanceof:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1036; Match(Instanceof);
				}
				break;
			case Typeof:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1037; Match(Typeof);
				}
				break;
			case Case:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1038; Match(Case);
				}
				break;
			case Else:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1039; Match(Else);
				}
				break;
			case New:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1040; Match(New);
				}
				break;
			case Var:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1041; Match(Var);
				}
				break;
			case Catch:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1042; Match(Catch);
				}
				break;
			case Finally:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1043; Match(Finally);
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1044; Match(Return);
				}
				break;
			case Void:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1045; Match(Void);
				}
				break;
			case Continue:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1046; Match(Continue);
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1047; Match(For);
				}
				break;
			case Switch:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1048; Match(Switch);
				}
				break;
			case While:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1049; Match(While);
				}
				break;
			case Debugger:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1050; Match(Debugger);
				}
				break;
			case Function_:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1051; Match(Function_);
				}
				break;
			case This:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1052; Match(This);
				}
				break;
			case With:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1053; Match(With);
				}
				break;
			case Default:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1054; Match(Default);
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1055; Match(If);
				}
				break;
			case Throw:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1056; Match(Throw);
				}
				break;
			case Delete:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1057; Match(Delete);
				}
				break;
			case In:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1058; Match(In);
				}
				break;
			case Try:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1059; Match(Try);
				}
				break;
			case Class:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1060; Match(Class);
				}
				break;
			case Enum:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1061; Match(Enum);
				}
				break;
			case Extends:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1062; Match(Extends);
				}
				break;
			case Super:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1063; Match(Super);
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1064; Match(Const);
				}
				break;
			case Export:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1065; Match(Export);
				}
				break;
			case Import:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1066; Match(Import);
				}
				break;
			case Implements:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1067; Match(Implements);
				}
				break;
			case StrictLet:
			case NonStrictLet:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1068; let_();
				}
				break;
			case Private:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1069; Match(Private);
				}
				break;
			case Public:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1070; Match(Public);
				}
				break;
			case Interface:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1071; Match(Interface);
				}
				break;
			case Package:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1072; Match(Package);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 40);
				{
				State = 1073; Match(Protected);
				}
				break;
			case Static:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1074; Match(Static);
				}
				break;
			case Yield:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1075; Match(Yield);
				}
				break;
			case Async:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1076; Match(Async);
				}
				break;
			case Await:
				EnterOuterAlt(_localctx, 44);
				{
				State = 1077; Match(Await);
				}
				break;
			case From:
				EnterOuterAlt(_localctx, 45);
				{
				State = 1078; Match(From);
				}
				break;
			case As:
				EnterOuterAlt(_localctx, 46);
				{
				State = 1079; Match(As);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Let_Context : ParserRuleContext {
		public ITerminalNode NonStrictLet() { return GetToken(JavaScriptParser.NonStrictLet, 0); }
		public ITerminalNode StrictLet() { return GetToken(JavaScriptParser.StrictLet, 0); }
		public Let_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLet_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLet_(this);
		}
	}

	[RuleVersion(0)]
	public Let_Context let_() {
		Let_Context _localctx = new Let_Context(Context, State);
		EnterRule(_localctx, 168, RULE_let_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1082;
			_la = TokenStream.LA(1);
			if ( !(_la==StrictLet || _la==NonStrictLet) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		public ITerminalNode SemiColon() { return GetToken(JavaScriptParser.SemiColon, 0); }
		public ITerminalNode Eof() { return GetToken(JavaScriptParser.Eof, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 170, RULE_eos);
		try {
			State = 1088;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1084; Match(SemiColon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1085; Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1086;
				if (!(this.lineTerminatorAhead())) throw new FailedPredicateException(this, "this.lineTerminatorAhead()");
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1087;
				if (!(this.closeBrace())) throw new FailedPredicateException(this, "this.closeBrace()");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 24: return expressionStatement_sempred((ExpressionStatementContext)_localctx, predIndex);
		case 26: return iterationStatement_sempred((IterationStatementContext)_localctx, predIndex);
		case 28: return continueStatement_sempred((ContinueStatementContext)_localctx, predIndex);
		case 29: return breakStatement_sempred((BreakStatementContext)_localctx, predIndex);
		case 30: return returnStatement_sempred((ReturnStatementContext)_localctx, predIndex);
		case 31: return yieldStatement_sempred((YieldStatementContext)_localctx, predIndex);
		case 39: return throwStatement_sempred((ThrowStatementContext)_localctx, predIndex);
		case 47: return classElement_sempred((ClassElementContext)_localctx, predIndex);
		case 48: return methodDefinition_sempred((MethodDefinitionContext)_localctx, predIndex);
		case 65: return singleExpression_sempred((SingleExpressionContext)_localctx, predIndex);
		case 78: return getter_sempred((GetterContext)_localctx, predIndex);
		case 79: return setter_sempred((SetterContext)_localctx, predIndex);
		case 85: return eos_sempred((EosContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expressionStatement_sempred(ExpressionStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return this.notOpenBraceAndNotFunction();
		}
		return true;
	}
	private bool iterationStatement_sempred(IterationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return this.p("of");
		}
		return true;
	}
	private bool continueStatement_sempred(ContinueStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return this.notLineTerminator();
		}
		return true;
	}
	private bool breakStatement_sempred(BreakStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return this.notLineTerminator();
		}
		return true;
	}
	private bool returnStatement_sempred(ReturnStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return this.notLineTerminator();
		}
		return true;
	}
	private bool yieldStatement_sempred(YieldStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return this.notLineTerminator();
		}
		return true;
	}
	private bool throwStatement_sempred(ThrowStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return this.notLineTerminator();
		}
		return true;
	}
	private bool classElement_sempred(ClassElementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return this.n("static");
		case 8: return this.n("static");
		case 9: return this.n("static");
		}
		return true;
	}
	private bool methodDefinition_sempred(MethodDefinitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return this.notLineTerminator();
		}
		return true;
	}
	private bool singleExpression_sempred(SingleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 46);
		case 12: return Precpred(Context, 27);
		case 13: return Precpred(Context, 26);
		case 14: return Precpred(Context, 25);
		case 15: return Precpred(Context, 24);
		case 16: return Precpred(Context, 23);
		case 17: return Precpred(Context, 22);
		case 18: return Precpred(Context, 21);
		case 19: return Precpred(Context, 20);
		case 20: return Precpred(Context, 19);
		case 21: return Precpred(Context, 18);
		case 22: return Precpred(Context, 17);
		case 23: return Precpred(Context, 16);
		case 24: return Precpred(Context, 15);
		case 25: return Precpred(Context, 14);
		case 26: return Precpred(Context, 13);
		case 27: return Precpred(Context, 12);
		case 28: return Precpred(Context, 11);
		case 29: return Precpred(Context, 45);
		case 30: return Precpred(Context, 44);
		case 31: return Precpred(Context, 41);
		case 32: return Precpred(Context, 39);
		case 33: return this.notLineTerminator();
		case 34: return Precpred(Context, 38);
		case 35: return this.notLineTerminator();
		case 36: return Precpred(Context, 9);
		}
		return true;
	}
	private bool getter_sempred(GetterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37: return this.n("get");
		}
		return true;
	}
	private bool setter_sempred(SetterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return this.n("set");
		}
		return true;
	}
	private bool eos_sempred(EosContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39: return this.lineTerminatorAhead();
		case 40: return this.closeBrace();
		}
		return true;
	}

	private static int[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x82', '\x445', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x3', '\x2', 
		'\x5', '\x2', '\xB0', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '\xB3', 
		'\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '\xCD', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\xD1', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x6', 
		'\x6', '\xD6', '\n', '\x6', '\r', '\x6', '\xE', '\x6', '\xD7', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x5', '\b', '\xDE', '\n', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xE2', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'\xE9', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\a', '\t', '\xEF', '\n', '\t', '\f', '\t', '\xE', '\t', '\xF2', '\v', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xF6', '\n', '\t', '\x5', 
		'\t', '\xF8', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\xFF', '\n', '\n', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', '\x103', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\x10C', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x110', 
		'\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x118', '\n', '\x10', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\x11C', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x120', '\n', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x129', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', 
		'\x131', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x135', 
		'\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\a', '\x13', '\x13B', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x13E', 
		'\v', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x142', '\n', 
		'\x13', '\x5', '\x13', '\x144', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x14B', '\n', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x150', 
		'\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\x159', '\n', 
		'\x17', '\f', '\x17', '\xE', '\x17', '\x15C', '\v', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x161', '\n', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x170', '\n', '\x1B', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x184', '\n', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x188', '\n', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x18C', '\n', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x5', '\x1C', '\x194', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x5', '\x1C', '\x19D', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x5', '\x1C', '\x1A2', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', 
		'\x1AA', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', 
		'\x1D', '\x1AF', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x5', '\x1E', '\x1B4', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1BB', '\n', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', 
		' ', '\x1C2', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x5', '!', '\x1C9', '\n', '!', '\x3', '!', '\x3', '!', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '$', '\x3', '$', '\x5', '$', '\x1DB', '\n', '$', '\x3', '$', '\x3', 
		'$', '\x5', '$', '\x1DF', '\n', '$', '\x5', '$', '\x1E1', '\n', '$', '\x3', 
		'$', '\x3', '$', '\x3', '%', '\x6', '%', '\x1E6', '\n', '%', '\r', '%', 
		'\xE', '%', '\x1E7', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', 
		'&', '\x1EE', '\n', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x5', 
		'\'', '\x1F3', '\n', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x202', '\n', '*', 
		'\x3', '*', '\x5', '*', '\x205', '\n', '*', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x5', '+', '\x20A', '\n', '+', '\x3', '+', '\x5', '+', '\x20D', 
		'\n', '+', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x5', '.', '\x218', '\n', 
		'.', '\x3', '.', '\x3', '.', '\x5', '.', '\x21C', '\n', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x5', '.', '\x221', '\n', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'\x30', '\x3', '\x30', '\x5', '\x30', '\x22C', '\n', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\a', '\x30', '\x230', '\n', '\x30', '\f', '\x30', '\xE', 
		'\x30', '\x233', '\v', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x23A', '\n', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x240', 
		'\n', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x5', '\x31', '\x246', '\n', '\x31', '\x3', '\x31', '\x3', '\x31', '\x5', 
		'\x31', '\x24A', '\n', '\x31', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', 
		'\x24E', '\n', '\x32', '\x3', '\x32', '\x5', '\x32', '\x251', '\n', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x256', '\n', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', 
		'\x32', '\x25C', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x264', '\n', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x269', 
		'\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', 
		'\x26E', '\n', '\x32', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x272', 
		'\n', '\x33', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x276', '\n', 
		'\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\a', '\x36', '\x27E', '\n', '\x36', '\f', '\x36', 
		'\xE', '\x36', '\x281', '\v', '\x36', '\x3', '\x36', '\x3', '\x36', '\x5', 
		'\x36', '\x285', '\n', '\x36', '\x3', '\x36', '\x5', '\x36', '\x288', 
		'\n', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', 
		'\x28D', '\n', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x39', '\x3', '\x39', '\x5', '\x39', '\x294', '\n', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x3', ':', '\x6', ':', '\x299', '\n', ':', '\r', ':', 
		'\xE', ':', '\x29A', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		'<', '\a', '<', '\x2A2', '\n', '<', '\f', '<', '\xE', '<', '\x2A5', '\v', 
		'<', '\x3', '<', '\x5', '<', '\x2A8', '\n', '<', '\x3', '<', '\x6', '<', 
		'\x2AB', '\n', '<', '\r', '<', '\xE', '<', '\x2AC', '\x3', '<', '\a', 
		'<', '\x2B0', '\n', '<', '\f', '<', '\xE', '<', '\x2B3', '\v', '<', '\x3', 
		'<', '\a', '<', '\x2B6', '\n', '<', '\f', '<', '\xE', '<', '\x2B9', '\v', 
		'<', '\x3', '=', '\x5', '=', '\x2BC', '\n', '=', '\x3', '=', '\x3', '=', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x5', '>', 
		'\x2CB', '\n', '>', '\x3', '>', '\x5', '>', '\x2CE', '\n', '>', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\x5', '>', '\x2D3', '\n', '>', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x5', '>', '\x2E4', '\n', '>', '\x3', '>', '\x5', 
		'>', '\x2E7', '\n', '>', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', 
		'\x3', '?', '\x3', '?', '\x3', '?', '\x5', '?', '\x2F0', '\n', '?', '\x3', 
		'@', '\x3', '@', '\x3', '@', '\x3', '@', '\a', '@', '\x2F6', '\n', '@', 
		'\f', '@', '\xE', '@', '\x2F9', '\v', '@', '\x3', '@', '\x5', '@', '\x2FC', 
		'\n', '@', '\x5', '@', '\x2FE', '\n', '@', '\x3', '@', '\x3', '@', '\x3', 
		'\x41', '\x5', '\x41', '\x303', '\n', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x5', '\x41', '\x307', '\n', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', 
		'\x42', '\a', '\x42', '\x30C', '\n', '\x42', '\f', '\x42', '\xE', '\x42', 
		'\x30F', '\v', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x5', '\x43', '\x315', '\n', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', 
		'\x345', '\n', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x5', '\x43', '\x383', '\n', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x5', '\x43', '\x38B', '\n', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', 
		'\x43', '\x38F', '\n', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\a', '\x43', '\x39C', '\n', 
		'\x43', '\f', '\x43', '\xE', '\x43', '\x39F', '\v', '\x43', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x5', '\x45', '\x3A7', '\n', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x3', '\x46', '\a', '\x46', '\x3AD', '\n', '\x46', '\f', '\x46', 
		'\xE', '\x46', '\x3B0', '\v', '\x46', '\x3', '\x46', '\x5', '\x46', '\x3B3', 
		'\n', '\x46', '\x5', '\x46', '\x3B5', '\n', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x3', 'G', '\x5', 'G', '\x3BA', '\n', 'G', '\x3', 'G', '\x3', 
		'G', '\x5', 'G', '\x3BE', '\n', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', 
		'\x3C2', '\n', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\x3C7', 
		'\n', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', 
		'\x3CD', '\n', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x5', 'H', '\x3D2', 
		'\n', 'H', '\x3', 'H', '\x5', 'H', '\x3D5', '\n', 'H', '\x3', 'I', '\x3', 
		'I', '\x5', 'I', '\x3D9', '\n', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'K', 
		'\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', 
		'\x5', 'K', '\x3E4', '\n', 'K', '\x3', 'L', '\x3', 'L', '\a', 'L', '\x3E8', 
		'\n', 'L', '\f', 'L', '\xE', 'L', '\x3EB', '\v', 'L', '\x3', 'L', '\x3', 
		'L', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x5', 
		'M', '\x3F4', '\n', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', 
		'\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'Q', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'Q', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\x404', '\n', 
		'R', '\x3', 'S', '\x3', 'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x5', 
		'T', '\x40B', '\n', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x5', 'U', '\x43B', '\n', 'U', '\x3', 'V', '\x3', 'V', '\x3', 'W', '\x3', 
		'W', '\x3', 'W', '\x3', 'W', '\x5', 'W', '\x443', '\n', 'W', '\x3', 'W', 
		'\x2', '\x3', '\x84', 'X', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 
		'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 
		'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', 
		'\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', 
		'\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', 
		'\xAA', '\xAC', '\x2', '\r', '\x4', '\x2', 'n', 'o', 'y', 'y', '\x3', 
		'\x2', '\x1C', '\x1E', '\x3', '\x2', '\x18', '\x19', '\x3', '\x2', '\"', 
		'$', '\x3', '\x2', '%', '(', '\x3', '\x2', ')', ',', '\x3', '\x2', '\x32', 
		'=', '\x3', '\x2', '\x41', '\x45', '\x3', '\x2', '\x46', 'I', '\x6', '\x2', 
		'\x64', '\x65', 'm', 'm', 'r', 'r', 'y', 'y', '\x3', '\x2', 'q', 'r', 
		'\x2', '\x4E9', '\x2', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x4', '\xB6', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\xCE', '\x3', '\x2', '\x2', '\x2', '\n', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xE', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\xEA', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\xFB', '\x3', '\x2', '\x2', '\x2', '\x14', '\x102', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x104', '\x3', '\x2', '\x2', '\x2', '\x18', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x111', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x114', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x128', '\x3', '\x2', '\x2', '\x2', '\"', '\x134', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x136', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x147', '\x3', '\x2', '\x2', '\x2', '(', '\x14F', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x151', '\x3', '\x2', '\x2', '\x2', ',', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x15D', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x162', '\x3', '\x2', '\x2', '\x2', '\x32', '\x164', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x168', '\x3', '\x2', '\x2', '\x2', '\x36', '\x1A9', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x1AE', '\x3', '\x2', '\x2', '\x2', 
		':', '\x1B0', '\x3', '\x2', '\x2', '\x2', '<', '\x1B7', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x1BE', '\x3', '\x2', '\x2', '\x2', '@', '\x1C5', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x1CC', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1D8', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x1E5', '\x3', '\x2', '\x2', '\x2', 'J', '\x1E9', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x1EF', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x1F4', '\x3', '\x2', '\x2', '\x2', 'P', '\x1F8', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x1FD', '\x3', '\x2', '\x2', '\x2', 'T', '\x206', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x210', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x213', '\x3', '\x2', '\x2', '\x2', 'Z', '\x217', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x225', '\x3', '\x2', '\x2', '\x2', '^', '\x22B', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x249', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x64', '\x26F', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x275', '\x3', '\x2', '\x2', '\x2', 'h', '\x277', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x287', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x289', '\x3', '\x2', '\x2', '\x2', 'n', '\x28E', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\x291', '\x3', '\x2', '\x2', '\x2', 'r', '\x298', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x29C', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x2A3', '\x3', '\x2', '\x2', '\x2', 'x', '\x2BB', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x2E6', '\x3', '\x2', '\x2', '\x2', '|', '\x2EF', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x2F1', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x302', '\x3', '\x2', '\x2', '\x2', '\x82', '\x308', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x344', '\x3', '\x2', '\x2', '\x2', '\x86', '\x3A0', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x3A6', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x3A8', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x3CC', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x3D4', '\x3', '\x2', '\x2', '\x2', '\x90', '\x3D8', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x3DA', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x3E3', '\x3', '\x2', '\x2', '\x2', '\x96', '\x3E5', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x3F3', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x3F5', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x3F7', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x3F9', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x3FD', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\x403', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x405', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\x40A', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\x43A', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x43C', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\x442', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB0', 
		'\a', '\x3', '\x2', '\x2', '\xAF', '\xAE', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '\xB1', '\xB3', '\x5', 'r', ':', '\x2', '\xB2', '\xB1', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\a', '\x2', 
		'\x2', '\x3', '\xB5', '\x3', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', 
		'\x5', '\x6', '\x4', '\x2', '\xB7', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\xCD', '\x5', '\b', '\x5', '\x2', '\xB9', '\xCD', '\x5', '*', 
		'\x16', '\x2', '\xBA', '\xCD', '\x5', '\f', '\a', '\x2', '\xBB', '\xCD', 
		'\x5', ' ', '\x11', '\x2', '\xBC', '\xCD', '\x5', '\x30', '\x19', '\x2', 
		'\xBD', '\xCD', '\x5', '\\', '/', '\x2', '\xBE', '\xCD', '\x5', 'Z', '.', 
		'\x2', '\xBF', '\xCD', '\x5', '\x32', '\x1A', '\x2', '\xC0', '\xCD', '\x5', 
		'\x34', '\x1B', '\x2', '\xC1', '\xCD', '\x5', '\x36', '\x1C', '\x2', '\xC2', 
		'\xCD', '\x5', ':', '\x1E', '\x2', '\xC3', '\xCD', '\x5', '<', '\x1F', 
		'\x2', '\xC4', '\xCD', '\x5', '>', ' ', '\x2', '\xC5', '\xCD', '\x5', 
		'@', '!', '\x2', '\xC6', '\xCD', '\x5', '\x42', '\"', '\x2', '\xC7', '\xCD', 
		'\x5', 'N', '(', '\x2', '\xC8', '\xCD', '\x5', '\x44', '#', '\x2', '\xC9', 
		'\xCD', '\x5', 'P', ')', '\x2', '\xCA', '\xCD', '\x5', 'R', '*', '\x2', 
		'\xCB', '\xCD', '\x5', 'X', '-', '\x2', '\xCC', '\xB8', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xBA', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\xBB', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xBD', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\xC0', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xC2', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xC4', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCD', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xD0', '\a', '\v', '\x2', '\x2', '\xCF', '\xD1', 
		'\x5', '\n', '\x6', '\x2', '\xD0', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xD3', '\a', '\r', '\x2', '\x2', '\xD3', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\xD6', '\x5', '\x6', '\x4', '\x2', 
		'\xD5', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\x3', '\x2', 
		'\x2', '\x2', '\xD7', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\xD9', '\xDA', '\a', 'l', '\x2', '\x2', '\xDA', '\xDB', '\x5', '\xE', 
		'\b', '\x2', '\xDB', '\r', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDE', 
		'\x5', '\x18', '\r', '\x2', '\xDD', '\xDC', '\x3', '\x2', '\x2', '\x2', 
		'\xDD', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE1', '\x3', '\x2', 
		'\x2', '\x2', '\xDF', '\xE2', '\x5', '\x1A', '\xE', '\x2', '\xE0', '\xE2', 
		'\x5', '\x10', '\t', '\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', 
		'\xE1', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', 
		'\x2', '\x2', '\xE3', '\xE4', '\x5', '\x1C', '\xF', '\x2', '\xE4', '\xE5', 
		'\x5', '\xAC', 'W', '\x2', '\xE5', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\xE6', '\xE7', '\a', 'z', '\x2', '\x2', '\xE7', '\xE9', '\x5', '\xAC', 
		'W', '\x2', '\xE8', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE6', 
		'\x3', '\x2', '\x2', '\x2', '\xE9', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\xEA', '\xF0', '\a', '\v', '\x2', '\x2', '\xEB', '\xEC', '\x5', '\x12', 
		'\n', '\x2', '\xEC', '\xED', '\a', '\xF', '\x2', '\x2', '\xED', '\xEF', 
		'\x3', '\x2', '\x2', '\x2', '\xEE', '\xEB', '\x3', '\x2', '\x2', '\x2', 
		'\xEF', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEE', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF7', 
		'\x3', '\x2', '\x2', '\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', 
		'\xF3', '\xF5', '\x5', '\x12', '\n', '\x2', '\xF4', '\xF6', '\a', '\xF', 
		'\x2', '\x2', '\xF5', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', 
		'\x3', '\x2', '\x2', '\x2', '\xF6', '\xF8', '\x3', '\x2', '\x2', '\x2', 
		'\xF7', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\x3', '\x2', 
		'\x2', '\x2', '\xF8', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', 
		'\a', '\r', '\x2', '\x2', '\xFA', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\xFB', '\xFE', '\x5', '\x14', '\v', '\x2', '\xFC', '\xFD', '\a', '\x64', 
		'\x2', '\x2', '\xFD', '\xFF', '\x5', '\x16', '\f', '\x2', '\xFE', '\xFC', 
		'\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', '\x2', 
		'\xFF', '\x13', '\x3', '\x2', '\x2', '\x2', '\x100', '\x103', '\x5', '\xA2', 
		'R', '\x2', '\x101', '\x103', '\a', 'z', '\x2', '\x2', '\x102', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x101', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\x15', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\t', '\x2', 
		'\x2', '\x2', '\x105', '\x17', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', 
		'\x5', '\x1E', '\x10', '\x2', '\x107', '\x108', '\a', '\xF', '\x2', '\x2', 
		'\x108', '\x19', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10C', '\a', '\x1C', 
		'\x2', '\x2', '\x10A', '\x10C', '\x5', '\xA2', 'R', '\x2', '\x10B', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x10A', '\x3', '\x2', '\x2', '\x2', 
		'\x10C', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\a', 
		'\x64', '\x2', '\x2', '\x10E', '\x110', '\x5', '\xA2', 'R', '\x2', '\x10F', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\x3', '\x2', '\x2', 
		'\x2', '\x110', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', 
		'\a', '\x65', '\x2', '\x2', '\x112', '\x113', '\a', 'z', '\x2', '\x2', 
		'\x113', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x114', '\x117', '\x5', 
		'\xA2', 'R', '\x2', '\x115', '\x116', '\a', '\x64', '\x2', '\x2', '\x116', 
		'\x118', '\x5', '\xA2', 'R', '\x2', '\x117', '\x115', '\x3', '\x2', '\x2', 
		'\x2', '\x117', '\x118', '\x3', '\x2', '\x2', '\x2', '\x118', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x11B', '\a', 'k', '\x2', '\x2', 
		'\x11A', '\x11C', '\a', '^', '\x2', '\x2', '\x11B', '\x11A', '\x3', '\x2', 
		'\x2', '\x2', '\x11B', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x11D', '\x120', '\x5', '\"', '\x12', '\x2', 
		'\x11E', '\x120', '\x5', '(', '\x15', '\x2', '\x11F', '\x11D', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x120', 
		'\x121', '\x3', '\x2', '\x2', '\x2', '\x121', '\x122', '\x5', '\xAC', 
		'W', '\x2', '\x122', '\x129', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', 
		'\a', 'k', '\x2', '\x2', '\x124', '\x125', '\a', '^', '\x2', '\x2', '\x125', 
		'\x126', '\x5', '\x84', '\x43', '\x2', '\x126', '\x127', '\x5', '\xAC', 
		'W', '\x2', '\x127', '\x129', '\x3', '\x2', '\x2', '\x2', '\x128', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '!', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\x5', '\x1A', 
		'\xE', '\x2', '\x12B', '\x12C', '\x5', '\x1C', '\xF', '\x2', '\x12C', 
		'\x12D', '\x5', '\xAC', 'W', '\x2', '\x12D', '\x135', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x130', '\x5', '$', '\x13', '\x2', '\x12F', '\x131', 
		'\x5', '\x1C', '\xF', '\x2', '\x130', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\x131', '\x3', '\x2', '\x2', '\x2', '\x131', '\x132', '\x3', 
		'\x2', '\x2', '\x2', '\x132', '\x133', '\x5', '\xAC', 'W', '\x2', '\x133', 
		'\x135', '\x3', '\x2', '\x2', '\x2', '\x134', '\x12A', '\x3', '\x2', '\x2', 
		'\x2', '\x134', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x135', '#', '\x3', 
		'\x2', '\x2', '\x2', '\x136', '\x13C', '\a', '\v', '\x2', '\x2', '\x137', 
		'\x138', '\x5', '&', '\x14', '\x2', '\x138', '\x139', '\a', '\xF', '\x2', 
		'\x2', '\x139', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x137', 
		'\x3', '\x2', '\x2', '\x2', '\x13B', '\x13E', '\x3', '\x2', '\x2', '\x2', 
		'\x13C', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', '\x3', 
		'\x2', '\x2', '\x2', '\x13D', '\x143', '\x3', '\x2', '\x2', '\x2', '\x13E', 
		'\x13C', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x141', '\x5', '&', '\x14', 
		'\x2', '\x140', '\x142', '\a', '\xF', '\x2', '\x2', '\x141', '\x140', 
		'\x3', '\x2', '\x2', '\x2', '\x141', '\x142', '\x3', '\x2', '\x2', '\x2', 
		'\x142', '\x144', '\x3', '\x2', '\x2', '\x2', '\x143', '\x13F', '\x3', 
		'\x2', '\x2', '\x2', '\x143', '\x144', '\x3', '\x2', '\x2', '\x2', '\x144', 
		'\x145', '\x3', '\x2', '\x2', '\x2', '\x145', '\x146', '\a', '\r', '\x2', 
		'\x2', '\x146', '%', '\x3', '\x2', '\x2', '\x2', '\x147', '\x14A', '\x5', 
		'\x14', '\v', '\x2', '\x148', '\x149', '\a', '\x64', '\x2', '\x2', '\x149', 
		'\x14B', '\x5', '\x14', '\v', '\x2', '\x14A', '\x148', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14B', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x14C', '\x150', '\x5', '*', '\x16', '\x2', '\x14D', 
		'\x150', '\x5', '\\', '/', '\x2', '\x14E', '\x150', '\x5', 'Z', '.', '\x2', 
		'\x14F', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x14D', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x150', 
		')', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\x5', ',', '\x17', 
		'\x2', '\x152', '\x153', '\x5', '\xAC', 'W', '\x2', '\x153', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x154', '\x155', '\x5', '\x38', '\x1D', '\x2', '\x155', 
		'\x15A', '\x5', '.', '\x18', '\x2', '\x156', '\x157', '\a', '\xF', '\x2', 
		'\x2', '\x157', '\x159', '\x5', '.', '\x18', '\x2', '\x158', '\x156', 
		'\x3', '\x2', '\x2', '\x2', '\x159', '\x15C', '\x3', '\x2', '\x2', '\x2', 
		'\x15A', '\x158', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\x3', 
		'\x2', '\x2', '\x2', '\x15B', '-', '\x3', '\x2', '\x2', '\x2', '\x15C', 
		'\x15A', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x160', '\x5', '\x88', 
		'\x45', '\x2', '\x15E', '\x15F', '\a', '\x10', '\x2', '\x2', '\x15F', 
		'\x161', '\x5', '\x84', '\x43', '\x2', '\x160', '\x15E', '\x3', '\x2', 
		'\x2', '\x2', '\x160', '\x161', '\x3', '\x2', '\x2', '\x2', '\x161', '/', 
		'\x3', '\x2', '\x2', '\x2', '\x162', '\x163', '\a', '\xE', '\x2', '\x2', 
		'\x163', '\x31', '\x3', '\x2', '\x2', '\x2', '\x164', '\x165', '\x6', 
		'\x1A', '\x2', '\x2', '\x165', '\x166', '\x5', '\x82', '\x42', '\x2', 
		'\x166', '\x167', '\x5', '\xAC', 'W', '\x2', '\x167', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x168', '\x169', '\a', '_', '\x2', '\x2', '\x169', '\x16A', 
		'\a', '\t', '\x2', '\x2', '\x16A', '\x16B', '\x5', '\x82', '\x42', '\x2', 
		'\x16B', '\x16C', '\a', '\n', '\x2', '\x2', '\x16C', '\x16F', '\x5', '\x6', 
		'\x4', '\x2', '\x16D', '\x16E', '\a', 'O', '\x2', '\x2', '\x16E', '\x170', 
		'\x5', '\x6', '\x4', '\x2', '\x16F', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\x16F', '\x170', '\x3', '\x2', '\x2', '\x2', '\x170', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x171', '\x172', '\a', 'K', '\x2', '\x2', '\x172', 
		'\x173', '\x5', '\x6', '\x4', '\x2', '\x173', '\x174', '\a', 'Y', '\x2', 
		'\x2', '\x174', '\x175', '\a', '\t', '\x2', '\x2', '\x175', '\x176', '\x5', 
		'\x82', '\x42', '\x2', '\x176', '\x177', '\a', '\n', '\x2', '\x2', '\x177', 
		'\x178', '\x5', '\xAC', 'W', '\x2', '\x178', '\x1AA', '\x3', '\x2', '\x2', 
		'\x2', '\x179', '\x17A', '\a', 'Y', '\x2', '\x2', '\x17A', '\x17B', '\a', 
		'\t', '\x2', '\x2', '\x17B', '\x17C', '\x5', '\x82', '\x42', '\x2', '\x17C', 
		'\x17D', '\a', '\n', '\x2', '\x2', '\x17D', '\x17E', '\x5', '\x6', '\x4', 
		'\x2', '\x17E', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', 
		'\a', 'W', '\x2', '\x2', '\x180', '\x183', '\a', '\t', '\x2', '\x2', '\x181', 
		'\x184', '\x5', '\x82', '\x42', '\x2', '\x182', '\x184', '\x5', ',', '\x17', 
		'\x2', '\x183', '\x181', '\x3', '\x2', '\x2', '\x2', '\x183', '\x182', 
		'\x3', '\x2', '\x2', '\x2', '\x183', '\x184', '\x3', '\x2', '\x2', '\x2', 
		'\x184', '\x185', '\x3', '\x2', '\x2', '\x2', '\x185', '\x187', '\a', 
		'\xE', '\x2', '\x2', '\x186', '\x188', '\x5', '\x82', '\x42', '\x2', '\x187', 
		'\x186', '\x3', '\x2', '\x2', '\x2', '\x187', '\x188', '\x3', '\x2', '\x2', 
		'\x2', '\x188', '\x189', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18B', 
		'\a', '\xE', '\x2', '\x2', '\x18A', '\x18C', '\x5', '\x82', '\x42', '\x2', 
		'\x18B', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18C', '\x3', 
		'\x2', '\x2', '\x2', '\x18C', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x18D', 
		'\x18E', '\a', '\n', '\x2', '\x2', '\x18E', '\x1AA', '\x5', '\x6', '\x4', 
		'\x2', '\x18F', '\x190', '\a', 'W', '\x2', '\x2', '\x190', '\x193', '\a', 
		'\t', '\x2', '\x2', '\x191', '\x194', '\x5', '\x84', '\x43', '\x2', '\x192', 
		'\x194', '\x5', ',', '\x17', '\x2', '\x193', '\x191', '\x3', '\x2', '\x2', 
		'\x2', '\x193', '\x192', '\x3', '\x2', '\x2', '\x2', '\x194', '\x195', 
		'\x3', '\x2', '\x2', '\x2', '\x195', '\x196', '\a', '\x62', '\x2', '\x2', 
		'\x196', '\x197', '\x5', '\x82', '\x42', '\x2', '\x197', '\x198', '\a', 
		'\n', '\x2', '\x2', '\x198', '\x199', '\x5', '\x6', '\x4', '\x2', '\x199', 
		'\x1AA', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x19C', '\a', 'W', '\x2', 
		'\x2', '\x19B', '\x19D', '\a', 'n', '\x2', '\x2', '\x19C', '\x19B', '\x3', 
		'\x2', '\x2', '\x2', '\x19C', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19D', 
		'\x19E', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x1A1', '\a', '\t', '\x2', 
		'\x2', '\x19F', '\x1A2', '\x5', '\x84', '\x43', '\x2', '\x1A0', '\x1A2', 
		'\x5', ',', '\x17', '\x2', '\x1A1', '\x19F', '\x3', '\x2', '\x2', '\x2', 
		'\x1A1', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3', '\x3', 
		'\x2', '\x2', '\x2', '\x1A3', '\x1A4', '\x5', '\xA4', 'S', '\x2', '\x1A4', 
		'\x1A5', '\x6', '\x1C', '\x3', '\x2', '\x1A5', '\x1A6', '\x5', '\x82', 
		'\x42', '\x2', '\x1A6', '\x1A7', '\a', '\n', '\x2', '\x2', '\x1A7', '\x1A8', 
		'\x5', '\x6', '\x4', '\x2', '\x1A8', '\x1AA', '\x3', '\x2', '\x2', '\x2', 
		'\x1A9', '\x171', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x179', '\x3', 
		'\x2', '\x2', '\x2', '\x1A9', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x1A9', 
		'\x18F', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x19A', '\x3', '\x2', '\x2', 
		'\x2', '\x1AA', '\x37', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AF', 
		'\a', 'Q', '\x2', '\x2', '\x1AC', '\x1AF', '\x5', '\xAA', 'V', '\x2', 
		'\x1AD', '\x1AF', '\a', 'j', '\x2', '\x2', '\x1AE', '\x1AB', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AD', 
		'\x3', '\x2', '\x2', '\x2', '\x1AF', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x1B0', '\x1B3', '\a', 'V', '\x2', '\x2', '\x1B1', '\x1B2', '\x6', '\x1E', 
		'\x4', '\x2', '\x1B2', '\x1B4', '\x5', '\xA4', 'S', '\x2', '\x1B3', '\x1B1', 
		'\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B4', '\x3', '\x2', '\x2', '\x2', 
		'\x1B4', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B6', '\x5', 
		'\xAC', 'W', '\x2', '\x1B6', ';', '\x3', '\x2', '\x2', '\x2', '\x1B7', 
		'\x1BA', '\a', 'J', '\x2', '\x2', '\x1B8', '\x1B9', '\x6', '\x1F', '\x5', 
		'\x2', '\x1B9', '\x1BB', '\x5', '\xA4', 'S', '\x2', '\x1BA', '\x1B8', 
		'\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BB', '\x3', '\x2', '\x2', '\x2', 
		'\x1BB', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BD', '\x5', 
		'\xAC', 'W', '\x2', '\x1BD', '=', '\x3', '\x2', '\x2', '\x2', '\x1BE', 
		'\x1C1', '\a', 'T', '\x2', '\x2', '\x1BF', '\x1C0', '\x6', ' ', '\x6', 
		'\x2', '\x1C0', '\x1C2', '\x5', '\x82', '\x42', '\x2', '\x1C1', '\x1BF', 
		'\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C2', '\x3', '\x2', '\x2', '\x2', 
		'\x1C2', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C4', '\x5', 
		'\xAC', 'W', '\x2', '\x1C4', '?', '\x3', '\x2', '\x2', '\x2', '\x1C5', 
		'\x1C8', '\a', 'o', '\x2', '\x2', '\x1C6', '\x1C7', '\x6', '!', '\a', 
		'\x2', '\x1C7', '\x1C9', '\x5', '\x82', '\x42', '\x2', '\x1C8', '\x1C6', 
		'\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\x3', '\x2', '\x2', '\x2', 
		'\x1C9', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CB', '\x5', 
		'\xAC', 'W', '\x2', '\x1CB', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1CC', 
		'\x1CD', '\a', ']', '\x2', '\x2', '\x1CD', '\x1CE', '\a', '\t', '\x2', 
		'\x2', '\x1CE', '\x1CF', '\x5', '\x82', '\x42', '\x2', '\x1CF', '\x1D0', 
		'\a', '\n', '\x2', '\x2', '\x1D0', '\x1D1', '\x5', '\x6', '\x4', '\x2', 
		'\x1D1', '\x43', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D3', '\a', 'X', 
		'\x2', '\x2', '\x1D3', '\x1D4', '\a', '\t', '\x2', '\x2', '\x1D4', '\x1D5', 
		'\x5', '\x82', '\x42', '\x2', '\x1D5', '\x1D6', '\a', '\n', '\x2', '\x2', 
		'\x1D6', '\x1D7', '\x5', '\x46', '$', '\x2', '\x1D7', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x1D8', '\x1DA', '\a', '\v', '\x2', '\x2', '\x1D9', '\x1DB', 
		'\x5', 'H', '%', '\x2', '\x1DA', '\x1D9', '\x3', '\x2', '\x2', '\x2', 
		'\x1DA', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1E0', '\x3', 
		'\x2', '\x2', '\x2', '\x1DC', '\x1DE', '\x5', 'L', '\'', '\x2', '\x1DD', 
		'\x1DF', '\x5', 'H', '%', '\x2', '\x1DE', '\x1DD', '\x3', '\x2', '\x2', 
		'\x2', '\x1DE', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1E1', 
		'\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1DC', '\x3', '\x2', '\x2', '\x2', 
		'\x1E0', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E2', '\x3', 
		'\x2', '\x2', '\x2', '\x1E2', '\x1E3', '\a', '\r', '\x2', '\x2', '\x1E3', 
		'G', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E6', '\x5', 'J', '&', '\x2', 
		'\x1E5', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\x3', 
		'\x2', '\x2', '\x2', '\x1E7', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E7', 
		'\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1E8', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\x1E9', '\x1EA', '\a', 'N', '\x2', '\x2', '\x1EA', '\x1EB', '\x5', 
		'\x82', '\x42', '\x2', '\x1EB', '\x1ED', '\a', '\x13', '\x2', '\x2', '\x1EC', 
		'\x1EE', '\x5', '\n', '\x6', '\x2', '\x1ED', '\x1EC', '\x3', '\x2', '\x2', 
		'\x2', '\x1ED', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1EE', 'K', '\x3', 
		'\x2', '\x2', '\x2', '\x1EF', '\x1F0', '\a', '^', '\x2', '\x2', '\x1F0', 
		'\x1F2', '\a', '\x13', '\x2', '\x2', '\x1F1', '\x1F3', '\x5', '\n', '\x6', 
		'\x2', '\x1F2', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F3', 
		'\x3', '\x2', '\x2', '\x2', '\x1F3', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\x1F4', '\x1F5', '\x5', '\xA4', 'S', '\x2', '\x1F5', '\x1F6', '\a', '\x13', 
		'\x2', '\x2', '\x1F6', '\x1F7', '\x5', '\x6', '\x4', '\x2', '\x1F7', 'O', 
		'\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F9', '\a', '`', '\x2', '\x2', 
		'\x1F9', '\x1FA', '\x6', ')', '\b', '\x2', '\x1FA', '\x1FB', '\x5', '\x82', 
		'\x42', '\x2', '\x1FB', '\x1FC', '\x5', '\xAC', 'W', '\x2', '\x1FC', 'Q', 
		'\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FE', '\a', '\x63', '\x2', '\x2', 
		'\x1FE', '\x204', '\x5', '\b', '\x5', '\x2', '\x1FF', '\x201', '\x5', 
		'T', '+', '\x2', '\x200', '\x202', '\x5', 'V', ',', '\x2', '\x201', '\x200', 
		'\x3', '\x2', '\x2', '\x2', '\x201', '\x202', '\x3', '\x2', '\x2', '\x2', 
		'\x202', '\x205', '\x3', '\x2', '\x2', '\x2', '\x203', '\x205', '\x5', 
		'V', ',', '\x2', '\x204', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x204', 
		'\x203', '\x3', '\x2', '\x2', '\x2', '\x205', 'S', '\x3', '\x2', '\x2', 
		'\x2', '\x206', '\x20C', '\a', 'R', '\x2', '\x2', '\x207', '\x209', '\a', 
		'\t', '\x2', '\x2', '\x208', '\x20A', '\x5', '\x88', '\x45', '\x2', '\x209', 
		'\x208', '\x3', '\x2', '\x2', '\x2', '\x209', '\x20A', '\x3', '\x2', '\x2', 
		'\x2', '\x20A', '\x20B', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x20D', 
		'\a', '\n', '\x2', '\x2', '\x20C', '\x207', '\x3', '\x2', '\x2', '\x2', 
		'\x20C', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x20E', '\x3', 
		'\x2', '\x2', '\x2', '\x20E', '\x20F', '\x5', '\b', '\x5', '\x2', '\x20F', 
		'U', '\x3', '\x2', '\x2', '\x2', '\x210', '\x211', '\a', 'S', '\x2', '\x2', 
		'\x211', '\x212', '\x5', '\b', '\x5', '\x2', '\x212', 'W', '\x3', '\x2', 
		'\x2', '\x2', '\x213', '\x214', '\a', 'Z', '\x2', '\x2', '\x214', '\x215', 
		'\x5', '\xAC', 'W', '\x2', '\x215', 'Y', '\x3', '\x2', '\x2', '\x2', '\x216', 
		'\x218', '\a', 'm', '\x2', '\x2', '\x217', '\x216', '\x3', '\x2', '\x2', 
		'\x2', '\x217', '\x218', '\x3', '\x2', '\x2', '\x2', '\x218', '\x219', 
		'\x3', '\x2', '\x2', '\x2', '\x219', '\x21B', '\a', '[', '\x2', '\x2', 
		'\x21A', '\x21C', '\a', '\x1C', '\x2', '\x2', '\x21B', '\x21A', '\x3', 
		'\x2', '\x2', '\x2', '\x21B', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x21C', 
		'\x21D', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x21E', '\x5', '\xA4', 
		'S', '\x2', '\x21E', '\x220', '\a', '\t', '\x2', '\x2', '\x21F', '\x221', 
		'\x5', 'j', '\x36', '\x2', '\x220', '\x21F', '\x3', '\x2', '\x2', '\x2', 
		'\x220', '\x221', '\x3', '\x2', '\x2', '\x2', '\x221', '\x222', '\x3', 
		'\x2', '\x2', '\x2', '\x222', '\x223', '\a', '\n', '\x2', '\x2', '\x223', 
		'\x224', '\x5', 'p', '\x39', '\x2', '\x224', '[', '\x3', '\x2', '\x2', 
		'\x2', '\x225', '\x226', '\a', '\x66', '\x2', '\x2', '\x226', '\x227', 
		'\x5', '\xA4', 'S', '\x2', '\x227', '\x228', '\x5', '^', '\x30', '\x2', 
		'\x228', ']', '\x3', '\x2', '\x2', '\x2', '\x229', '\x22A', '\a', 'h', 
		'\x2', '\x2', '\x22A', '\x22C', '\x5', '\x84', '\x43', '\x2', '\x22B', 
		'\x229', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x22C', '\x3', '\x2', '\x2', 
		'\x2', '\x22C', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x231', 
		'\a', '\v', '\x2', '\x2', '\x22E', '\x230', '\x5', '`', '\x31', '\x2', 
		'\x22F', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x230', '\x233', '\x3', 
		'\x2', '\x2', '\x2', '\x231', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x231', 
		'\x232', '\x3', '\x2', '\x2', '\x2', '\x232', '\x234', '\x3', '\x2', '\x2', 
		'\x2', '\x233', '\x231', '\x3', '\x2', '\x2', '\x2', '\x234', '\x235', 
		'\a', '\r', '\x2', '\x2', '\x235', '_', '\x3', '\x2', '\x2', '\x2', '\x236', 
		'\x23A', '\a', 'x', '\x2', '\x2', '\x237', '\x238', '\x6', '\x31', '\t', 
		'\x2', '\x238', '\x23A', '\x5', '\xA4', 'S', '\x2', '\x239', '\x236', 
		'\x3', '\x2', '\x2', '\x2', '\x239', '\x237', '\x3', '\x2', '\x2', '\x2', 
		'\x239', '\x23A', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x23B', '\x3', 
		'\x2', '\x2', '\x2', '\x23B', '\x24A', '\x5', '\x62', '\x32', '\x2', '\x23C', 
		'\x240', '\a', 'x', '\x2', '\x2', '\x23D', '\x23E', '\x6', '\x31', '\n', 
		'\x2', '\x23E', '\x240', '\x5', '\xA4', 'S', '\x2', '\x23F', '\x23C', 
		'\x3', '\x2', '\x2', '\x2', '\x23F', '\x23D', '\x3', '\x2', '\x2', '\x2', 
		'\x23F', '\x240', '\x3', '\x2', '\x2', '\x2', '\x240', '\x241', '\x3', 
		'\x2', '\x2', '\x2', '\x241', '\x24A', '\x5', '\x64', '\x33', '\x2', '\x242', 
		'\x246', '\a', 'x', '\x2', '\x2', '\x243', '\x244', '\x6', '\x31', '\v', 
		'\x2', '\x244', '\x246', '\x5', '\xA4', 'S', '\x2', '\x245', '\x242', 
		'\x3', '\x2', '\x2', '\x2', '\x245', '\x243', '\x3', '\x2', '\x2', '\x2', 
		'\x246', '\x247', '\x3', '\x2', '\x2', '\x2', '\x247', '\x24A', '\x5', 
		'\b', '\x5', '\x2', '\x248', '\x24A', '\x5', '\x30', '\x19', '\x2', '\x249', 
		'\x239', '\x3', '\x2', '\x2', '\x2', '\x249', '\x23F', '\x3', '\x2', '\x2', 
		'\x2', '\x249', '\x245', '\x3', '\x2', '\x2', '\x2', '\x249', '\x248', 
		'\x3', '\x2', '\x2', '\x2', '\x24A', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x24B', '\x24C', '\a', 'm', '\x2', '\x2', '\x24C', '\x24E', '\x6', '\x32', 
		'\f', '\x2', '\x24D', '\x24B', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x24E', 
		'\x3', '\x2', '\x2', '\x2', '\x24E', '\x250', '\x3', '\x2', '\x2', '\x2', 
		'\x24F', '\x251', '\a', '\x1C', '\x2', '\x2', '\x250', '\x24F', '\x3', 
		'\x2', '\x2', '\x2', '\x250', '\x251', '\x3', '\x2', '\x2', '\x2', '\x251', 
		'\x252', '\x3', '\x2', '\x2', '\x2', '\x252', '\x253', '\x5', '\x66', 
		'\x34', '\x2', '\x253', '\x255', '\a', '\t', '\x2', '\x2', '\x254', '\x256', 
		'\x5', 'j', '\x36', '\x2', '\x255', '\x254', '\x3', '\x2', '\x2', '\x2', 
		'\x255', '\x256', '\x3', '\x2', '\x2', '\x2', '\x256', '\x257', '\x3', 
		'\x2', '\x2', '\x2', '\x257', '\x258', '\a', '\n', '\x2', '\x2', '\x258', 
		'\x259', '\x5', 'p', '\x39', '\x2', '\x259', '\x26E', '\x3', '\x2', '\x2', 
		'\x2', '\x25A', '\x25C', '\a', '\x1C', '\x2', '\x2', '\x25B', '\x25A', 
		'\x3', '\x2', '\x2', '\x2', '\x25B', '\x25C', '\x3', '\x2', '\x2', '\x2', 
		'\x25C', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x25D', '\x25E', '\x5', 
		'\x9E', 'P', '\x2', '\x25E', '\x25F', '\a', '\t', '\x2', '\x2', '\x25F', 
		'\x260', '\a', '\n', '\x2', '\x2', '\x260', '\x261', '\x5', 'p', '\x39', 
		'\x2', '\x261', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x262', '\x264', 
		'\a', '\x1C', '\x2', '\x2', '\x263', '\x262', '\x3', '\x2', '\x2', '\x2', 
		'\x263', '\x264', '\x3', '\x2', '\x2', '\x2', '\x264', '\x265', '\x3', 
		'\x2', '\x2', '\x2', '\x265', '\x266', '\x5', '\xA0', 'Q', '\x2', '\x266', 
		'\x268', '\a', '\t', '\x2', '\x2', '\x267', '\x269', '\x5', 'j', '\x36', 
		'\x2', '\x268', '\x267', '\x3', '\x2', '\x2', '\x2', '\x268', '\x269', 
		'\x3', '\x2', '\x2', '\x2', '\x269', '\x26A', '\x3', '\x2', '\x2', '\x2', 
		'\x26A', '\x26B', '\a', '\n', '\x2', '\x2', '\x26B', '\x26C', '\x5', 'p', 
		'\x39', '\x2', '\x26C', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x26D', 
		'\x24D', '\x3', '\x2', '\x2', '\x2', '\x26D', '\x25B', '\x3', '\x2', '\x2', 
		'\x2', '\x26D', '\x263', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x26F', '\x271', '\x5', '\x66', '\x34', '\x2', 
		'\x270', '\x272', '\x5', '\x86', '\x44', '\x2', '\x271', '\x270', '\x3', 
		'\x2', '\x2', '\x2', '\x271', '\x272', '\x3', '\x2', '\x2', '\x2', '\x272', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x273', '\x276', '\x5', '|', '?', 
		'\x2', '\x274', '\x276', '\x5', 'h', '\x35', '\x2', '\x275', '\x273', 
		'\x3', '\x2', '\x2', '\x2', '\x275', '\x274', '\x3', '\x2', '\x2', '\x2', 
		'\x276', 'g', '\x3', '\x2', '\x2', '\x2', '\x277', '\x278', '\a', '!', 
		'\x2', '\x2', '\x278', '\x279', '\x5', '\xA2', 'R', '\x2', '\x279', 'i', 
		'\x3', '\x2', '\x2', '\x2', '\x27A', '\x27F', '\x5', 'l', '\x37', '\x2', 
		'\x27B', '\x27C', '\a', '\xF', '\x2', '\x2', '\x27C', '\x27E', '\x5', 
		'l', '\x37', '\x2', '\x27D', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x27E', 
		'\x281', '\x3', '\x2', '\x2', '\x2', '\x27F', '\x27D', '\x3', '\x2', '\x2', 
		'\x2', '\x27F', '\x280', '\x3', '\x2', '\x2', '\x2', '\x280', '\x284', 
		'\x3', '\x2', '\x2', '\x2', '\x281', '\x27F', '\x3', '\x2', '\x2', '\x2', 
		'\x282', '\x283', '\a', '\xF', '\x2', '\x2', '\x283', '\x285', '\x5', 
		'n', '\x38', '\x2', '\x284', '\x282', '\x3', '\x2', '\x2', '\x2', '\x284', 
		'\x285', '\x3', '\x2', '\x2', '\x2', '\x285', '\x288', '\x3', '\x2', '\x2', 
		'\x2', '\x286', '\x288', '\x5', 'n', '\x38', '\x2', '\x287', '\x27A', 
		'\x3', '\x2', '\x2', '\x2', '\x287', '\x286', '\x3', '\x2', '\x2', '\x2', 
		'\x288', 'k', '\x3', '\x2', '\x2', '\x2', '\x289', '\x28C', '\x5', '\x88', 
		'\x45', '\x2', '\x28A', '\x28B', '\a', '\x10', '\x2', '\x2', '\x28B', 
		'\x28D', '\x5', '\x84', '\x43', '\x2', '\x28C', '\x28A', '\x3', '\x2', 
		'\x2', '\x2', '\x28C', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x28D', 'm', 
		'\x3', '\x2', '\x2', '\x2', '\x28E', '\x28F', '\a', '\x14', '\x2', '\x2', 
		'\x28F', '\x290', '\x5', '\x84', '\x43', '\x2', '\x290', 'o', '\x3', '\x2', 
		'\x2', '\x2', '\x291', '\x293', '\a', '\v', '\x2', '\x2', '\x292', '\x294', 
		'\x5', 'r', ':', '\x2', '\x293', '\x292', '\x3', '\x2', '\x2', '\x2', 
		'\x293', '\x294', '\x3', '\x2', '\x2', '\x2', '\x294', '\x295', '\x3', 
		'\x2', '\x2', '\x2', '\x295', '\x296', '\a', '\r', '\x2', '\x2', '\x296', 
		'q', '\x3', '\x2', '\x2', '\x2', '\x297', '\x299', '\x5', '\x4', '\x3', 
		'\x2', '\x298', '\x297', '\x3', '\x2', '\x2', '\x2', '\x299', '\x29A', 
		'\x3', '\x2', '\x2', '\x2', '\x29A', '\x298', '\x3', '\x2', '\x2', '\x2', 
		'\x29A', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x29B', 's', '\x3', '\x2', 
		'\x2', '\x2', '\x29C', '\x29D', '\a', '\a', '\x2', '\x2', '\x29D', '\x29E', 
		'\x5', 'v', '<', '\x2', '\x29E', '\x29F', '\a', '\b', '\x2', '\x2', '\x29F', 
		'u', '\x3', '\x2', '\x2', '\x2', '\x2A0', '\x2A2', '\a', '\xF', '\x2', 
		'\x2', '\x2A1', '\x2A0', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2A5', 
		'\x3', '\x2', '\x2', '\x2', '\x2A3', '\x2A1', '\x3', '\x2', '\x2', '\x2', 
		'\x2A3', '\x2A4', '\x3', '\x2', '\x2', '\x2', '\x2A4', '\x2A7', '\x3', 
		'\x2', '\x2', '\x2', '\x2A5', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x2A6', 
		'\x2A8', '\x5', 'x', '=', '\x2', '\x2A7', '\x2A6', '\x3', '\x2', '\x2', 
		'\x2', '\x2A7', '\x2A8', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x2B1', 
		'\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AB', '\a', '\xF', '\x2', '\x2', 
		'\x2AA', '\x2A9', '\x3', '\x2', '\x2', '\x2', '\x2AB', '\x2AC', '\x3', 
		'\x2', '\x2', '\x2', '\x2AC', '\x2AA', '\x3', '\x2', '\x2', '\x2', '\x2AC', 
		'\x2AD', '\x3', '\x2', '\x2', '\x2', '\x2AD', '\x2AE', '\x3', '\x2', '\x2', 
		'\x2', '\x2AE', '\x2B0', '\x5', 'x', '=', '\x2', '\x2AF', '\x2AA', '\x3', 
		'\x2', '\x2', '\x2', '\x2B0', '\x2B3', '\x3', '\x2', '\x2', '\x2', '\x2B1', 
		'\x2AF', '\x3', '\x2', '\x2', '\x2', '\x2B1', '\x2B2', '\x3', '\x2', '\x2', 
		'\x2', '\x2B2', '\x2B7', '\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B1', 
		'\x3', '\x2', '\x2', '\x2', '\x2B4', '\x2B6', '\a', '\xF', '\x2', '\x2', 
		'\x2B5', '\x2B4', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2B9', '\x3', 
		'\x2', '\x2', '\x2', '\x2B7', '\x2B5', '\x3', '\x2', '\x2', '\x2', '\x2B7', 
		'\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2B8', 'w', '\x3', '\x2', '\x2', 
		'\x2', '\x2B9', '\x2B7', '\x3', '\x2', '\x2', '\x2', '\x2BA', '\x2BC', 
		'\a', '\x14', '\x2', '\x2', '\x2BB', '\x2BA', '\x3', '\x2', '\x2', '\x2', 
		'\x2BB', '\x2BC', '\x3', '\x2', '\x2', '\x2', '\x2BC', '\x2BD', '\x3', 
		'\x2', '\x2', '\x2', '\x2BD', '\x2BE', '\x5', '\x84', '\x43', '\x2', '\x2BE', 
		'y', '\x3', '\x2', '\x2', '\x2', '\x2BF', '\x2C0', '\x5', '|', '?', '\x2', 
		'\x2C0', '\x2C1', '\a', '\x13', '\x2', '\x2', '\x2C1', '\x2C2', '\x5', 
		'\x84', '\x43', '\x2', '\x2C2', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2C3', 
		'\x2C4', '\a', '\a', '\x2', '\x2', '\x2C4', '\x2C5', '\x5', '\x84', '\x43', 
		'\x2', '\x2C5', '\x2C6', '\a', '\b', '\x2', '\x2', '\x2C6', '\x2C7', '\a', 
		'\x13', '\x2', '\x2', '\x2C7', '\x2C8', '\x5', '\x84', '\x43', '\x2', 
		'\x2C8', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2C9', '\x2CB', '\a', 
		'm', '\x2', '\x2', '\x2CA', '\x2C9', '\x3', '\x2', '\x2', '\x2', '\x2CA', 
		'\x2CB', '\x3', '\x2', '\x2', '\x2', '\x2CB', '\x2CD', '\x3', '\x2', '\x2', 
		'\x2', '\x2CC', '\x2CE', '\a', '\x1C', '\x2', '\x2', '\x2CD', '\x2CC', 
		'\x3', '\x2', '\x2', '\x2', '\x2CD', '\x2CE', '\x3', '\x2', '\x2', '\x2', 
		'\x2CE', '\x2CF', '\x3', '\x2', '\x2', '\x2', '\x2CF', '\x2D0', '\x5', 
		'|', '?', '\x2', '\x2D0', '\x2D2', '\a', '\t', '\x2', '\x2', '\x2D1', 
		'\x2D3', '\x5', 'j', '\x36', '\x2', '\x2D2', '\x2D1', '\x3', '\x2', '\x2', 
		'\x2', '\x2D2', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2D4', 
		'\x3', '\x2', '\x2', '\x2', '\x2D4', '\x2D5', '\a', '\n', '\x2', '\x2', 
		'\x2D5', '\x2D6', '\x5', 'p', '\x39', '\x2', '\x2D6', '\x2E7', '\x3', 
		'\x2', '\x2', '\x2', '\x2D7', '\x2D8', '\x5', '\x9E', 'P', '\x2', '\x2D8', 
		'\x2D9', '\a', '\t', '\x2', '\x2', '\x2D9', '\x2DA', '\a', '\n', '\x2', 
		'\x2', '\x2DA', '\x2DB', '\x5', 'p', '\x39', '\x2', '\x2DB', '\x2E7', 
		'\x3', '\x2', '\x2', '\x2', '\x2DC', '\x2DD', '\x5', '\xA0', 'Q', '\x2', 
		'\x2DD', '\x2DE', '\a', '\t', '\x2', '\x2', '\x2DE', '\x2DF', '\x5', 'l', 
		'\x37', '\x2', '\x2DF', '\x2E0', '\a', '\n', '\x2', '\x2', '\x2E0', '\x2E1', 
		'\x5', 'p', '\x39', '\x2', '\x2E1', '\x2E7', '\x3', '\x2', '\x2', '\x2', 
		'\x2E2', '\x2E4', '\a', '\x14', '\x2', '\x2', '\x2E3', '\x2E2', '\x3', 
		'\x2', '\x2', '\x2', '\x2E3', '\x2E4', '\x3', '\x2', '\x2', '\x2', '\x2E4', 
		'\x2E5', '\x3', '\x2', '\x2', '\x2', '\x2E5', '\x2E7', '\x5', '\x84', 
		'\x43', '\x2', '\x2E6', '\x2BF', '\x3', '\x2', '\x2', '\x2', '\x2E6', 
		'\x2C3', '\x3', '\x2', '\x2', '\x2', '\x2E6', '\x2CA', '\x3', '\x2', '\x2', 
		'\x2', '\x2E6', '\x2D7', '\x3', '\x2', '\x2', '\x2', '\x2E6', '\x2DC', 
		'\x3', '\x2', '\x2', '\x2', '\x2E6', '\x2E3', '\x3', '\x2', '\x2', '\x2', 
		'\x2E7', '{', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2F0', '\x5', '\xA2', 
		'R', '\x2', '\x2E9', '\x2F0', '\a', 'z', '\x2', '\x2', '\x2EA', '\x2F0', 
		'\x5', '\x9A', 'N', '\x2', '\x2EB', '\x2EC', '\a', '\a', '\x2', '\x2', 
		'\x2EC', '\x2ED', '\x5', '\x84', '\x43', '\x2', '\x2ED', '\x2EE', '\a', 
		'\b', '\x2', '\x2', '\x2EE', '\x2F0', '\x3', '\x2', '\x2', '\x2', '\x2EF', 
		'\x2E8', '\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2E9', '\x3', '\x2', '\x2', 
		'\x2', '\x2EF', '\x2EA', '\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2EB', 
		'\x3', '\x2', '\x2', '\x2', '\x2F0', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x2F1', '\x2FD', '\a', '\t', '\x2', '\x2', '\x2F2', '\x2F7', '\x5', '\x80', 
		'\x41', '\x2', '\x2F3', '\x2F4', '\a', '\xF', '\x2', '\x2', '\x2F4', '\x2F6', 
		'\x5', '\x80', '\x41', '\x2', '\x2F5', '\x2F3', '\x3', '\x2', '\x2', '\x2', 
		'\x2F6', '\x2F9', '\x3', '\x2', '\x2', '\x2', '\x2F7', '\x2F5', '\x3', 
		'\x2', '\x2', '\x2', '\x2F7', '\x2F8', '\x3', '\x2', '\x2', '\x2', '\x2F8', 
		'\x2FB', '\x3', '\x2', '\x2', '\x2', '\x2F9', '\x2F7', '\x3', '\x2', '\x2', 
		'\x2', '\x2FA', '\x2FC', '\a', '\xF', '\x2', '\x2', '\x2FB', '\x2FA', 
		'\x3', '\x2', '\x2', '\x2', '\x2FB', '\x2FC', '\x3', '\x2', '\x2', '\x2', 
		'\x2FC', '\x2FE', '\x3', '\x2', '\x2', '\x2', '\x2FD', '\x2F2', '\x3', 
		'\x2', '\x2', '\x2', '\x2FD', '\x2FE', '\x3', '\x2', '\x2', '\x2', '\x2FE', 
		'\x2FF', '\x3', '\x2', '\x2', '\x2', '\x2FF', '\x300', '\a', '\n', '\x2', 
		'\x2', '\x300', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x301', '\x303', 
		'\a', '\x14', '\x2', '\x2', '\x302', '\x301', '\x3', '\x2', '\x2', '\x2', 
		'\x302', '\x303', '\x3', '\x2', '\x2', '\x2', '\x303', '\x306', '\x3', 
		'\x2', '\x2', '\x2', '\x304', '\x307', '\x5', '\x84', '\x43', '\x2', '\x305', 
		'\x307', '\x5', '\xA4', 'S', '\x2', '\x306', '\x304', '\x3', '\x2', '\x2', 
		'\x2', '\x306', '\x305', '\x3', '\x2', '\x2', '\x2', '\x307', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x308', '\x30D', '\x5', '\x84', '\x43', '\x2', 
		'\x309', '\x30A', '\a', '\xF', '\x2', '\x2', '\x30A', '\x30C', '\x5', 
		'\x84', '\x43', '\x2', '\x30B', '\x309', '\x3', '\x2', '\x2', '\x2', '\x30C', 
		'\x30F', '\x3', '\x2', '\x2', '\x2', '\x30D', '\x30B', '\x3', '\x2', '\x2', 
		'\x2', '\x30D', '\x30E', '\x3', '\x2', '\x2', '\x2', '\x30E', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x30F', '\x30D', '\x3', '\x2', '\x2', '\x2', 
		'\x310', '\x311', '\b', '\x43', '\x1', '\x2', '\x311', '\x345', '\x5', 
		'\x8C', 'G', '\x2', '\x312', '\x314', '\a', '\x66', '\x2', '\x2', '\x313', 
		'\x315', '\x5', '\xA4', 'S', '\x2', '\x314', '\x313', '\x3', '\x2', '\x2', 
		'\x2', '\x314', '\x315', '\x3', '\x2', '\x2', '\x2', '\x315', '\x316', 
		'\x3', '\x2', '\x2', '\x2', '\x316', '\x345', '\x5', '^', '\x30', '\x2', 
		'\x317', '\x318', '\a', 'P', '\x2', '\x2', '\x318', '\x319', '\x5', '\x84', 
		'\x43', '\x2', '\x319', '\x31A', '\x5', '~', '@', '\x2', '\x31A', '\x345', 
		'\x3', '\x2', '\x2', '\x2', '\x31B', '\x31C', '\a', 'P', '\x2', '\x2', 
		'\x31C', '\x345', '\x5', '\x84', '\x43', ',', '\x31D', '\x31E', '\a', 
		'P', '\x2', '\x2', '\x31E', '\x31F', '\a', '\x15', '\x2', '\x2', '\x31F', 
		'\x345', '\x5', '\xA4', 'S', '\x2', '\x320', '\x321', '\a', '\x61', '\x2', 
		'\x2', '\x321', '\x345', '\x5', '\x84', '\x43', '\'', '\x322', '\x323', 
		'\a', 'U', '\x2', '\x2', '\x323', '\x345', '\x5', '\x84', '\x43', '&', 
		'\x324', '\x325', '\a', 'M', '\x2', '\x2', '\x325', '\x345', '\x5', '\x84', 
		'\x43', '%', '\x326', '\x327', '\a', '\x16', '\x2', '\x2', '\x327', '\x345', 
		'\x5', '\x84', '\x43', '$', '\x328', '\x329', '\a', '\x17', '\x2', '\x2', 
		'\x329', '\x345', '\x5', '\x84', '\x43', '#', '\x32A', '\x32B', '\a', 
		'\x18', '\x2', '\x2', '\x32B', '\x345', '\x5', '\x84', '\x43', '\"', '\x32C', 
		'\x32D', '\a', '\x19', '\x2', '\x2', '\x32D', '\x345', '\x5', '\x84', 
		'\x43', '!', '\x32E', '\x32F', '\a', '\x1A', '\x2', '\x2', '\x32F', '\x345', 
		'\x5', '\x84', '\x43', ' ', '\x330', '\x331', '\a', '\x1B', '\x2', '\x2', 
		'\x331', '\x345', '\x5', '\x84', '\x43', '\x1F', '\x332', '\x333', '\a', 
		'n', '\x2', '\x2', '\x333', '\x345', '\x5', '\x84', '\x43', '\x1E', '\x334', 
		'\x335', '\a', 'l', '\x2', '\x2', '\x335', '\x336', '\a', '\t', '\x2', 
		'\x2', '\x336', '\x337', '\x5', '\x84', '\x43', '\x2', '\x337', '\x338', 
		'\a', '\n', '\x2', '\x2', '\x338', '\x345', '\x3', '\x2', '\x2', '\x2', 
		'\x339', '\x345', '\x5', '@', '!', '\x2', '\x33A', '\x345', '\a', '\\', 
		'\x2', '\x2', '\x33B', '\x345', '\x5', '\xA4', 'S', '\x2', '\x33C', '\x345', 
		'\a', 'i', '\x2', '\x2', '\x33D', '\x345', '\x5', '\x94', 'K', '\x2', 
		'\x33E', '\x345', '\x5', 't', ';', '\x2', '\x33F', '\x345', '\x5', '\x8A', 
		'\x46', '\x2', '\x340', '\x341', '\a', '\t', '\x2', '\x2', '\x341', '\x342', 
		'\x5', '\x82', '\x42', '\x2', '\x342', '\x343', '\a', '\n', '\x2', '\x2', 
		'\x343', '\x345', '\x3', '\x2', '\x2', '\x2', '\x344', '\x310', '\x3', 
		'\x2', '\x2', '\x2', '\x344', '\x312', '\x3', '\x2', '\x2', '\x2', '\x344', 
		'\x317', '\x3', '\x2', '\x2', '\x2', '\x344', '\x31B', '\x3', '\x2', '\x2', 
		'\x2', '\x344', '\x31D', '\x3', '\x2', '\x2', '\x2', '\x344', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x344', '\x322', '\x3', '\x2', '\x2', '\x2', 
		'\x344', '\x324', '\x3', '\x2', '\x2', '\x2', '\x344', '\x326', '\x3', 
		'\x2', '\x2', '\x2', '\x344', '\x328', '\x3', '\x2', '\x2', '\x2', '\x344', 
		'\x32A', '\x3', '\x2', '\x2', '\x2', '\x344', '\x32C', '\x3', '\x2', '\x2', 
		'\x2', '\x344', '\x32E', '\x3', '\x2', '\x2', '\x2', '\x344', '\x330', 
		'\x3', '\x2', '\x2', '\x2', '\x344', '\x332', '\x3', '\x2', '\x2', '\x2', 
		'\x344', '\x334', '\x3', '\x2', '\x2', '\x2', '\x344', '\x339', '\x3', 
		'\x2', '\x2', '\x2', '\x344', '\x33A', '\x3', '\x2', '\x2', '\x2', '\x344', 
		'\x33B', '\x3', '\x2', '\x2', '\x2', '\x344', '\x33C', '\x3', '\x2', '\x2', 
		'\x2', '\x344', '\x33D', '\x3', '\x2', '\x2', '\x2', '\x344', '\x33E', 
		'\x3', '\x2', '\x2', '\x2', '\x344', '\x33F', '\x3', '\x2', '\x2', '\x2', 
		'\x344', '\x340', '\x3', '\x2', '\x2', '\x2', '\x345', '\x39D', '\x3', 
		'\x2', '\x2', '\x2', '\x346', '\x347', '\f', '\x30', '\x2', '\x2', '\x347', 
		'\x348', '\a', '\x12', '\x2', '\x2', '\x348', '\x39C', '\x5', '\x84', 
		'\x43', '\x31', '\x349', '\x34A', '\f', '\x1D', '\x2', '\x2', '\x34A', 
		'\x34B', '\a', '\x1F', '\x2', '\x2', '\x34B', '\x39C', '\x5', '\x84', 
		'\x43', '\x1D', '\x34C', '\x34D', '\f', '\x1C', '\x2', '\x2', '\x34D', 
		'\x34E', '\t', '\x3', '\x2', '\x2', '\x34E', '\x39C', '\x5', '\x84', '\x43', 
		'\x1D', '\x34F', '\x350', '\f', '\x1B', '\x2', '\x2', '\x350', '\x351', 
		'\t', '\x4', '\x2', '\x2', '\x351', '\x39C', '\x5', '\x84', '\x43', '\x1C', 
		'\x352', '\x353', '\f', '\x1A', '\x2', '\x2', '\x353', '\x354', '\a', 
		' ', '\x2', '\x2', '\x354', '\x39C', '\x5', '\x84', '\x43', '\x1B', '\x355', 
		'\x356', '\f', '\x19', '\x2', '\x2', '\x356', '\x357', '\t', '\x5', '\x2', 
		'\x2', '\x357', '\x39C', '\x5', '\x84', '\x43', '\x1A', '\x358', '\x359', 
		'\f', '\x18', '\x2', '\x2', '\x359', '\x35A', '\t', '\x6', '\x2', '\x2', 
		'\x35A', '\x39C', '\x5', '\x84', '\x43', '\x19', '\x35B', '\x35C', '\f', 
		'\x17', '\x2', '\x2', '\x35C', '\x35D', '\a', 'L', '\x2', '\x2', '\x35D', 
		'\x39C', '\x5', '\x84', '\x43', '\x18', '\x35E', '\x35F', '\f', '\x16', 
		'\x2', '\x2', '\x35F', '\x360', '\a', '\x62', '\x2', '\x2', '\x360', '\x39C', 
		'\x5', '\x84', '\x43', '\x17', '\x361', '\x362', '\f', '\x15', '\x2', 
		'\x2', '\x362', '\x363', '\t', '\a', '\x2', '\x2', '\x363', '\x39C', '\x5', 
		'\x84', '\x43', '\x16', '\x364', '\x365', '\f', '\x14', '\x2', '\x2', 
		'\x365', '\x366', '\a', '-', '\x2', '\x2', '\x366', '\x39C', '\x5', '\x84', 
		'\x43', '\x15', '\x367', '\x368', '\f', '\x13', '\x2', '\x2', '\x368', 
		'\x369', '\a', '.', '\x2', '\x2', '\x369', '\x39C', '\x5', '\x84', '\x43', 
		'\x14', '\x36A', '\x36B', '\f', '\x12', '\x2', '\x2', '\x36B', '\x36C', 
		'\a', '/', '\x2', '\x2', '\x36C', '\x39C', '\x5', '\x84', '\x43', '\x13', 
		'\x36D', '\x36E', '\f', '\x11', '\x2', '\x2', '\x36E', '\x36F', '\a', 
		'\x30', '\x2', '\x2', '\x36F', '\x39C', '\x5', '\x84', '\x43', '\x12', 
		'\x370', '\x371', '\f', '\x10', '\x2', '\x2', '\x371', '\x372', '\a', 
		'\x31', '\x2', '\x2', '\x372', '\x39C', '\x5', '\x84', '\x43', '\x11', 
		'\x373', '\x374', '\f', '\xF', '\x2', '\x2', '\x374', '\x375', '\a', '\x11', 
		'\x2', '\x2', '\x375', '\x376', '\x5', '\x84', '\x43', '\x2', '\x376', 
		'\x377', '\a', '\x13', '\x2', '\x2', '\x377', '\x378', '\x5', '\x84', 
		'\x43', '\x10', '\x378', '\x39C', '\x3', '\x2', '\x2', '\x2', '\x379', 
		'\x37A', '\f', '\xE', '\x2', '\x2', '\x37A', '\x37B', '\a', '\x10', '\x2', 
		'\x2', '\x37B', '\x39C', '\x5', '\x84', '\x43', '\xE', '\x37C', '\x37D', 
		'\f', '\r', '\x2', '\x2', '\x37D', '\x37E', '\x5', '\x92', 'J', '\x2', 
		'\x37E', '\x37F', '\x5', '\x84', '\x43', '\r', '\x37F', '\x39C', '\x3', 
		'\x2', '\x2', '\x2', '\x380', '\x382', '\f', '/', '\x2', '\x2', '\x381', 
		'\x383', '\a', '\x12', '\x2', '\x2', '\x382', '\x381', '\x3', '\x2', '\x2', 
		'\x2', '\x382', '\x383', '\x3', '\x2', '\x2', '\x2', '\x383', '\x384', 
		'\x3', '\x2', '\x2', '\x2', '\x384', '\x385', '\a', '\a', '\x2', '\x2', 
		'\x385', '\x386', '\x5', '\x82', '\x42', '\x2', '\x386', '\x387', '\a', 
		'\b', '\x2', '\x2', '\x387', '\x39C', '\x3', '\x2', '\x2', '\x2', '\x388', 
		'\x38A', '\f', '.', '\x2', '\x2', '\x389', '\x38B', '\a', '\x11', '\x2', 
		'\x2', '\x38A', '\x389', '\x3', '\x2', '\x2', '\x2', '\x38A', '\x38B', 
		'\x3', '\x2', '\x2', '\x2', '\x38B', '\x38C', '\x3', '\x2', '\x2', '\x2', 
		'\x38C', '\x38E', '\a', '\x15', '\x2', '\x2', '\x38D', '\x38F', '\a', 
		'!', '\x2', '\x2', '\x38E', '\x38D', '\x3', '\x2', '\x2', '\x2', '\x38E', 
		'\x38F', '\x3', '\x2', '\x2', '\x2', '\x38F', '\x390', '\x3', '\x2', '\x2', 
		'\x2', '\x390', '\x39C', '\x5', '\xA2', 'R', '\x2', '\x391', '\x392', 
		'\f', '+', '\x2', '\x2', '\x392', '\x39C', '\x5', '~', '@', '\x2', '\x393', 
		'\x394', '\f', ')', '\x2', '\x2', '\x394', '\x395', '\x6', '\x43', '#', 
		'\x2', '\x395', '\x39C', '\a', '\x16', '\x2', '\x2', '\x396', '\x397', 
		'\f', '(', '\x2', '\x2', '\x397', '\x398', '\x6', '\x43', '%', '\x2', 
		'\x398', '\x39C', '\a', '\x17', '\x2', '\x2', '\x399', '\x39A', '\f', 
		'\v', '\x2', '\x2', '\x39A', '\x39C', '\x5', '\x96', 'L', '\x2', '\x39B', 
		'\x346', '\x3', '\x2', '\x2', '\x2', '\x39B', '\x349', '\x3', '\x2', '\x2', 
		'\x2', '\x39B', '\x34C', '\x3', '\x2', '\x2', '\x2', '\x39B', '\x34F', 
		'\x3', '\x2', '\x2', '\x2', '\x39B', '\x352', '\x3', '\x2', '\x2', '\x2', 
		'\x39B', '\x355', '\x3', '\x2', '\x2', '\x2', '\x39B', '\x358', '\x3', 
		'\x2', '\x2', '\x2', '\x39B', '\x35B', '\x3', '\x2', '\x2', '\x2', '\x39B', 
		'\x35E', '\x3', '\x2', '\x2', '\x2', '\x39B', '\x361', '\x3', '\x2', '\x2', 
		'\x2', '\x39B', '\x364', '\x3', '\x2', '\x2', '\x2', '\x39B', '\x367', 
		'\x3', '\x2', '\x2', '\x2', '\x39B', '\x36A', '\x3', '\x2', '\x2', '\x2', 
		'\x39B', '\x36D', '\x3', '\x2', '\x2', '\x2', '\x39B', '\x370', '\x3', 
		'\x2', '\x2', '\x2', '\x39B', '\x373', '\x3', '\x2', '\x2', '\x2', '\x39B', 
		'\x379', '\x3', '\x2', '\x2', '\x2', '\x39B', '\x37C', '\x3', '\x2', '\x2', 
		'\x2', '\x39B', '\x380', '\x3', '\x2', '\x2', '\x2', '\x39B', '\x388', 
		'\x3', '\x2', '\x2', '\x2', '\x39B', '\x391', '\x3', '\x2', '\x2', '\x2', 
		'\x39B', '\x393', '\x3', '\x2', '\x2', '\x2', '\x39B', '\x396', '\x3', 
		'\x2', '\x2', '\x2', '\x39B', '\x399', '\x3', '\x2', '\x2', '\x2', '\x39C', 
		'\x39F', '\x3', '\x2', '\x2', '\x2', '\x39D', '\x39B', '\x3', '\x2', '\x2', 
		'\x2', '\x39D', '\x39E', '\x3', '\x2', '\x2', '\x2', '\x39E', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x39F', '\x39D', '\x3', '\x2', '\x2', '\x2', 
		'\x3A0', '\x3A1', '\a', '\x10', '\x2', '\x2', '\x3A1', '\x3A2', '\x5', 
		'\x84', '\x43', '\x2', '\x3A2', '\x87', '\x3', '\x2', '\x2', '\x2', '\x3A3', 
		'\x3A7', '\x5', '\xA4', 'S', '\x2', '\x3A4', '\x3A7', '\x5', 't', ';', 
		'\x2', '\x3A5', '\x3A7', '\x5', '\x8A', '\x46', '\x2', '\x3A6', '\x3A3', 
		'\x3', '\x2', '\x2', '\x2', '\x3A6', '\x3A4', '\x3', '\x2', '\x2', '\x2', 
		'\x3A6', '\x3A5', '\x3', '\x2', '\x2', '\x2', '\x3A7', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x3A8', '\x3B4', '\a', '\v', '\x2', '\x2', '\x3A9', 
		'\x3AE', '\x5', 'z', '>', '\x2', '\x3AA', '\x3AB', '\a', '\xF', '\x2', 
		'\x2', '\x3AB', '\x3AD', '\x5', 'z', '>', '\x2', '\x3AC', '\x3AA', '\x3', 
		'\x2', '\x2', '\x2', '\x3AD', '\x3B0', '\x3', '\x2', '\x2', '\x2', '\x3AE', 
		'\x3AC', '\x3', '\x2', '\x2', '\x2', '\x3AE', '\x3AF', '\x3', '\x2', '\x2', 
		'\x2', '\x3AF', '\x3B2', '\x3', '\x2', '\x2', '\x2', '\x3B0', '\x3AE', 
		'\x3', '\x2', '\x2', '\x2', '\x3B1', '\x3B3', '\a', '\xF', '\x2', '\x2', 
		'\x3B2', '\x3B1', '\x3', '\x2', '\x2', '\x2', '\x3B2', '\x3B3', '\x3', 
		'\x2', '\x2', '\x2', '\x3B3', '\x3B5', '\x3', '\x2', '\x2', '\x2', '\x3B4', 
		'\x3A9', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x3B5', '\x3', '\x2', '\x2', 
		'\x2', '\x3B5', '\x3B6', '\x3', '\x2', '\x2', '\x2', '\x3B6', '\x3B7', 
		'\a', '\r', '\x2', '\x2', '\x3B7', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x3B8', '\x3BA', '\a', 'm', '\x2', '\x2', '\x3B9', '\x3B8', '\x3', '\x2', 
		'\x2', '\x2', '\x3B9', '\x3BA', '\x3', '\x2', '\x2', '\x2', '\x3BA', '\x3BB', 
		'\x3', '\x2', '\x2', '\x2', '\x3BB', '\x3BD', '\a', '[', '\x2', '\x2', 
		'\x3BC', '\x3BE', '\a', '\x1C', '\x2', '\x2', '\x3BD', '\x3BC', '\x3', 
		'\x2', '\x2', '\x2', '\x3BD', '\x3BE', '\x3', '\x2', '\x2', '\x2', '\x3BE', 
		'\x3BF', '\x3', '\x2', '\x2', '\x2', '\x3BF', '\x3C1', '\a', '\t', '\x2', 
		'\x2', '\x3C0', '\x3C2', '\x5', 'j', '\x36', '\x2', '\x3C1', '\x3C0', 
		'\x3', '\x2', '\x2', '\x2', '\x3C1', '\x3C2', '\x3', '\x2', '\x2', '\x2', 
		'\x3C2', '\x3C3', '\x3', '\x2', '\x2', '\x2', '\x3C3', '\x3C4', '\a', 
		'\n', '\x2', '\x2', '\x3C4', '\x3CD', '\x5', 'p', '\x39', '\x2', '\x3C5', 
		'\x3C7', '\a', 'm', '\x2', '\x2', '\x3C6', '\x3C5', '\x3', '\x2', '\x2', 
		'\x2', '\x3C6', '\x3C7', '\x3', '\x2', '\x2', '\x2', '\x3C7', '\x3C8', 
		'\x3', '\x2', '\x2', '\x2', '\x3C8', '\x3C9', '\x5', '\x8E', 'H', '\x2', 
		'\x3C9', '\x3CA', '\a', '>', '\x2', '\x2', '\x3CA', '\x3CB', '\x5', '\x90', 
		'I', '\x2', '\x3CB', '\x3CD', '\x3', '\x2', '\x2', '\x2', '\x3CC', '\x3B9', 
		'\x3', '\x2', '\x2', '\x2', '\x3CC', '\x3C6', '\x3', '\x2', '\x2', '\x2', 
		'\x3CD', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x3CE', '\x3D5', '\x5', 
		'\xA4', 'S', '\x2', '\x3CF', '\x3D1', '\a', '\t', '\x2', '\x2', '\x3D0', 
		'\x3D2', '\x5', 'j', '\x36', '\x2', '\x3D1', '\x3D0', '\x3', '\x2', '\x2', 
		'\x2', '\x3D1', '\x3D2', '\x3', '\x2', '\x2', '\x2', '\x3D2', '\x3D3', 
		'\x3', '\x2', '\x2', '\x2', '\x3D3', '\x3D5', '\a', '\n', '\x2', '\x2', 
		'\x3D4', '\x3CE', '\x3', '\x2', '\x2', '\x2', '\x3D4', '\x3CF', '\x3', 
		'\x2', '\x2', '\x2', '\x3D5', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x3D6', 
		'\x3D9', '\x5', '\x84', '\x43', '\x2', '\x3D7', '\x3D9', '\x5', 'p', '\x39', 
		'\x2', '\x3D8', '\x3D6', '\x3', '\x2', '\x2', '\x2', '\x3D8', '\x3D7', 
		'\x3', '\x2', '\x2', '\x2', '\x3D9', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x3DA', '\x3DB', '\t', '\b', '\x2', '\x2', '\x3DB', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\x3DC', '\x3E4', '\a', '?', '\x2', '\x2', '\x3DD', '\x3E4', 
		'\a', '@', '\x2', '\x2', '\x3DE', '\x3E4', '\a', 'z', '\x2', '\x2', '\x3DF', 
		'\x3E4', '\x5', '\x96', 'L', '\x2', '\x3E0', '\x3E4', '\a', '\x6', '\x2', 
		'\x2', '\x3E1', '\x3E4', '\x5', '\x9A', 'N', '\x2', '\x3E2', '\x3E4', 
		'\x5', '\x9C', 'O', '\x2', '\x3E3', '\x3DC', '\x3', '\x2', '\x2', '\x2', 
		'\x3E3', '\x3DD', '\x3', '\x2', '\x2', '\x2', '\x3E3', '\x3DE', '\x3', 
		'\x2', '\x2', '\x2', '\x3E3', '\x3DF', '\x3', '\x2', '\x2', '\x2', '\x3E3', 
		'\x3E0', '\x3', '\x2', '\x2', '\x2', '\x3E3', '\x3E1', '\x3', '\x2', '\x2', 
		'\x2', '\x3E3', '\x3E2', '\x3', '\x2', '\x2', '\x2', '\x3E4', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x3E5', '\x3E9', '\a', '{', '\x2', '\x2', 
		'\x3E6', '\x3E8', '\x5', '\x98', 'M', '\x2', '\x3E7', '\x3E6', '\x3', 
		'\x2', '\x2', '\x2', '\x3E8', '\x3EB', '\x3', '\x2', '\x2', '\x2', '\x3E9', 
		'\x3E7', '\x3', '\x2', '\x2', '\x2', '\x3E9', '\x3EA', '\x3', '\x2', '\x2', 
		'\x2', '\x3EA', '\x3EC', '\x3', '\x2', '\x2', '\x2', '\x3EB', '\x3E9', 
		'\x3', '\x2', '\x2', '\x2', '\x3EC', '\x3ED', '\a', '{', '\x2', '\x2', 
		'\x3ED', '\x97', '\x3', '\x2', '\x2', '\x2', '\x3EE', '\x3F4', '\a', '\x82', 
		'\x2', '\x2', '\x3EF', '\x3F0', '\a', '\x81', '\x2', '\x2', '\x3F0', '\x3F1', 
		'\x5', '\x84', '\x43', '\x2', '\x3F1', '\x3F2', '\a', '\f', '\x2', '\x2', 
		'\x3F2', '\x3F4', '\x3', '\x2', '\x2', '\x2', '\x3F3', '\x3EE', '\x3', 
		'\x2', '\x2', '\x2', '\x3F3', '\x3EF', '\x3', '\x2', '\x2', '\x2', '\x3F4', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x3F5', '\x3F6', '\t', '\t', '\x2', 
		'\x2', '\x3F6', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x3F7', '\x3F8', 
		'\t', '\n', '\x2', '\x2', '\x3F8', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x3F9', '\x3FA', '\x6', 'P', '\'', '\x2', '\x3FA', '\x3FB', '\x5', '\xA4', 
		'S', '\x2', '\x3FB', '\x3FC', '\x5', '\x66', '\x34', '\x2', '\x3FC', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\x3FD', '\x3FE', '\x6', 'Q', '(', '\x2', 
		'\x3FE', '\x3FF', '\x5', '\xA4', 'S', '\x2', '\x3FF', '\x400', '\x5', 
		'\x66', '\x34', '\x2', '\x400', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x401', 
		'\x404', '\x5', '\xA4', 'S', '\x2', '\x402', '\x404', '\x5', '\xA6', 'T', 
		'\x2', '\x403', '\x401', '\x3', '\x2', '\x2', '\x2', '\x403', '\x402', 
		'\x3', '\x2', '\x2', '\x2', '\x404', '\xA3', '\x3', '\x2', '\x2', '\x2', 
		'\x405', '\x406', '\t', '\v', '\x2', '\x2', '\x406', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\x407', '\x40B', '\x5', '\xA8', 'U', '\x2', '\x408', '\x40B', 
		'\a', '?', '\x2', '\x2', '\x409', '\x40B', '\a', '@', '\x2', '\x2', '\x40A', 
		'\x407', '\x3', '\x2', '\x2', '\x2', '\x40A', '\x408', '\x3', '\x2', '\x2', 
		'\x2', '\x40A', '\x409', '\x3', '\x2', '\x2', '\x2', '\x40B', '\xA7', 
		'\x3', '\x2', '\x2', '\x2', '\x40C', '\x43B', '\a', 'J', '\x2', '\x2', 
		'\x40D', '\x43B', '\a', 'K', '\x2', '\x2', '\x40E', '\x43B', '\a', 'L', 
		'\x2', '\x2', '\x40F', '\x43B', '\a', 'M', '\x2', '\x2', '\x410', '\x43B', 
		'\a', 'N', '\x2', '\x2', '\x411', '\x43B', '\a', 'O', '\x2', '\x2', '\x412', 
		'\x43B', '\a', 'P', '\x2', '\x2', '\x413', '\x43B', '\a', 'Q', '\x2', 
		'\x2', '\x414', '\x43B', '\a', 'R', '\x2', '\x2', '\x415', '\x43B', '\a', 
		'S', '\x2', '\x2', '\x416', '\x43B', '\a', 'T', '\x2', '\x2', '\x417', 
		'\x43B', '\a', 'U', '\x2', '\x2', '\x418', '\x43B', '\a', 'V', '\x2', 
		'\x2', '\x419', '\x43B', '\a', 'W', '\x2', '\x2', '\x41A', '\x43B', '\a', 
		'X', '\x2', '\x2', '\x41B', '\x43B', '\a', 'Y', '\x2', '\x2', '\x41C', 
		'\x43B', '\a', 'Z', '\x2', '\x2', '\x41D', '\x43B', '\a', '[', '\x2', 
		'\x2', '\x41E', '\x43B', '\a', '\\', '\x2', '\x2', '\x41F', '\x43B', '\a', 
		']', '\x2', '\x2', '\x420', '\x43B', '\a', '^', '\x2', '\x2', '\x421', 
		'\x43B', '\a', '_', '\x2', '\x2', '\x422', '\x43B', '\a', '`', '\x2', 
		'\x2', '\x423', '\x43B', '\a', '\x61', '\x2', '\x2', '\x424', '\x43B', 
		'\a', '\x62', '\x2', '\x2', '\x425', '\x43B', '\a', '\x63', '\x2', '\x2', 
		'\x426', '\x43B', '\a', '\x66', '\x2', '\x2', '\x427', '\x43B', '\a', 
		'g', '\x2', '\x2', '\x428', '\x43B', '\a', 'h', '\x2', '\x2', '\x429', 
		'\x43B', '\a', 'i', '\x2', '\x2', '\x42A', '\x43B', '\a', 'j', '\x2', 
		'\x2', '\x42B', '\x43B', '\a', 'k', '\x2', '\x2', '\x42C', '\x43B', '\a', 
		'l', '\x2', '\x2', '\x42D', '\x43B', '\a', 'p', '\x2', '\x2', '\x42E', 
		'\x43B', '\x5', '\xAA', 'V', '\x2', '\x42F', '\x43B', '\a', 's', '\x2', 
		'\x2', '\x430', '\x43B', '\a', 't', '\x2', '\x2', '\x431', '\x43B', '\a', 
		'u', '\x2', '\x2', '\x432', '\x43B', '\a', 'v', '\x2', '\x2', '\x433', 
		'\x43B', '\a', 'w', '\x2', '\x2', '\x434', '\x43B', '\a', 'x', '\x2', 
		'\x2', '\x435', '\x43B', '\a', 'o', '\x2', '\x2', '\x436', '\x43B', '\a', 
		'm', '\x2', '\x2', '\x437', '\x43B', '\a', 'n', '\x2', '\x2', '\x438', 
		'\x43B', '\a', '\x65', '\x2', '\x2', '\x439', '\x43B', '\a', '\x64', '\x2', 
		'\x2', '\x43A', '\x40C', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x40D', 
		'\x3', '\x2', '\x2', '\x2', '\x43A', '\x40E', '\x3', '\x2', '\x2', '\x2', 
		'\x43A', '\x40F', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x410', '\x3', 
		'\x2', '\x2', '\x2', '\x43A', '\x411', '\x3', '\x2', '\x2', '\x2', '\x43A', 
		'\x412', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x413', '\x3', '\x2', '\x2', 
		'\x2', '\x43A', '\x414', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x415', 
		'\x3', '\x2', '\x2', '\x2', '\x43A', '\x416', '\x3', '\x2', '\x2', '\x2', 
		'\x43A', '\x417', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x418', '\x3', 
		'\x2', '\x2', '\x2', '\x43A', '\x419', '\x3', '\x2', '\x2', '\x2', '\x43A', 
		'\x41A', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x41B', '\x3', '\x2', '\x2', 
		'\x2', '\x43A', '\x41C', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x41D', 
		'\x3', '\x2', '\x2', '\x2', '\x43A', '\x41E', '\x3', '\x2', '\x2', '\x2', 
		'\x43A', '\x41F', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x420', '\x3', 
		'\x2', '\x2', '\x2', '\x43A', '\x421', '\x3', '\x2', '\x2', '\x2', '\x43A', 
		'\x422', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x423', '\x3', '\x2', '\x2', 
		'\x2', '\x43A', '\x424', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x425', 
		'\x3', '\x2', '\x2', '\x2', '\x43A', '\x426', '\x3', '\x2', '\x2', '\x2', 
		'\x43A', '\x427', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x428', '\x3', 
		'\x2', '\x2', '\x2', '\x43A', '\x429', '\x3', '\x2', '\x2', '\x2', '\x43A', 
		'\x42A', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x42B', '\x3', '\x2', '\x2', 
		'\x2', '\x43A', '\x42C', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x42D', 
		'\x3', '\x2', '\x2', '\x2', '\x43A', '\x42E', '\x3', '\x2', '\x2', '\x2', 
		'\x43A', '\x42F', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x430', '\x3', 
		'\x2', '\x2', '\x2', '\x43A', '\x431', '\x3', '\x2', '\x2', '\x2', '\x43A', 
		'\x432', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x433', '\x3', '\x2', '\x2', 
		'\x2', '\x43A', '\x434', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x435', 
		'\x3', '\x2', '\x2', '\x2', '\x43A', '\x436', '\x3', '\x2', '\x2', '\x2', 
		'\x43A', '\x437', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x438', '\x3', 
		'\x2', '\x2', '\x2', '\x43A', '\x439', '\x3', '\x2', '\x2', '\x2', '\x43B', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\x43C', '\x43D', '\t', '\f', '\x2', 
		'\x2', '\x43D', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x43E', '\x443', 
		'\a', '\xE', '\x2', '\x2', '\x43F', '\x443', '\a', '\x2', '\x2', '\x3', 
		'\x440', '\x443', '\x6', 'W', ')', '\x2', '\x441', '\x443', '\x6', 'W', 
		'*', '\x2', '\x442', '\x43E', '\x3', '\x2', '\x2', '\x2', '\x442', '\x43F', 
		'\x3', '\x2', '\x2', '\x2', '\x442', '\x440', '\x3', '\x2', '\x2', '\x2', 
		'\x442', '\x441', '\x3', '\x2', '\x2', '\x2', '\x443', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', 'y', '\xAF', '\xB2', '\xCC', '\xD0', '\xD7', '\xDD', 
		'\xE1', '\xE8', '\xF0', '\xF5', '\xF7', '\xFE', '\x102', '\x10B', '\x10F', 
		'\x117', '\x11B', '\x11F', '\x128', '\x130', '\x134', '\x13C', '\x141', 
		'\x143', '\x14A', '\x14F', '\x15A', '\x160', '\x16F', '\x183', '\x187', 
		'\x18B', '\x193', '\x19C', '\x1A1', '\x1A9', '\x1AE', '\x1B3', '\x1BA', 
		'\x1C1', '\x1C8', '\x1DA', '\x1DE', '\x1E0', '\x1E7', '\x1ED', '\x1F2', 
		'\x201', '\x204', '\x209', '\x20C', '\x217', '\x21B', '\x220', '\x22B', 
		'\x231', '\x239', '\x23F', '\x245', '\x249', '\x24D', '\x250', '\x255', 
		'\x25B', '\x263', '\x268', '\x26D', '\x271', '\x275', '\x27F', '\x284', 
		'\x287', '\x28C', '\x293', '\x29A', '\x2A3', '\x2A7', '\x2AC', '\x2B1', 
		'\x2B7', '\x2BB', '\x2CA', '\x2CD', '\x2D2', '\x2E3', '\x2E6', '\x2EF', 
		'\x2F7', '\x2FB', '\x2FD', '\x302', '\x306', '\x30D', '\x314', '\x344', 
		'\x382', '\x38A', '\x38E', '\x39B', '\x39D', '\x3A6', '\x3AE', '\x3B2', 
		'\x3B4', '\x3B9', '\x3BD', '\x3C1', '\x3C6', '\x3CC', '\x3D1', '\x3D4', 
		'\x3D8', '\x3E3', '\x3E9', '\x3F3', '\x403', '\x40A', '\x43A', '\x442',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
