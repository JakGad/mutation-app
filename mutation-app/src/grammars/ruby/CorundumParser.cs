//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ruby/Corundum.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class CorundumParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LITERAL=1, COMMA=2, SEMICOLON=3, CRLF=4, REQUIRE=5, END=6, DEF=7, RETURN=8, 
		PIR=9, IF=10, ELSE=11, ELSIF=12, UNLESS=13, WHILE=14, RETRY=15, BREAK=16, 
		FOR=17, TRUE=18, FALSE=19, PLUS=20, MINUS=21, MUL=22, DIV=23, MOD=24, 
		EXP=25, EQUAL=26, NOT_EQUAL=27, GREATER=28, LESS=29, LESS_EQUAL=30, GREATER_EQUAL=31, 
		ASSIGN=32, PLUS_ASSIGN=33, MINUS_ASSIGN=34, MUL_ASSIGN=35, DIV_ASSIGN=36, 
		MOD_ASSIGN=37, EXP_ASSIGN=38, BIT_AND=39, BIT_OR=40, BIT_XOR=41, BIT_NOT=42, 
		BIT_SHL=43, BIT_SHR=44, AND=45, OR=46, NOT=47, LEFT_RBRACKET=48, RIGHT_RBRACKET=49, 
		LEFT_SBRACKET=50, RIGHT_SBRACKET=51, NIL=52, SL_COMMENT=53, ML_COMMENT=54, 
		WS=55, INT=56, FLOAT=57, ID=58, ID_GLOBAL=59, ID_FUNCTION=60;
	public const int
		RULE_prog = 0, RULE_expression_list = 1, RULE_expression = 2, RULE_global_get = 3, 
		RULE_global_set = 4, RULE_global_result = 5, RULE_function_inline_call = 6, 
		RULE_require_block = 7, RULE_pir_inline = 8, RULE_pir_expression_list = 9, 
		RULE_function_definition = 10, RULE_function_definition_body = 11, RULE_function_definition_header = 12, 
		RULE_function_name = 13, RULE_function_definition_params = 14, RULE_function_definition_params_list = 15, 
		RULE_function_definition_param_id = 16, RULE_return_statement = 17, RULE_function_call = 18, 
		RULE_function_call_param_list = 19, RULE_function_call_params = 20, RULE_function_param = 21, 
		RULE_function_unnamed_param = 22, RULE_function_named_param = 23, RULE_function_call_assignment = 24, 
		RULE_all_result = 25, RULE_elsif_statement = 26, RULE_if_elsif_statement = 27, 
		RULE_if_statement = 28, RULE_unless_statement = 29, RULE_while_statement = 30, 
		RULE_for_statement = 31, RULE_init_expression = 32, RULE_all_assignment = 33, 
		RULE_for_init_list = 34, RULE_cond_expression = 35, RULE_loop_expression = 36, 
		RULE_for_loop_list = 37, RULE_statement_body = 38, RULE_statement_expression_list = 39, 
		RULE_assignment = 40, RULE_dynamic_assignment = 41, RULE_int_assignment = 42, 
		RULE_float_assignment = 43, RULE_string_assignment = 44, RULE_initial_array_assignment = 45, 
		RULE_array_assignment = 46, RULE_array_definition = 47, RULE_array_definition_elements = 48, 
		RULE_array_selector = 49, RULE_dynamic_result = 50, RULE_dynamic_ = 51, 
		RULE_int_result = 52, RULE_float_result = 53, RULE_string_result = 54, 
		RULE_comparison_list = 55, RULE_comparison = 56, RULE_comp_var = 57, RULE_lvalue = 58, 
		RULE_rvalue = 59, RULE_break_expression = 60, RULE_literal_t = 61, RULE_float_t = 62, 
		RULE_int_t = 63, RULE_bool_t = 64, RULE_nil_t = 65, RULE_id_ = 66, RULE_id_global = 67, 
		RULE_id_function = 68, RULE_terminator = 69, RULE_else_token = 70, RULE_crlf = 71;
	public static readonly string[] ruleNames = {
		"prog", "expression_list", "expression", "global_get", "global_set", "global_result", 
		"function_inline_call", "require_block", "pir_inline", "pir_expression_list", 
		"function_definition", "function_definition_body", "function_definition_header", 
		"function_name", "function_definition_params", "function_definition_params_list", 
		"function_definition_param_id", "return_statement", "function_call", "function_call_param_list", 
		"function_call_params", "function_param", "function_unnamed_param", "function_named_param", 
		"function_call_assignment", "all_result", "elsif_statement", "if_elsif_statement", 
		"if_statement", "unless_statement", "while_statement", "for_statement", 
		"init_expression", "all_assignment", "for_init_list", "cond_expression", 
		"loop_expression", "for_loop_list", "statement_body", "statement_expression_list", 
		"assignment", "dynamic_assignment", "int_assignment", "float_assignment", 
		"string_assignment", "initial_array_assignment", "array_assignment", "array_definition", 
		"array_definition_elements", "array_selector", "dynamic_result", "dynamic_", 
		"int_result", "float_result", "string_result", "comparison_list", "comparison", 
		"comp_var", "lvalue", "rvalue", "break_expression", "literal_t", "float_t", 
		"int_t", "bool_t", "nil_t", "id_", "id_global", "id_function", "terminator", 
		"else_token", "crlf"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "','", "';'", null, "'require'", "'end'", "'def'", "'return'", 
		"'pir'", "'if'", "'else'", "'elsif'", "'unless'", "'while'", "'retry'", 
		"'break'", "'for'", "'true'", "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", 
		"'**'", "'=='", "'!='", "'>'", "'<'", "'<='", "'>='", "'='", "'+='", "'-='", 
		"'*='", "'/='", "'%='", "'**='", "'&'", "'|'", "'^'", "'~'", "'<<'", "'>>'", 
		null, null, null, "'('", "')'", "'['", "']'", "'nil'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LITERAL", "COMMA", "SEMICOLON", "CRLF", "REQUIRE", "END", "DEF", 
		"RETURN", "PIR", "IF", "ELSE", "ELSIF", "UNLESS", "WHILE", "RETRY", "BREAK", 
		"FOR", "TRUE", "FALSE", "PLUS", "MINUS", "MUL", "DIV", "MOD", "EXP", "EQUAL", 
		"NOT_EQUAL", "GREATER", "LESS", "LESS_EQUAL", "GREATER_EQUAL", "ASSIGN", 
		"PLUS_ASSIGN", "MINUS_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
		"EXP_ASSIGN", "BIT_AND", "BIT_OR", "BIT_XOR", "BIT_NOT", "BIT_SHL", "BIT_SHR", 
		"AND", "OR", "NOT", "LEFT_RBRACKET", "RIGHT_RBRACKET", "LEFT_SBRACKET", 
		"RIGHT_SBRACKET", "NIL", "SL_COMMENT", "ML_COMMENT", "WS", "INT", "FLOAT", 
		"ID", "ID_GLOBAL", "ID_FUNCTION"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Corundum.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CorundumParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CorundumParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CorundumParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgContext : ParserRuleContext {
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(CorundumParser.Eof, 0); }
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; expression_list(0);
			State = 145; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		return expression_list(0);
	}

	private Expression_listContext expression_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_listContext _localctx = new Expression_listContext(Context, _parentState);
		Expression_listContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LITERAL:
			case REQUIRE:
			case DEF:
			case RETURN:
			case PIR:
			case IF:
			case UNLESS:
			case WHILE:
			case FOR:
			case TRUE:
			case FALSE:
			case BIT_NOT:
			case NOT:
			case LEFT_RBRACKET:
			case NIL:
			case INT:
			case FLOAT:
			case ID:
			case ID_GLOBAL:
			case ID_FUNCTION:
				{
				State = 148; expression();
				State = 149; terminator(0);
				}
				break;
			case SEMICOLON:
			case CRLF:
				{
				State = 151; terminator(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 160;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression_list);
					State = 154;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 155; expression();
					State = 156; terminator(0);
					}
					} 
				}
				State = 162;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Function_definitionContext function_definition() {
			return GetRuleContext<Function_definitionContext>(0);
		}
		public Function_inline_callContext function_inline_call() {
			return GetRuleContext<Function_inline_callContext>(0);
		}
		public Require_blockContext require_block() {
			return GetRuleContext<Require_blockContext>(0);
		}
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public Unless_statementContext unless_statement() {
			return GetRuleContext<Unless_statementContext>(0);
		}
		public RvalueContext rvalue() {
			return GetRuleContext<RvalueContext>(0);
		}
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public For_statementContext for_statement() {
			return GetRuleContext<For_statementContext>(0);
		}
		public Pir_inlineContext pir_inline() {
			return GetRuleContext<Pir_inlineContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_expression);
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163; function_definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164; function_inline_call();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 165; require_block();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 166; if_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 167; unless_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 168; rvalue(0);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 169; return_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 170; while_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 171; for_statement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 172; pir_inline();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_getContext : ParserRuleContext {
		public LvalueContext var_name;
		public IToken op;
		public Id_globalContext global_name;
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(CorundumParser.ASSIGN, 0); }
		public Id_globalContext id_global() {
			return GetRuleContext<Id_globalContext>(0);
		}
		public Global_getContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_get; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterGlobal_get(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitGlobal_get(this);
		}
	}

	[RuleVersion(0)]
	public Global_getContext global_get() {
		Global_getContext _localctx = new Global_getContext(Context, State);
		EnterRule(_localctx, 6, RULE_global_get);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; _localctx.var_name = lvalue();
			State = 176; _localctx.op = Match(ASSIGN);
			State = 177; _localctx.global_name = id_global();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_setContext : ParserRuleContext {
		public Id_globalContext global_name;
		public IToken op;
		public All_resultContext result;
		public Id_globalContext id_global() {
			return GetRuleContext<Id_globalContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(CorundumParser.ASSIGN, 0); }
		public All_resultContext all_result() {
			return GetRuleContext<All_resultContext>(0);
		}
		public Global_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_set; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterGlobal_set(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitGlobal_set(this);
		}
	}

	[RuleVersion(0)]
	public Global_setContext global_set() {
		Global_setContext _localctx = new Global_setContext(Context, State);
		EnterRule(_localctx, 8, RULE_global_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; _localctx.global_name = id_global();
			State = 180; _localctx.op = Match(ASSIGN);
			State = 181; _localctx.result = all_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_resultContext : ParserRuleContext {
		public Id_globalContext id_global() {
			return GetRuleContext<Id_globalContext>(0);
		}
		public Global_resultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_result; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterGlobal_result(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitGlobal_result(this);
		}
	}

	[RuleVersion(0)]
	public Global_resultContext global_result() {
		Global_resultContext _localctx = new Global_resultContext(Context, State);
		EnterRule(_localctx, 10, RULE_global_result);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; id_global();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_inline_callContext : ParserRuleContext {
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Function_inline_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_inline_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterFunction_inline_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitFunction_inline_call(this);
		}
	}

	[RuleVersion(0)]
	public Function_inline_callContext function_inline_call() {
		Function_inline_callContext _localctx = new Function_inline_callContext(Context, State);
		EnterRule(_localctx, 12, RULE_function_inline_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; function_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Require_blockContext : ParserRuleContext {
		public ITerminalNode REQUIRE() { return GetToken(CorundumParser.REQUIRE, 0); }
		public Literal_tContext literal_t() {
			return GetRuleContext<Literal_tContext>(0);
		}
		public Require_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_require_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterRequire_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitRequire_block(this);
		}
	}

	[RuleVersion(0)]
	public Require_blockContext require_block() {
		Require_blockContext _localctx = new Require_blockContext(Context, State);
		EnterRule(_localctx, 14, RULE_require_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; Match(REQUIRE);
			State = 188; literal_t();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pir_inlineContext : ParserRuleContext {
		public ITerminalNode PIR() { return GetToken(CorundumParser.PIR, 0); }
		public CrlfContext crlf() {
			return GetRuleContext<CrlfContext>(0);
		}
		public Pir_expression_listContext pir_expression_list() {
			return GetRuleContext<Pir_expression_listContext>(0);
		}
		public ITerminalNode END() { return GetToken(CorundumParser.END, 0); }
		public Pir_inlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pir_inline; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterPir_inline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitPir_inline(this);
		}
	}

	[RuleVersion(0)]
	public Pir_inlineContext pir_inline() {
		Pir_inlineContext _localctx = new Pir_inlineContext(Context, State);
		EnterRule(_localctx, 16, RULE_pir_inline);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; Match(PIR);
			State = 191; crlf();
			State = 192; pir_expression_list();
			State = 193; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pir_expression_listContext : ParserRuleContext {
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Pir_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pir_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterPir_expression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitPir_expression_list(this);
		}
	}

	[RuleVersion(0)]
	public Pir_expression_listContext pir_expression_list() {
		Pir_expression_listContext _localctx = new Pir_expression_listContext(Context, State);
		EnterRule(_localctx, 18, RULE_pir_expression_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; expression_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_definitionContext : ParserRuleContext {
		public Function_definition_headerContext function_definition_header() {
			return GetRuleContext<Function_definition_headerContext>(0);
		}
		public Function_definition_bodyContext function_definition_body() {
			return GetRuleContext<Function_definition_bodyContext>(0);
		}
		public ITerminalNode END() { return GetToken(CorundumParser.END, 0); }
		public Function_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterFunction_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitFunction_definition(this);
		}
	}

	[RuleVersion(0)]
	public Function_definitionContext function_definition() {
		Function_definitionContext _localctx = new Function_definitionContext(Context, State);
		EnterRule(_localctx, 20, RULE_function_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; function_definition_header();
			State = 198; function_definition_body();
			State = 199; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_definition_bodyContext : ParserRuleContext {
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Function_definition_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_definition_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterFunction_definition_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitFunction_definition_body(this);
		}
	}

	[RuleVersion(0)]
	public Function_definition_bodyContext function_definition_body() {
		Function_definition_bodyContext _localctx = new Function_definition_bodyContext(Context, State);
		EnterRule(_localctx, 22, RULE_function_definition_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; expression_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_definition_headerContext : ParserRuleContext {
		public ITerminalNode DEF() { return GetToken(CorundumParser.DEF, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public CrlfContext crlf() {
			return GetRuleContext<CrlfContext>(0);
		}
		public Function_definition_paramsContext function_definition_params() {
			return GetRuleContext<Function_definition_paramsContext>(0);
		}
		public Function_definition_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_definition_header; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterFunction_definition_header(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitFunction_definition_header(this);
		}
	}

	[RuleVersion(0)]
	public Function_definition_headerContext function_definition_header() {
		Function_definition_headerContext _localctx = new Function_definition_headerContext(Context, State);
		EnterRule(_localctx, 24, RULE_function_definition_header);
		try {
			State = 212;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 203; Match(DEF);
				State = 204; function_name();
				State = 205; crlf();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 207; Match(DEF);
				State = 208; function_name();
				State = 209; function_definition_params();
				State = 210; crlf();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public Id_functionContext id_function() {
			return GetRuleContext<Id_functionContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 26, RULE_function_name);
		try {
			State = 216;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_FUNCTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 214; id_function();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 215; id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_definition_paramsContext : ParserRuleContext {
		public ITerminalNode LEFT_RBRACKET() { return GetToken(CorundumParser.LEFT_RBRACKET, 0); }
		public ITerminalNode RIGHT_RBRACKET() { return GetToken(CorundumParser.RIGHT_RBRACKET, 0); }
		public Function_definition_params_listContext function_definition_params_list() {
			return GetRuleContext<Function_definition_params_listContext>(0);
		}
		public Function_definition_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_definition_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterFunction_definition_params(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitFunction_definition_params(this);
		}
	}

	[RuleVersion(0)]
	public Function_definition_paramsContext function_definition_params() {
		Function_definition_paramsContext _localctx = new Function_definition_paramsContext(Context, State);
		EnterRule(_localctx, 28, RULE_function_definition_params);
		try {
			State = 225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218; Match(LEFT_RBRACKET);
				State = 219; Match(RIGHT_RBRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 220; Match(LEFT_RBRACKET);
				State = 221; function_definition_params_list(0);
				State = 222; Match(RIGHT_RBRACKET);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 224; function_definition_params_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_definition_params_listContext : ParserRuleContext {
		public Function_definition_param_idContext function_definition_param_id() {
			return GetRuleContext<Function_definition_param_idContext>(0);
		}
		public Function_definition_params_listContext function_definition_params_list() {
			return GetRuleContext<Function_definition_params_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(CorundumParser.COMMA, 0); }
		public Function_definition_params_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_definition_params_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterFunction_definition_params_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitFunction_definition_params_list(this);
		}
	}

	[RuleVersion(0)]
	public Function_definition_params_listContext function_definition_params_list() {
		return function_definition_params_list(0);
	}

	private Function_definition_params_listContext function_definition_params_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Function_definition_params_listContext _localctx = new Function_definition_params_listContext(Context, _parentState);
		Function_definition_params_listContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_function_definition_params_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 228; function_definition_param_id();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 235;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Function_definition_params_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_function_definition_params_list);
					State = 230;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 231; Match(COMMA);
					State = 232; function_definition_param_id();
					}
					} 
				}
				State = 237;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Function_definition_param_idContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Function_definition_param_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_definition_param_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterFunction_definition_param_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitFunction_definition_param_id(this);
		}
	}

	[RuleVersion(0)]
	public Function_definition_param_idContext function_definition_param_id() {
		Function_definition_param_idContext _localctx = new Function_definition_param_idContext(Context, State);
		EnterRule(_localctx, 32, RULE_function_definition_param_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(CorundumParser.RETURN, 0); }
		public All_resultContext all_result() {
			return GetRuleContext<All_resultContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 34, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; Match(RETURN);
			State = 241; all_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public Function_nameContext name;
		public Function_call_param_listContext @params;
		public ITerminalNode LEFT_RBRACKET() { return GetToken(CorundumParser.LEFT_RBRACKET, 0); }
		public ITerminalNode RIGHT_RBRACKET() { return GetToken(CorundumParser.RIGHT_RBRACKET, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public Function_call_param_listContext function_call_param_list() {
			return GetRuleContext<Function_call_param_listContext>(0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 36, RULE_function_call);
		try {
			State = 255;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243; _localctx.name = function_name();
				State = 244; Match(LEFT_RBRACKET);
				State = 245; _localctx.@params = function_call_param_list();
				State = 246; Match(RIGHT_RBRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 248; _localctx.name = function_name();
				State = 249; _localctx.@params = function_call_param_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 251; _localctx.name = function_name();
				State = 252; Match(LEFT_RBRACKET);
				State = 253; Match(RIGHT_RBRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_call_param_listContext : ParserRuleContext {
		public Function_call_paramsContext function_call_params() {
			return GetRuleContext<Function_call_paramsContext>(0);
		}
		public Function_call_param_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call_param_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterFunction_call_param_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitFunction_call_param_list(this);
		}
	}

	[RuleVersion(0)]
	public Function_call_param_listContext function_call_param_list() {
		Function_call_param_listContext _localctx = new Function_call_param_listContext(Context, State);
		EnterRule(_localctx, 38, RULE_function_call_param_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; function_call_params(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_call_paramsContext : ParserRuleContext {
		public Function_paramContext function_param() {
			return GetRuleContext<Function_paramContext>(0);
		}
		public Function_call_paramsContext function_call_params() {
			return GetRuleContext<Function_call_paramsContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(CorundumParser.COMMA, 0); }
		public Function_call_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterFunction_call_params(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitFunction_call_params(this);
		}
	}

	[RuleVersion(0)]
	public Function_call_paramsContext function_call_params() {
		return function_call_params(0);
	}

	private Function_call_paramsContext function_call_params(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Function_call_paramsContext _localctx = new Function_call_paramsContext(Context, _parentState);
		Function_call_paramsContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_function_call_params, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 260; function_param();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 267;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Function_call_paramsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_function_call_params);
					State = 262;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 263; Match(COMMA);
					State = 264; function_param();
					}
					} 
				}
				State = 269;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Function_paramContext : ParserRuleContext {
		public Function_unnamed_paramContext function_unnamed_param() {
			return GetRuleContext<Function_unnamed_paramContext>(0);
		}
		public Function_named_paramContext function_named_param() {
			return GetRuleContext<Function_named_paramContext>(0);
		}
		public Function_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterFunction_param(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitFunction_param(this);
		}
	}

	[RuleVersion(0)]
	public Function_paramContext function_param() {
		Function_paramContext _localctx = new Function_paramContext(Context, State);
		EnterRule(_localctx, 42, RULE_function_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 270; function_unnamed_param();
				}
				break;
			case 2:
				{
				State = 271; function_named_param();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_unnamed_paramContext : ParserRuleContext {
		public Int_resultContext int_result() {
			return GetRuleContext<Int_resultContext>(0);
		}
		public Float_resultContext float_result() {
			return GetRuleContext<Float_resultContext>(0);
		}
		public String_resultContext string_result() {
			return GetRuleContext<String_resultContext>(0);
		}
		public Dynamic_resultContext dynamic_result() {
			return GetRuleContext<Dynamic_resultContext>(0);
		}
		public Function_unnamed_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_unnamed_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterFunction_unnamed_param(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitFunction_unnamed_param(this);
		}
	}

	[RuleVersion(0)]
	public Function_unnamed_paramContext function_unnamed_param() {
		Function_unnamed_paramContext _localctx = new Function_unnamed_paramContext(Context, State);
		EnterRule(_localctx, 44, RULE_function_unnamed_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 274; int_result(0);
				}
				break;
			case 2:
				{
				State = 275; float_result(0);
				}
				break;
			case 3:
				{
				State = 276; string_result(0);
				}
				break;
			case 4:
				{
				State = 277; dynamic_result(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_named_paramContext : ParserRuleContext {
		public IToken op;
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(CorundumParser.ASSIGN, 0); }
		public Int_resultContext int_result() {
			return GetRuleContext<Int_resultContext>(0);
		}
		public Float_resultContext float_result() {
			return GetRuleContext<Float_resultContext>(0);
		}
		public String_resultContext string_result() {
			return GetRuleContext<String_resultContext>(0);
		}
		public Dynamic_resultContext dynamic_result() {
			return GetRuleContext<Dynamic_resultContext>(0);
		}
		public Function_named_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_named_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterFunction_named_param(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitFunction_named_param(this);
		}
	}

	[RuleVersion(0)]
	public Function_named_paramContext function_named_param() {
		Function_named_paramContext _localctx = new Function_named_paramContext(Context, State);
		EnterRule(_localctx, 46, RULE_function_named_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; id_();
			State = 281; _localctx.op = Match(ASSIGN);
			State = 286;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 282; int_result(0);
				}
				break;
			case 2:
				{
				State = 283; float_result(0);
				}
				break;
			case 3:
				{
				State = 284; string_result(0);
				}
				break;
			case 4:
				{
				State = 285; dynamic_result(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_call_assignmentContext : ParserRuleContext {
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Function_call_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterFunction_call_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitFunction_call_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Function_call_assignmentContext function_call_assignment() {
		Function_call_assignmentContext _localctx = new Function_call_assignmentContext(Context, State);
		EnterRule(_localctx, 48, RULE_function_call_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; function_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_resultContext : ParserRuleContext {
		public Int_resultContext int_result() {
			return GetRuleContext<Int_resultContext>(0);
		}
		public Float_resultContext float_result() {
			return GetRuleContext<Float_resultContext>(0);
		}
		public String_resultContext string_result() {
			return GetRuleContext<String_resultContext>(0);
		}
		public Dynamic_resultContext dynamic_result() {
			return GetRuleContext<Dynamic_resultContext>(0);
		}
		public Global_resultContext global_result() {
			return GetRuleContext<Global_resultContext>(0);
		}
		public All_resultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_result; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterAll_result(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitAll_result(this);
		}
	}

	[RuleVersion(0)]
	public All_resultContext all_result() {
		All_resultContext _localctx = new All_resultContext(Context, State);
		EnterRule(_localctx, 50, RULE_all_result);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 290; int_result(0);
				}
				break;
			case 2:
				{
				State = 291; float_result(0);
				}
				break;
			case 3:
				{
				State = 292; string_result(0);
				}
				break;
			case 4:
				{
				State = 293; dynamic_result(0);
				}
				break;
			case 5:
				{
				State = 294; global_result();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elsif_statementContext : ParserRuleContext {
		public If_elsif_statementContext if_elsif_statement() {
			return GetRuleContext<If_elsif_statementContext>(0);
		}
		public Elsif_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsif_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterElsif_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitElsif_statement(this);
		}
	}

	[RuleVersion(0)]
	public Elsif_statementContext elsif_statement() {
		Elsif_statementContext _localctx = new Elsif_statementContext(Context, State);
		EnterRule(_localctx, 52, RULE_elsif_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297; if_elsif_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_elsif_statementContext : ParserRuleContext {
		public ITerminalNode ELSIF() { return GetToken(CorundumParser.ELSIF, 0); }
		public Cond_expressionContext cond_expression() {
			return GetRuleContext<Cond_expressionContext>(0);
		}
		public CrlfContext[] crlf() {
			return GetRuleContexts<CrlfContext>();
		}
		public CrlfContext crlf(int i) {
			return GetRuleContext<CrlfContext>(i);
		}
		public Statement_bodyContext[] statement_body() {
			return GetRuleContexts<Statement_bodyContext>();
		}
		public Statement_bodyContext statement_body(int i) {
			return GetRuleContext<Statement_bodyContext>(i);
		}
		public Else_tokenContext else_token() {
			return GetRuleContext<Else_tokenContext>(0);
		}
		public If_elsif_statementContext if_elsif_statement() {
			return GetRuleContext<If_elsif_statementContext>(0);
		}
		public If_elsif_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_elsif_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterIf_elsif_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitIf_elsif_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_elsif_statementContext if_elsif_statement() {
		If_elsif_statementContext _localctx = new If_elsif_statementContext(Context, State);
		EnterRule(_localctx, 54, RULE_if_elsif_statement);
		try {
			State = 318;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 299; Match(ELSIF);
				State = 300; cond_expression();
				State = 301; crlf();
				State = 302; statement_body();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 304; Match(ELSIF);
				State = 305; cond_expression();
				State = 306; crlf();
				State = 307; statement_body();
				State = 308; else_token();
				State = 309; crlf();
				State = 310; statement_body();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 312; Match(ELSIF);
				State = 313; cond_expression();
				State = 314; crlf();
				State = 315; statement_body();
				State = 316; if_elsif_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(CorundumParser.IF, 0); }
		public Cond_expressionContext cond_expression() {
			return GetRuleContext<Cond_expressionContext>(0);
		}
		public CrlfContext[] crlf() {
			return GetRuleContexts<CrlfContext>();
		}
		public CrlfContext crlf(int i) {
			return GetRuleContext<CrlfContext>(i);
		}
		public Statement_bodyContext[] statement_body() {
			return GetRuleContexts<Statement_bodyContext>();
		}
		public Statement_bodyContext statement_body(int i) {
			return GetRuleContext<Statement_bodyContext>(i);
		}
		public ITerminalNode END() { return GetToken(CorundumParser.END, 0); }
		public Else_tokenContext else_token() {
			return GetRuleContext<Else_tokenContext>(0);
		}
		public Elsif_statementContext elsif_statement() {
			return GetRuleContext<Elsif_statementContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 56, RULE_if_statement);
		try {
			State = 342;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 320; Match(IF);
				State = 321; cond_expression();
				State = 322; crlf();
				State = 323; statement_body();
				State = 324; Match(END);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 326; Match(IF);
				State = 327; cond_expression();
				State = 328; crlf();
				State = 329; statement_body();
				State = 330; else_token();
				State = 331; crlf();
				State = 332; statement_body();
				State = 333; Match(END);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 335; Match(IF);
				State = 336; cond_expression();
				State = 337; crlf();
				State = 338; statement_body();
				State = 339; elsif_statement();
				State = 340; Match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unless_statementContext : ParserRuleContext {
		public ITerminalNode UNLESS() { return GetToken(CorundumParser.UNLESS, 0); }
		public Cond_expressionContext cond_expression() {
			return GetRuleContext<Cond_expressionContext>(0);
		}
		public CrlfContext[] crlf() {
			return GetRuleContexts<CrlfContext>();
		}
		public CrlfContext crlf(int i) {
			return GetRuleContext<CrlfContext>(i);
		}
		public Statement_bodyContext[] statement_body() {
			return GetRuleContexts<Statement_bodyContext>();
		}
		public Statement_bodyContext statement_body(int i) {
			return GetRuleContext<Statement_bodyContext>(i);
		}
		public ITerminalNode END() { return GetToken(CorundumParser.END, 0); }
		public Else_tokenContext else_token() {
			return GetRuleContext<Else_tokenContext>(0);
		}
		public Elsif_statementContext elsif_statement() {
			return GetRuleContext<Elsif_statementContext>(0);
		}
		public Unless_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unless_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterUnless_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitUnless_statement(this);
		}
	}

	[RuleVersion(0)]
	public Unless_statementContext unless_statement() {
		Unless_statementContext _localctx = new Unless_statementContext(Context, State);
		EnterRule(_localctx, 58, RULE_unless_statement);
		try {
			State = 366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 344; Match(UNLESS);
				State = 345; cond_expression();
				State = 346; crlf();
				State = 347; statement_body();
				State = 348; Match(END);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 350; Match(UNLESS);
				State = 351; cond_expression();
				State = 352; crlf();
				State = 353; statement_body();
				State = 354; else_token();
				State = 355; crlf();
				State = 356; statement_body();
				State = 357; Match(END);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 359; Match(UNLESS);
				State = 360; cond_expression();
				State = 361; crlf();
				State = 362; statement_body();
				State = 363; elsif_statement();
				State = 364; Match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(CorundumParser.WHILE, 0); }
		public Cond_expressionContext cond_expression() {
			return GetRuleContext<Cond_expressionContext>(0);
		}
		public CrlfContext crlf() {
			return GetRuleContext<CrlfContext>(0);
		}
		public Statement_bodyContext statement_body() {
			return GetRuleContext<Statement_bodyContext>(0);
		}
		public ITerminalNode END() { return GetToken(CorundumParser.END, 0); }
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 60, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368; Match(WHILE);
			State = 369; cond_expression();
			State = 370; crlf();
			State = 371; statement_body();
			State = 372; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_statementContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(CorundumParser.FOR, 0); }
		public ITerminalNode LEFT_RBRACKET() { return GetToken(CorundumParser.LEFT_RBRACKET, 0); }
		public Init_expressionContext init_expression() {
			return GetRuleContext<Init_expressionContext>(0);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(CorundumParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(CorundumParser.SEMICOLON, i);
		}
		public Cond_expressionContext cond_expression() {
			return GetRuleContext<Cond_expressionContext>(0);
		}
		public Loop_expressionContext loop_expression() {
			return GetRuleContext<Loop_expressionContext>(0);
		}
		public ITerminalNode RIGHT_RBRACKET() { return GetToken(CorundumParser.RIGHT_RBRACKET, 0); }
		public CrlfContext crlf() {
			return GetRuleContext<CrlfContext>(0);
		}
		public Statement_bodyContext statement_body() {
			return GetRuleContext<Statement_bodyContext>(0);
		}
		public ITerminalNode END() { return GetToken(CorundumParser.END, 0); }
		public For_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterFor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitFor_statement(this);
		}
	}

	[RuleVersion(0)]
	public For_statementContext for_statement() {
		For_statementContext _localctx = new For_statementContext(Context, State);
		EnterRule(_localctx, 62, RULE_for_statement);
		try {
			State = 396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 374; Match(FOR);
				State = 375; Match(LEFT_RBRACKET);
				State = 376; init_expression();
				State = 377; Match(SEMICOLON);
				State = 378; cond_expression();
				State = 379; Match(SEMICOLON);
				State = 380; loop_expression();
				State = 381; Match(RIGHT_RBRACKET);
				State = 382; crlf();
				State = 383; statement_body();
				State = 384; Match(END);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 386; Match(FOR);
				State = 387; init_expression();
				State = 388; Match(SEMICOLON);
				State = 389; cond_expression();
				State = 390; Match(SEMICOLON);
				State = 391; loop_expression();
				State = 392; crlf();
				State = 393; statement_body();
				State = 394; Match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Init_expressionContext : ParserRuleContext {
		public For_init_listContext for_init_list() {
			return GetRuleContext<For_init_listContext>(0);
		}
		public Init_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterInit_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitInit_expression(this);
		}
	}

	[RuleVersion(0)]
	public Init_expressionContext init_expression() {
		Init_expressionContext _localctx = new Init_expressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_init_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398; for_init_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_assignmentContext : ParserRuleContext {
		public Int_assignmentContext int_assignment() {
			return GetRuleContext<Int_assignmentContext>(0);
		}
		public Float_assignmentContext float_assignment() {
			return GetRuleContext<Float_assignmentContext>(0);
		}
		public String_assignmentContext string_assignment() {
			return GetRuleContext<String_assignmentContext>(0);
		}
		public Dynamic_assignmentContext dynamic_assignment() {
			return GetRuleContext<Dynamic_assignmentContext>(0);
		}
		public All_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterAll_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitAll_assignment(this);
		}
	}

	[RuleVersion(0)]
	public All_assignmentContext all_assignment() {
		All_assignmentContext _localctx = new All_assignmentContext(Context, State);
		EnterRule(_localctx, 66, RULE_all_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 400; int_assignment();
				}
				break;
			case 2:
				{
				State = 401; float_assignment();
				}
				break;
			case 3:
				{
				State = 402; string_assignment();
				}
				break;
			case 4:
				{
				State = 403; dynamic_assignment();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_init_listContext : ParserRuleContext {
		public All_assignmentContext all_assignment() {
			return GetRuleContext<All_assignmentContext>(0);
		}
		public For_init_listContext for_init_list() {
			return GetRuleContext<For_init_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(CorundumParser.COMMA, 0); }
		public For_init_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_init_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterFor_init_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitFor_init_list(this);
		}
	}

	[RuleVersion(0)]
	public For_init_listContext for_init_list() {
		return for_init_list(0);
	}

	private For_init_listContext for_init_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		For_init_listContext _localctx = new For_init_listContext(Context, _parentState);
		For_init_listContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_for_init_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 407; all_assignment();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 414;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new For_init_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_for_init_list);
					State = 409;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 410; Match(COMMA);
					State = 411; all_assignment();
					}
					} 
				}
				State = 416;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Cond_expressionContext : ParserRuleContext {
		public Comparison_listContext comparison_list() {
			return GetRuleContext<Comparison_listContext>(0);
		}
		public Cond_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterCond_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitCond_expression(this);
		}
	}

	[RuleVersion(0)]
	public Cond_expressionContext cond_expression() {
		Cond_expressionContext _localctx = new Cond_expressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_cond_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417; comparison_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_expressionContext : ParserRuleContext {
		public For_loop_listContext for_loop_list() {
			return GetRuleContext<For_loop_listContext>(0);
		}
		public Loop_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterLoop_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitLoop_expression(this);
		}
	}

	[RuleVersion(0)]
	public Loop_expressionContext loop_expression() {
		Loop_expressionContext _localctx = new Loop_expressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_loop_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419; for_loop_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_loop_listContext : ParserRuleContext {
		public All_assignmentContext all_assignment() {
			return GetRuleContext<All_assignmentContext>(0);
		}
		public For_loop_listContext for_loop_list() {
			return GetRuleContext<For_loop_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(CorundumParser.COMMA, 0); }
		public For_loop_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_loop_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterFor_loop_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitFor_loop_list(this);
		}
	}

	[RuleVersion(0)]
	public For_loop_listContext for_loop_list() {
		return for_loop_list(0);
	}

	private For_loop_listContext for_loop_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		For_loop_listContext _localctx = new For_loop_listContext(Context, _parentState);
		For_loop_listContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_for_loop_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 422; all_assignment();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 429;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new For_loop_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_for_loop_list);
					State = 424;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 425; Match(COMMA);
					State = 426; all_assignment();
					}
					} 
				}
				State = 431;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Statement_bodyContext : ParserRuleContext {
		public Statement_expression_listContext statement_expression_list() {
			return GetRuleContext<Statement_expression_listContext>(0);
		}
		public Statement_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterStatement_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitStatement_body(this);
		}
	}

	[RuleVersion(0)]
	public Statement_bodyContext statement_body() {
		Statement_bodyContext _localctx = new Statement_bodyContext(Context, State);
		EnterRule(_localctx, 76, RULE_statement_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432; statement_expression_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_expression_listContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public ITerminalNode RETRY() { return GetToken(CorundumParser.RETRY, 0); }
		public Break_expressionContext break_expression() {
			return GetRuleContext<Break_expressionContext>(0);
		}
		public Statement_expression_listContext statement_expression_list() {
			return GetRuleContext<Statement_expression_listContext>(0);
		}
		public Statement_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterStatement_expression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitStatement_expression_list(this);
		}
	}

	[RuleVersion(0)]
	public Statement_expression_listContext statement_expression_list() {
		return statement_expression_list(0);
	}

	private Statement_expression_listContext statement_expression_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Statement_expression_listContext _localctx = new Statement_expression_listContext(Context, _parentState);
		Statement_expression_listContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_statement_expression_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LITERAL:
			case REQUIRE:
			case DEF:
			case RETURN:
			case PIR:
			case IF:
			case UNLESS:
			case WHILE:
			case FOR:
			case TRUE:
			case FALSE:
			case BIT_NOT:
			case NOT:
			case LEFT_RBRACKET:
			case NIL:
			case INT:
			case FLOAT:
			case ID:
			case ID_GLOBAL:
			case ID_FUNCTION:
				{
				State = 435; expression();
				State = 436; terminator(0);
				}
				break;
			case RETRY:
				{
				State = 438; Match(RETRY);
				State = 439; terminator(0);
				}
				break;
			case BREAK:
				{
				State = 440; break_expression();
				State = 441; terminator(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 458;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 456;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
					case 1:
						{
						_localctx = new Statement_expression_listContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_statement_expression_list);
						State = 445;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 446; expression();
						State = 447; terminator(0);
						}
						break;
					case 2:
						{
						_localctx = new Statement_expression_listContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_statement_expression_list);
						State = 449;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 450; Match(RETRY);
						State = 451; terminator(0);
						}
						break;
					case 3:
						{
						_localctx = new Statement_expression_listContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_statement_expression_list);
						State = 452;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 453; break_expression();
						State = 454; terminator(0);
						}
						break;
					}
					} 
				}
				State = 460;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public LvalueContext var_id;
		public IToken op;
		public RvalueContext rvalue() {
			return GetRuleContext<RvalueContext>(0);
		}
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(CorundumParser.ASSIGN, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(CorundumParser.PLUS_ASSIGN, 0); }
		public ITerminalNode MINUS_ASSIGN() { return GetToken(CorundumParser.MINUS_ASSIGN, 0); }
		public ITerminalNode MUL_ASSIGN() { return GetToken(CorundumParser.MUL_ASSIGN, 0); }
		public ITerminalNode DIV_ASSIGN() { return GetToken(CorundumParser.DIV_ASSIGN, 0); }
		public ITerminalNode MOD_ASSIGN() { return GetToken(CorundumParser.MOD_ASSIGN, 0); }
		public ITerminalNode EXP_ASSIGN() { return GetToken(CorundumParser.EXP_ASSIGN, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 80, RULE_assignment);
		int _la;
		try {
			State = 469;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 461; _localctx.var_id = lvalue();
				State = 462; _localctx.op = Match(ASSIGN);
				State = 463; rvalue(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 465; _localctx.var_id = lvalue();
				State = 466;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS_ASSIGN) | (1L << MINUS_ASSIGN) | (1L << MUL_ASSIGN) | (1L << DIV_ASSIGN) | (1L << MOD_ASSIGN) | (1L << EXP_ASSIGN))) != 0)) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 467; rvalue(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dynamic_assignmentContext : ParserRuleContext {
		public LvalueContext var_id;
		public IToken op;
		public Dynamic_resultContext dynamic_result() {
			return GetRuleContext<Dynamic_resultContext>(0);
		}
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(CorundumParser.ASSIGN, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(CorundumParser.PLUS_ASSIGN, 0); }
		public ITerminalNode MINUS_ASSIGN() { return GetToken(CorundumParser.MINUS_ASSIGN, 0); }
		public ITerminalNode MUL_ASSIGN() { return GetToken(CorundumParser.MUL_ASSIGN, 0); }
		public ITerminalNode DIV_ASSIGN() { return GetToken(CorundumParser.DIV_ASSIGN, 0); }
		public ITerminalNode MOD_ASSIGN() { return GetToken(CorundumParser.MOD_ASSIGN, 0); }
		public ITerminalNode EXP_ASSIGN() { return GetToken(CorundumParser.EXP_ASSIGN, 0); }
		public Dynamic_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamic_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterDynamic_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitDynamic_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Dynamic_assignmentContext dynamic_assignment() {
		Dynamic_assignmentContext _localctx = new Dynamic_assignmentContext(Context, State);
		EnterRule(_localctx, 82, RULE_dynamic_assignment);
		int _la;
		try {
			State = 479;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 471; _localctx.var_id = lvalue();
				State = 472; _localctx.op = Match(ASSIGN);
				State = 473; dynamic_result(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 475; _localctx.var_id = lvalue();
				State = 476;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS_ASSIGN) | (1L << MINUS_ASSIGN) | (1L << MUL_ASSIGN) | (1L << DIV_ASSIGN) | (1L << MOD_ASSIGN) | (1L << EXP_ASSIGN))) != 0)) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 477; dynamic_result(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_assignmentContext : ParserRuleContext {
		public LvalueContext var_id;
		public IToken op;
		public Int_resultContext int_result() {
			return GetRuleContext<Int_resultContext>(0);
		}
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(CorundumParser.ASSIGN, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(CorundumParser.PLUS_ASSIGN, 0); }
		public ITerminalNode MINUS_ASSIGN() { return GetToken(CorundumParser.MINUS_ASSIGN, 0); }
		public ITerminalNode MUL_ASSIGN() { return GetToken(CorundumParser.MUL_ASSIGN, 0); }
		public ITerminalNode DIV_ASSIGN() { return GetToken(CorundumParser.DIV_ASSIGN, 0); }
		public ITerminalNode MOD_ASSIGN() { return GetToken(CorundumParser.MOD_ASSIGN, 0); }
		public ITerminalNode EXP_ASSIGN() { return GetToken(CorundumParser.EXP_ASSIGN, 0); }
		public Int_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterInt_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitInt_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Int_assignmentContext int_assignment() {
		Int_assignmentContext _localctx = new Int_assignmentContext(Context, State);
		EnterRule(_localctx, 84, RULE_int_assignment);
		int _la;
		try {
			State = 489;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 481; _localctx.var_id = lvalue();
				State = 482; _localctx.op = Match(ASSIGN);
				State = 483; int_result(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 485; _localctx.var_id = lvalue();
				State = 486;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS_ASSIGN) | (1L << MINUS_ASSIGN) | (1L << MUL_ASSIGN) | (1L << DIV_ASSIGN) | (1L << MOD_ASSIGN) | (1L << EXP_ASSIGN))) != 0)) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 487; int_result(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Float_assignmentContext : ParserRuleContext {
		public LvalueContext var_id;
		public IToken op;
		public Float_resultContext float_result() {
			return GetRuleContext<Float_resultContext>(0);
		}
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(CorundumParser.ASSIGN, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(CorundumParser.PLUS_ASSIGN, 0); }
		public ITerminalNode MINUS_ASSIGN() { return GetToken(CorundumParser.MINUS_ASSIGN, 0); }
		public ITerminalNode MUL_ASSIGN() { return GetToken(CorundumParser.MUL_ASSIGN, 0); }
		public ITerminalNode DIV_ASSIGN() { return GetToken(CorundumParser.DIV_ASSIGN, 0); }
		public ITerminalNode MOD_ASSIGN() { return GetToken(CorundumParser.MOD_ASSIGN, 0); }
		public ITerminalNode EXP_ASSIGN() { return GetToken(CorundumParser.EXP_ASSIGN, 0); }
		public Float_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterFloat_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitFloat_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Float_assignmentContext float_assignment() {
		Float_assignmentContext _localctx = new Float_assignmentContext(Context, State);
		EnterRule(_localctx, 86, RULE_float_assignment);
		int _la;
		try {
			State = 499;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 491; _localctx.var_id = lvalue();
				State = 492; _localctx.op = Match(ASSIGN);
				State = 493; float_result(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 495; _localctx.var_id = lvalue();
				State = 496;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS_ASSIGN) | (1L << MINUS_ASSIGN) | (1L << MUL_ASSIGN) | (1L << DIV_ASSIGN) | (1L << MOD_ASSIGN) | (1L << EXP_ASSIGN))) != 0)) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 497; float_result(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_assignmentContext : ParserRuleContext {
		public LvalueContext var_id;
		public IToken op;
		public String_resultContext string_result() {
			return GetRuleContext<String_resultContext>(0);
		}
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(CorundumParser.ASSIGN, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(CorundumParser.PLUS_ASSIGN, 0); }
		public String_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterString_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitString_assignment(this);
		}
	}

	[RuleVersion(0)]
	public String_assignmentContext string_assignment() {
		String_assignmentContext _localctx = new String_assignmentContext(Context, State);
		EnterRule(_localctx, 88, RULE_string_assignment);
		try {
			State = 509;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 501; _localctx.var_id = lvalue();
				State = 502; _localctx.op = Match(ASSIGN);
				State = 503; string_result(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 505; _localctx.var_id = lvalue();
				State = 506; _localctx.op = Match(PLUS_ASSIGN);
				State = 507; string_result(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initial_array_assignmentContext : ParserRuleContext {
		public LvalueContext var_id;
		public IToken op;
		public ITerminalNode LEFT_SBRACKET() { return GetToken(CorundumParser.LEFT_SBRACKET, 0); }
		public ITerminalNode RIGHT_SBRACKET() { return GetToken(CorundumParser.RIGHT_SBRACKET, 0); }
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(CorundumParser.ASSIGN, 0); }
		public Initial_array_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initial_array_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterInitial_array_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitInitial_array_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Initial_array_assignmentContext initial_array_assignment() {
		Initial_array_assignmentContext _localctx = new Initial_array_assignmentContext(Context, State);
		EnterRule(_localctx, 90, RULE_initial_array_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511; _localctx.var_id = lvalue();
			State = 512; _localctx.op = Match(ASSIGN);
			State = 513; Match(LEFT_SBRACKET);
			State = 514; Match(RIGHT_SBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_assignmentContext : ParserRuleContext {
		public Array_selectorContext arr_def;
		public IToken op;
		public All_resultContext arr_val;
		public Array_selectorContext array_selector() {
			return GetRuleContext<Array_selectorContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(CorundumParser.ASSIGN, 0); }
		public All_resultContext all_result() {
			return GetRuleContext<All_resultContext>(0);
		}
		public Array_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterArray_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitArray_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Array_assignmentContext array_assignment() {
		Array_assignmentContext _localctx = new Array_assignmentContext(Context, State);
		EnterRule(_localctx, 92, RULE_array_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516; _localctx.arr_def = array_selector();
			State = 517; _localctx.op = Match(ASSIGN);
			State = 518; _localctx.arr_val = all_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_definitionContext : ParserRuleContext {
		public ITerminalNode LEFT_SBRACKET() { return GetToken(CorundumParser.LEFT_SBRACKET, 0); }
		public Array_definition_elementsContext array_definition_elements() {
			return GetRuleContext<Array_definition_elementsContext>(0);
		}
		public ITerminalNode RIGHT_SBRACKET() { return GetToken(CorundumParser.RIGHT_SBRACKET, 0); }
		public Array_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterArray_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitArray_definition(this);
		}
	}

	[RuleVersion(0)]
	public Array_definitionContext array_definition() {
		Array_definitionContext _localctx = new Array_definitionContext(Context, State);
		EnterRule(_localctx, 94, RULE_array_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520; Match(LEFT_SBRACKET);
			State = 521; array_definition_elements(0);
			State = 522; Match(RIGHT_SBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_definition_elementsContext : ParserRuleContext {
		public Int_resultContext int_result() {
			return GetRuleContext<Int_resultContext>(0);
		}
		public Dynamic_resultContext dynamic_result() {
			return GetRuleContext<Dynamic_resultContext>(0);
		}
		public Array_definition_elementsContext array_definition_elements() {
			return GetRuleContext<Array_definition_elementsContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(CorundumParser.COMMA, 0); }
		public Array_definition_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_definition_elements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterArray_definition_elements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitArray_definition_elements(this);
		}
	}

	[RuleVersion(0)]
	public Array_definition_elementsContext array_definition_elements() {
		return array_definition_elements(0);
	}

	private Array_definition_elementsContext array_definition_elements(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Array_definition_elementsContext _localctx = new Array_definition_elementsContext(Context, _parentState);
		Array_definition_elementsContext _prevctx = _localctx;
		int _startState = 96;
		EnterRecursionRule(_localctx, 96, RULE_array_definition_elements, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 527;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 525; int_result(0);
				}
				break;
			case 2:
				{
				State = 526; dynamic_result(0);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 537;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Array_definition_elementsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_array_definition_elements);
					State = 529;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 530; Match(COMMA);
					State = 533;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
					case 1:
						{
						State = 531; int_result(0);
						}
						break;
					case 2:
						{
						State = 532; dynamic_result(0);
						}
						break;
					}
					}
					} 
				}
				State = 539;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Array_selectorContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode LEFT_SBRACKET() { return GetToken(CorundumParser.LEFT_SBRACKET, 0); }
		public ITerminalNode RIGHT_SBRACKET() { return GetToken(CorundumParser.RIGHT_SBRACKET, 0); }
		public Int_resultContext int_result() {
			return GetRuleContext<Int_resultContext>(0);
		}
		public Dynamic_resultContext dynamic_result() {
			return GetRuleContext<Dynamic_resultContext>(0);
		}
		public Id_globalContext id_global() {
			return GetRuleContext<Id_globalContext>(0);
		}
		public Array_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_selector; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterArray_selector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitArray_selector(this);
		}
	}

	[RuleVersion(0)]
	public Array_selectorContext array_selector() {
		Array_selectorContext _localctx = new Array_selectorContext(Context, State);
		EnterRule(_localctx, 98, RULE_array_selector);
		try {
			State = 556;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 540; id_();
				State = 541; Match(LEFT_SBRACKET);
				State = 544;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 542; int_result(0);
					}
					break;
				case 2:
					{
					State = 543; dynamic_result(0);
					}
					break;
				}
				State = 546; Match(RIGHT_SBRACKET);
				}
				break;
			case ID_GLOBAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 548; id_global();
				State = 549; Match(LEFT_SBRACKET);
				State = 552;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 550; int_result(0);
					}
					break;
				case 2:
					{
					State = 551; dynamic_result(0);
					}
					break;
				}
				State = 554; Match(RIGHT_SBRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dynamic_resultContext : ParserRuleContext {
		public IToken op;
		public Int_resultContext int_result() {
			return GetRuleContext<Int_resultContext>(0);
		}
		public Dynamic_resultContext[] dynamic_result() {
			return GetRuleContexts<Dynamic_resultContext>();
		}
		public Dynamic_resultContext dynamic_result(int i) {
			return GetRuleContext<Dynamic_resultContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(CorundumParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(CorundumParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(CorundumParser.MOD, 0); }
		public Float_resultContext float_result() {
			return GetRuleContext<Float_resultContext>(0);
		}
		public String_resultContext string_result() {
			return GetRuleContext<String_resultContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(CorundumParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(CorundumParser.MINUS, 0); }
		public ITerminalNode LEFT_RBRACKET() { return GetToken(CorundumParser.LEFT_RBRACKET, 0); }
		public ITerminalNode RIGHT_RBRACKET() { return GetToken(CorundumParser.RIGHT_RBRACKET, 0); }
		public Dynamic_Context dynamic_() {
			return GetRuleContext<Dynamic_Context>(0);
		}
		public Dynamic_resultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamic_result; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterDynamic_result(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitDynamic_result(this);
		}
	}

	[RuleVersion(0)]
	public Dynamic_resultContext dynamic_result() {
		return dynamic_result(0);
	}

	private Dynamic_resultContext dynamic_result(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Dynamic_resultContext _localctx = new Dynamic_resultContext(Context, _parentState);
		Dynamic_resultContext _prevctx = _localctx;
		int _startState = 100;
		EnterRecursionRule(_localctx, 100, RULE_dynamic_result, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 584;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 559; int_result(0);
				State = 560;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 561; dynamic_result(13);
				}
				break;
			case 2:
				{
				State = 563; float_result(0);
				State = 564;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 565; dynamic_result(11);
				}
				break;
			case 3:
				{
				State = 567; string_result(0);
				State = 568; _localctx.op = Match(MUL);
				State = 569; dynamic_result(8);
				}
				break;
			case 4:
				{
				State = 571; int_result(0);
				State = 572;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 573; dynamic_result(6);
				}
				break;
			case 5:
				{
				State = 575; float_result(0);
				State = 576;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 577; dynamic_result(4);
				}
				break;
			case 6:
				{
				State = 579; Match(LEFT_RBRACKET);
				State = 580; dynamic_result(0);
				State = 581; Match(RIGHT_RBRACKET);
				}
				break;
			case 7:
				{
				State = 583; dynamic_();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 609;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 607;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
					case 1:
						{
						_localctx = new Dynamic_resultContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_dynamic_result);
						State = 586;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 587;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 588; dynamic_result(11);
						}
						break;
					case 2:
						{
						_localctx = new Dynamic_resultContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_dynamic_result);
						State = 589;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 590;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 591; dynamic_result(4);
						}
						break;
					case 3:
						{
						_localctx = new Dynamic_resultContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_dynamic_result);
						State = 592;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 593;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 594; int_result(0);
						}
						break;
					case 4:
						{
						_localctx = new Dynamic_resultContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_dynamic_result);
						State = 595;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 596;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 597; float_result(0);
						}
						break;
					case 5:
						{
						_localctx = new Dynamic_resultContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_dynamic_result);
						State = 598;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 599; _localctx.op = Match(MUL);
						State = 600; string_result(0);
						}
						break;
					case 6:
						{
						_localctx = new Dynamic_resultContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_dynamic_result);
						State = 601;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 602;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 603; int_result(0);
						}
						break;
					case 7:
						{
						_localctx = new Dynamic_resultContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_dynamic_result);
						State = 604;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 605;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 606; float_result(0);
						}
						break;
					}
					} 
				}
				State = 611;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Dynamic_Context : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Function_call_assignmentContext function_call_assignment() {
			return GetRuleContext<Function_call_assignmentContext>(0);
		}
		public Array_selectorContext array_selector() {
			return GetRuleContext<Array_selectorContext>(0);
		}
		public Dynamic_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamic_; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterDynamic_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitDynamic_(this);
		}
	}

	[RuleVersion(0)]
	public Dynamic_Context dynamic_() {
		Dynamic_Context _localctx = new Dynamic_Context(Context, State);
		EnterRule(_localctx, 102, RULE_dynamic_);
		try {
			State = 615;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 612; id_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 613; function_call_assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 614; array_selector();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_resultContext : ParserRuleContext {
		public IToken op;
		public ITerminalNode LEFT_RBRACKET() { return GetToken(CorundumParser.LEFT_RBRACKET, 0); }
		public Int_resultContext[] int_result() {
			return GetRuleContexts<Int_resultContext>();
		}
		public Int_resultContext int_result(int i) {
			return GetRuleContext<Int_resultContext>(i);
		}
		public ITerminalNode RIGHT_RBRACKET() { return GetToken(CorundumParser.RIGHT_RBRACKET, 0); }
		public Int_tContext int_t() {
			return GetRuleContext<Int_tContext>(0);
		}
		public ITerminalNode MUL() { return GetToken(CorundumParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(CorundumParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(CorundumParser.MOD, 0); }
		public ITerminalNode PLUS() { return GetToken(CorundumParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(CorundumParser.MINUS, 0); }
		public Int_resultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_result; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterInt_result(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitInt_result(this);
		}
	}

	[RuleVersion(0)]
	public Int_resultContext int_result() {
		return int_result(0);
	}

	private Int_resultContext int_result(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Int_resultContext _localctx = new Int_resultContext(Context, _parentState);
		Int_resultContext _prevctx = _localctx;
		int _startState = 104;
		EnterRecursionRule(_localctx, 104, RULE_int_result, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 623;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_RBRACKET:
				{
				State = 618; Match(LEFT_RBRACKET);
				State = 619; int_result(0);
				State = 620; Match(RIGHT_RBRACKET);
				}
				break;
			case INT:
				{
				State = 622; int_t();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 633;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 631;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
					case 1:
						{
						_localctx = new Int_resultContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_int_result);
						State = 625;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 626;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 627; int_result(5);
						}
						break;
					case 2:
						{
						_localctx = new Int_resultContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_int_result);
						State = 628;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 629;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 630; int_result(4);
						}
						break;
					}
					} 
				}
				State = 635;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Float_resultContext : ParserRuleContext {
		public IToken op;
		public Int_resultContext int_result() {
			return GetRuleContext<Int_resultContext>(0);
		}
		public Float_resultContext[] float_result() {
			return GetRuleContexts<Float_resultContext>();
		}
		public Float_resultContext float_result(int i) {
			return GetRuleContext<Float_resultContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(CorundumParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(CorundumParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(CorundumParser.MOD, 0); }
		public ITerminalNode PLUS() { return GetToken(CorundumParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(CorundumParser.MINUS, 0); }
		public ITerminalNode LEFT_RBRACKET() { return GetToken(CorundumParser.LEFT_RBRACKET, 0); }
		public ITerminalNode RIGHT_RBRACKET() { return GetToken(CorundumParser.RIGHT_RBRACKET, 0); }
		public Float_tContext float_t() {
			return GetRuleContext<Float_tContext>(0);
		}
		public Float_resultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float_result; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterFloat_result(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitFloat_result(this);
		}
	}

	[RuleVersion(0)]
	public Float_resultContext float_result() {
		return float_result(0);
	}

	private Float_resultContext float_result(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Float_resultContext _localctx = new Float_resultContext(Context, _parentState);
		Float_resultContext _prevctx = _localctx;
		int _startState = 106;
		EnterRecursionRule(_localctx, 106, RULE_float_result, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 650;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 637; int_result(0);
				State = 638;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 639; float_result(7);
				}
				break;
			case 2:
				{
				State = 641; int_result(0);
				State = 642;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 643; float_result(4);
				}
				break;
			case 3:
				{
				State = 645; Match(LEFT_RBRACKET);
				State = 646; float_result(0);
				State = 647; Match(RIGHT_RBRACKET);
				}
				break;
			case 4:
				{
				State = 649; float_t();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 666;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 664;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
					case 1:
						{
						_localctx = new Float_resultContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_float_result);
						State = 652;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 653;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 654; float_result(9);
						}
						break;
					case 2:
						{
						_localctx = new Float_resultContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_float_result);
						State = 655;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 656;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 657; float_result(6);
						}
						break;
					case 3:
						{
						_localctx = new Float_resultContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_float_result);
						State = 658;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 659;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 660; int_result(0);
						}
						break;
					case 4:
						{
						_localctx = new Float_resultContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_float_result);
						State = 661;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 662;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 663; int_result(0);
						}
						break;
					}
					} 
				}
				State = 668;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class String_resultContext : ParserRuleContext {
		public IToken op;
		public Int_resultContext int_result() {
			return GetRuleContext<Int_resultContext>(0);
		}
		public String_resultContext[] string_result() {
			return GetRuleContexts<String_resultContext>();
		}
		public String_resultContext string_result(int i) {
			return GetRuleContext<String_resultContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(CorundumParser.MUL, 0); }
		public Literal_tContext literal_t() {
			return GetRuleContext<Literal_tContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(CorundumParser.PLUS, 0); }
		public String_resultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_result; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterString_result(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitString_result(this);
		}
	}

	[RuleVersion(0)]
	public String_resultContext string_result() {
		return string_result(0);
	}

	private String_resultContext string_result(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		String_resultContext _localctx = new String_resultContext(Context, _parentState);
		String_resultContext _prevctx = _localctx;
		int _startState = 108;
		EnterRecursionRule(_localctx, 108, RULE_string_result, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 675;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_RBRACKET:
			case INT:
				{
				State = 670; int_result(0);
				State = 671; _localctx.op = Match(MUL);
				State = 672; string_result(3);
				}
				break;
			case LITERAL:
				{
				State = 674; literal_t();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 685;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 683;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
					case 1:
						{
						_localctx = new String_resultContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_string_result);
						State = 677;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 678; _localctx.op = Match(PLUS);
						State = 679; string_result(3);
						}
						break;
					case 2:
						{
						_localctx = new String_resultContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_string_result);
						State = 680;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 681; _localctx.op = Match(MUL);
						State = 682; int_result(0);
						}
						break;
					}
					} 
				}
				State = 687;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Comparison_listContext : ParserRuleContext {
		public ComparisonContext left;
		public IToken op;
		public Comparison_listContext right;
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ITerminalNode BIT_AND() { return GetToken(CorundumParser.BIT_AND, 0); }
		public Comparison_listContext comparison_list() {
			return GetRuleContext<Comparison_listContext>(0);
		}
		public ITerminalNode AND() { return GetToken(CorundumParser.AND, 0); }
		public ITerminalNode BIT_OR() { return GetToken(CorundumParser.BIT_OR, 0); }
		public ITerminalNode OR() { return GetToken(CorundumParser.OR, 0); }
		public ITerminalNode LEFT_RBRACKET() { return GetToken(CorundumParser.LEFT_RBRACKET, 0); }
		public ITerminalNode RIGHT_RBRACKET() { return GetToken(CorundumParser.RIGHT_RBRACKET, 0); }
		public Comparison_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterComparison_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitComparison_list(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_listContext comparison_list() {
		Comparison_listContext _localctx = new Comparison_listContext(Context, State);
		EnterRule(_localctx, 110, RULE_comparison_list);
		try {
			State = 709;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 688; _localctx.left = comparison();
				State = 689; _localctx.op = Match(BIT_AND);
				State = 690; _localctx.right = comparison_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 692; _localctx.left = comparison();
				State = 693; _localctx.op = Match(AND);
				State = 694; _localctx.right = comparison_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 696; _localctx.left = comparison();
				State = 697; _localctx.op = Match(BIT_OR);
				State = 698; _localctx.right = comparison_list();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 700; _localctx.left = comparison();
				State = 701; _localctx.op = Match(OR);
				State = 702; _localctx.right = comparison_list();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 704; Match(LEFT_RBRACKET);
				State = 705; comparison_list();
				State = 706; Match(RIGHT_RBRACKET);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 708; comparison();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public Comp_varContext left;
		public IToken op;
		public Comp_varContext right;
		public Comp_varContext[] comp_var() {
			return GetRuleContexts<Comp_varContext>();
		}
		public Comp_varContext comp_var(int i) {
			return GetRuleContext<Comp_varContext>(i);
		}
		public ITerminalNode LESS() { return GetToken(CorundumParser.LESS, 0); }
		public ITerminalNode GREATER() { return GetToken(CorundumParser.GREATER, 0); }
		public ITerminalNode LESS_EQUAL() { return GetToken(CorundumParser.LESS_EQUAL, 0); }
		public ITerminalNode GREATER_EQUAL() { return GetToken(CorundumParser.GREATER_EQUAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(CorundumParser.EQUAL, 0); }
		public ITerminalNode NOT_EQUAL() { return GetToken(CorundumParser.NOT_EQUAL, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 112, RULE_comparison);
		int _la;
		try {
			State = 719;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 711; _localctx.left = comp_var();
				State = 712;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GREATER) | (1L << LESS) | (1L << LESS_EQUAL) | (1L << GREATER_EQUAL))) != 0)) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 713; _localctx.right = comp_var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 715; _localctx.left = comp_var();
				State = 716;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==EQUAL || _la==NOT_EQUAL) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 717; _localctx.right = comp_var();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comp_varContext : ParserRuleContext {
		public All_resultContext all_result() {
			return GetRuleContext<All_resultContext>(0);
		}
		public Array_selectorContext array_selector() {
			return GetRuleContext<Array_selectorContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Comp_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterComp_var(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitComp_var(this);
		}
	}

	[RuleVersion(0)]
	public Comp_varContext comp_var() {
		Comp_varContext _localctx = new Comp_varContext(Context, State);
		EnterRule(_localctx, 114, RULE_comp_var);
		try {
			State = 724;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 721; all_result();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 722; array_selector();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 723; id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LvalueContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public LvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lvalue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterLvalue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitLvalue(this);
		}
	}

	[RuleVersion(0)]
	public LvalueContext lvalue() {
		LvalueContext _localctx = new LvalueContext(Context, State);
		EnterRule(_localctx, 116, RULE_lvalue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726; id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RvalueContext : ParserRuleContext {
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public Initial_array_assignmentContext initial_array_assignment() {
			return GetRuleContext<Initial_array_assignmentContext>(0);
		}
		public Array_assignmentContext array_assignment() {
			return GetRuleContext<Array_assignmentContext>(0);
		}
		public Int_resultContext int_result() {
			return GetRuleContext<Int_resultContext>(0);
		}
		public Float_resultContext float_result() {
			return GetRuleContext<Float_resultContext>(0);
		}
		public String_resultContext string_result() {
			return GetRuleContext<String_resultContext>(0);
		}
		public Global_setContext global_set() {
			return GetRuleContext<Global_setContext>(0);
		}
		public Global_getContext global_get() {
			return GetRuleContext<Global_getContext>(0);
		}
		public Dynamic_assignmentContext dynamic_assignment() {
			return GetRuleContext<Dynamic_assignmentContext>(0);
		}
		public String_assignmentContext string_assignment() {
			return GetRuleContext<String_assignmentContext>(0);
		}
		public Float_assignmentContext float_assignment() {
			return GetRuleContext<Float_assignmentContext>(0);
		}
		public Int_assignmentContext int_assignment() {
			return GetRuleContext<Int_assignmentContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Literal_tContext literal_t() {
			return GetRuleContext<Literal_tContext>(0);
		}
		public Bool_tContext bool_t() {
			return GetRuleContext<Bool_tContext>(0);
		}
		public Float_tContext float_t() {
			return GetRuleContext<Float_tContext>(0);
		}
		public Int_tContext int_t() {
			return GetRuleContext<Int_tContext>(0);
		}
		public Nil_tContext nil_t() {
			return GetRuleContext<Nil_tContext>(0);
		}
		public RvalueContext[] rvalue() {
			return GetRuleContexts<RvalueContext>();
		}
		public RvalueContext rvalue(int i) {
			return GetRuleContext<RvalueContext>(i);
		}
		public ITerminalNode NOT() { return GetToken(CorundumParser.NOT, 0); }
		public ITerminalNode BIT_NOT() { return GetToken(CorundumParser.BIT_NOT, 0); }
		public ITerminalNode LEFT_RBRACKET() { return GetToken(CorundumParser.LEFT_RBRACKET, 0); }
		public ITerminalNode RIGHT_RBRACKET() { return GetToken(CorundumParser.RIGHT_RBRACKET, 0); }
		public ITerminalNode EXP() { return GetToken(CorundumParser.EXP, 0); }
		public ITerminalNode MUL() { return GetToken(CorundumParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(CorundumParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(CorundumParser.MOD, 0); }
		public ITerminalNode PLUS() { return GetToken(CorundumParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(CorundumParser.MINUS, 0); }
		public ITerminalNode BIT_SHL() { return GetToken(CorundumParser.BIT_SHL, 0); }
		public ITerminalNode BIT_SHR() { return GetToken(CorundumParser.BIT_SHR, 0); }
		public ITerminalNode BIT_AND() { return GetToken(CorundumParser.BIT_AND, 0); }
		public ITerminalNode BIT_OR() { return GetToken(CorundumParser.BIT_OR, 0); }
		public ITerminalNode BIT_XOR() { return GetToken(CorundumParser.BIT_XOR, 0); }
		public ITerminalNode LESS() { return GetToken(CorundumParser.LESS, 0); }
		public ITerminalNode GREATER() { return GetToken(CorundumParser.GREATER, 0); }
		public ITerminalNode LESS_EQUAL() { return GetToken(CorundumParser.LESS_EQUAL, 0); }
		public ITerminalNode GREATER_EQUAL() { return GetToken(CorundumParser.GREATER_EQUAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(CorundumParser.EQUAL, 0); }
		public ITerminalNode NOT_EQUAL() { return GetToken(CorundumParser.NOT_EQUAL, 0); }
		public ITerminalNode OR() { return GetToken(CorundumParser.OR, 0); }
		public ITerminalNode AND() { return GetToken(CorundumParser.AND, 0); }
		public RvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rvalue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterRvalue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitRvalue(this);
		}
	}

	[RuleVersion(0)]
	public RvalueContext rvalue() {
		return rvalue(0);
	}

	private RvalueContext rvalue(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RvalueContext _localctx = new RvalueContext(Context, _parentState);
		RvalueContext _prevctx = _localctx;
		int _startState = 118;
		EnterRecursionRule(_localctx, 118, RULE_rvalue, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 729; lvalue();
				}
				break;
			case 2:
				{
				State = 730; initial_array_assignment();
				}
				break;
			case 3:
				{
				State = 731; array_assignment();
				}
				break;
			case 4:
				{
				State = 732; int_result(0);
				}
				break;
			case 5:
				{
				State = 733; float_result(0);
				}
				break;
			case 6:
				{
				State = 734; string_result(0);
				}
				break;
			case 7:
				{
				State = 735; global_set();
				}
				break;
			case 8:
				{
				State = 736; global_get();
				}
				break;
			case 9:
				{
				State = 737; dynamic_assignment();
				}
				break;
			case 10:
				{
				State = 738; string_assignment();
				}
				break;
			case 11:
				{
				State = 739; float_assignment();
				}
				break;
			case 12:
				{
				State = 740; int_assignment();
				}
				break;
			case 13:
				{
				State = 741; assignment();
				}
				break;
			case 14:
				{
				State = 742; function_call();
				}
				break;
			case 15:
				{
				State = 743; literal_t();
				}
				break;
			case 16:
				{
				State = 744; bool_t();
				}
				break;
			case 17:
				{
				State = 745; float_t();
				}
				break;
			case 18:
				{
				State = 746; int_t();
				}
				break;
			case 19:
				{
				State = 747; nil_t();
				}
				break;
			case 20:
				{
				State = 748;
				_la = TokenStream.LA(1);
				if ( !(_la==BIT_NOT || _la==NOT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 749; rvalue(10);
				}
				break;
			case 21:
				{
				State = 750; Match(LEFT_RBRACKET);
				State = 751; rvalue(0);
				State = 752; Match(RIGHT_RBRACKET);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 785;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 783;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
					case 1:
						{
						_localctx = new RvalueContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rvalue);
						State = 756;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 757; Match(EXP);
						State = 758; rvalue(12);
						}
						break;
					case 2:
						{
						_localctx = new RvalueContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rvalue);
						State = 759;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 760;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 761; rvalue(10);
						}
						break;
					case 3:
						{
						_localctx = new RvalueContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rvalue);
						State = 762;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 763;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 764; rvalue(9);
						}
						break;
					case 4:
						{
						_localctx = new RvalueContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rvalue);
						State = 765;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 766;
						_la = TokenStream.LA(1);
						if ( !(_la==BIT_SHL || _la==BIT_SHR) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 767; rvalue(8);
						}
						break;
					case 5:
						{
						_localctx = new RvalueContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rvalue);
						State = 768;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 769; Match(BIT_AND);
						State = 770; rvalue(7);
						}
						break;
					case 6:
						{
						_localctx = new RvalueContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rvalue);
						State = 771;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 772;
						_la = TokenStream.LA(1);
						if ( !(_la==BIT_OR || _la==BIT_XOR) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 773; rvalue(6);
						}
						break;
					case 7:
						{
						_localctx = new RvalueContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rvalue);
						State = 774;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 775;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GREATER) | (1L << LESS) | (1L << LESS_EQUAL) | (1L << GREATER_EQUAL))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 776; rvalue(5);
						}
						break;
					case 8:
						{
						_localctx = new RvalueContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rvalue);
						State = 777;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 778;
						_la = TokenStream.LA(1);
						if ( !(_la==EQUAL || _la==NOT_EQUAL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 779; rvalue(4);
						}
						break;
					case 9:
						{
						_localctx = new RvalueContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rvalue);
						State = 780;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 781;
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==OR) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 782; rvalue(3);
						}
						break;
					}
					} 
				}
				State = 787;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Break_expressionContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(CorundumParser.BREAK, 0); }
		public Break_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterBreak_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitBreak_expression(this);
		}
	}

	[RuleVersion(0)]
	public Break_expressionContext break_expression() {
		Break_expressionContext _localctx = new Break_expressionContext(Context, State);
		EnterRule(_localctx, 120, RULE_break_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 788; Match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_tContext : ParserRuleContext {
		public ITerminalNode LITERAL() { return GetToken(CorundumParser.LITERAL, 0); }
		public Literal_tContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_t; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterLiteral_t(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitLiteral_t(this);
		}
	}

	[RuleVersion(0)]
	public Literal_tContext literal_t() {
		Literal_tContext _localctx = new Literal_tContext(Context, State);
		EnterRule(_localctx, 122, RULE_literal_t);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 790; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Float_tContext : ParserRuleContext {
		public ITerminalNode FLOAT() { return GetToken(CorundumParser.FLOAT, 0); }
		public Float_tContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float_t; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterFloat_t(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitFloat_t(this);
		}
	}

	[RuleVersion(0)]
	public Float_tContext float_t() {
		Float_tContext _localctx = new Float_tContext(Context, State);
		EnterRule(_localctx, 124, RULE_float_t);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 792; Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_tContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(CorundumParser.INT, 0); }
		public Int_tContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_t; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterInt_t(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitInt_t(this);
		}
	}

	[RuleVersion(0)]
	public Int_tContext int_t() {
		Int_tContext _localctx = new Int_tContext(Context, State);
		EnterRule(_localctx, 126, RULE_int_t);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_tContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(CorundumParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(CorundumParser.FALSE, 0); }
		public Bool_tContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_t; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterBool_t(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitBool_t(this);
		}
	}

	[RuleVersion(0)]
	public Bool_tContext bool_t() {
		Bool_tContext _localctx = new Bool_tContext(Context, State);
		EnterRule(_localctx, 128, RULE_bool_t);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 796;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nil_tContext : ParserRuleContext {
		public ITerminalNode NIL() { return GetToken(CorundumParser.NIL, 0); }
		public Nil_tContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nil_t; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterNil_t(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitNil_t(this);
		}
	}

	[RuleVersion(0)]
	public Nil_tContext nil_t() {
		Nil_tContext _localctx = new Nil_tContext(Context, State);
		EnterRule(_localctx, 130, RULE_nil_t);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 798; Match(NIL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_Context : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CorundumParser.ID, 0); }
		public Id_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterId_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitId_(this);
		}
	}

	[RuleVersion(0)]
	public Id_Context id_() {
		Id_Context _localctx = new Id_Context(Context, State);
		EnterRule(_localctx, 132, RULE_id_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 800; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_globalContext : ParserRuleContext {
		public ITerminalNode ID_GLOBAL() { return GetToken(CorundumParser.ID_GLOBAL, 0); }
		public Id_globalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_global; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterId_global(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitId_global(this);
		}
	}

	[RuleVersion(0)]
	public Id_globalContext id_global() {
		Id_globalContext _localctx = new Id_globalContext(Context, State);
		EnterRule(_localctx, 134, RULE_id_global);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 802; Match(ID_GLOBAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_functionContext : ParserRuleContext {
		public ITerminalNode ID_FUNCTION() { return GetToken(CorundumParser.ID_FUNCTION, 0); }
		public Id_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterId_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitId_function(this);
		}
	}

	[RuleVersion(0)]
	public Id_functionContext id_function() {
		Id_functionContext _localctx = new Id_functionContext(Context, State);
		EnterRule(_localctx, 136, RULE_id_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 804; Match(ID_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminatorContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(CorundumParser.SEMICOLON, 0); }
		public CrlfContext crlf() {
			return GetRuleContext<CrlfContext>(0);
		}
		public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public TerminatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterTerminator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitTerminator(this);
		}
	}

	[RuleVersion(0)]
	public TerminatorContext terminator() {
		return terminator(0);
	}

	private TerminatorContext terminator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TerminatorContext _localctx = new TerminatorContext(Context, _parentState);
		TerminatorContext _prevctx = _localctx;
		int _startState = 138;
		EnterRecursionRule(_localctx, 138, RULE_terminator, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 809;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMICOLON:
				{
				State = 807; Match(SEMICOLON);
				}
				break;
			case CRLF:
				{
				State = 808; crlf();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 817;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 815;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
					case 1:
						{
						_localctx = new TerminatorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_terminator);
						State = 811;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 812; Match(SEMICOLON);
						}
						break;
					case 2:
						{
						_localctx = new TerminatorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_terminator);
						State = 813;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 814; crlf();
						}
						break;
					}
					} 
				}
				State = 819;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Else_tokenContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(CorundumParser.ELSE, 0); }
		public Else_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterElse_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitElse_token(this);
		}
	}

	[RuleVersion(0)]
	public Else_tokenContext else_token() {
		Else_tokenContext _localctx = new Else_tokenContext(Context, State);
		EnterRule(_localctx, 140, RULE_else_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820; Match(ELSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CrlfContext : ParserRuleContext {
		public ITerminalNode CRLF() { return GetToken(CorundumParser.CRLF, 0); }
		public CrlfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_crlf; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.EnterCrlf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICorundumListener typedListener = listener as ICorundumListener;
			if (typedListener != null) typedListener.ExitCrlf(this);
		}
	}

	[RuleVersion(0)]
	public CrlfContext crlf() {
		CrlfContext _localctx = new CrlfContext(Context, State);
		EnterRule(_localctx, 142, RULE_crlf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 822; Match(CRLF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_list_sempred((Expression_listContext)_localctx, predIndex);
		case 15: return function_definition_params_list_sempred((Function_definition_params_listContext)_localctx, predIndex);
		case 20: return function_call_params_sempred((Function_call_paramsContext)_localctx, predIndex);
		case 34: return for_init_list_sempred((For_init_listContext)_localctx, predIndex);
		case 37: return for_loop_list_sempred((For_loop_listContext)_localctx, predIndex);
		case 39: return statement_expression_list_sempred((Statement_expression_listContext)_localctx, predIndex);
		case 48: return array_definition_elements_sempred((Array_definition_elementsContext)_localctx, predIndex);
		case 50: return dynamic_result_sempred((Dynamic_resultContext)_localctx, predIndex);
		case 52: return int_result_sempred((Int_resultContext)_localctx, predIndex);
		case 53: return float_result_sempred((Float_resultContext)_localctx, predIndex);
		case 54: return string_result_sempred((String_resultContext)_localctx, predIndex);
		case 59: return rvalue_sempred((RvalueContext)_localctx, predIndex);
		case 69: return terminator_sempred((TerminatorContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_list_sempred(Expression_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool function_definition_params_list_sempred(Function_definition_params_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool function_call_params_sempred(Function_call_paramsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool for_init_list_sempred(For_init_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool for_loop_list_sempred(For_loop_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		}
		return true;
	}
	private bool statement_expression_list_sempred(Statement_expression_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool array_definition_elements_sempred(Array_definition_elementsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool dynamic_result_sempred(Dynamic_resultContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 10);
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 14);
		case 12: return Precpred(Context, 12);
		case 13: return Precpred(Context, 9);
		case 14: return Precpred(Context, 7);
		case 15: return Precpred(Context, 5);
		}
		return true;
	}
	private bool int_result_sempred(Int_resultContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(Context, 4);
		case 17: return Precpred(Context, 3);
		}
		return true;
	}
	private bool float_result_sempred(Float_resultContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return Precpred(Context, 8);
		case 19: return Precpred(Context, 5);
		case 20: return Precpred(Context, 6);
		case 21: return Precpred(Context, 3);
		}
		return true;
	}
	private bool string_result_sempred(String_resultContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return Precpred(Context, 2);
		case 23: return Precpred(Context, 4);
		}
		return true;
	}
	private bool rvalue_sempred(RvalueContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24: return Precpred(Context, 11);
		case 25: return Precpred(Context, 9);
		case 26: return Precpred(Context, 8);
		case 27: return Precpred(Context, 7);
		case 28: return Precpred(Context, 6);
		case 29: return Precpred(Context, 5);
		case 30: return Precpred(Context, 4);
		case 31: return Precpred(Context, 3);
		case 32: return Precpred(Context, 2);
		}
		return true;
	}
	private bool terminator_sempred(TerminatorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return Precpred(Context, 4);
		case 34: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '>', '\x33B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x9B', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', '\xA1', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '\xA4', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\xB0', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\xD7', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xDB', 
		'\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xE4', '\n', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\a', '\x11', '\xEC', '\n', '\x11', '\f', '\x11', 
		'\xE', '\x11', '\xEF', '\v', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\x102', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\a', '\x16', '\x10C', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x10F', 
		'\v', '\x16', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x113', '\n', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\x119', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x121', '\n', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x12A', '\n', '\x1B', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x5', '\x1D', '\x141', '\n', '\x1D', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x5', '\x1E', '\x159', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x5', '\x1F', '\x171', '\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x5', '!', '\x18F', '\n', '!', '\x3', '\"', '\x3', '\"', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', '\x197', '\n', 
		'#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\a', '$', '\x19F', '\n', '$', '\f', '$', '\xE', '$', '\x1A2', '\v', 
		'$', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\a', '\'', 
		'\x1AE', '\n', '\'', '\f', '\'', '\xE', '\'', '\x1B1', '\v', '\'', '\x3', 
		'(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x5', ')', '\x1BE', 
		'\n', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\a', ')', '\x1CB', '\n', ')', '\f', ')', '\xE', ')', '\x1CE', '\v', ')', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x5', '*', '\x1D8', '\n', '*', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x5', '+', '\x1E2', '\n', '+', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x5', ',', 
		'\x1EC', '\n', ',', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x1F6', '\n', '-', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x5', '.', '\x200', '\n', '.', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', 
		'\x212', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x5', '\x32', '\x218', '\n', '\x32', '\a', '\x32', '\x21A', '\n', 
		'\x32', '\f', '\x32', '\xE', '\x32', '\x21D', '\v', '\x32', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x223', '\n', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x5', '\x33', '\x22B', '\n', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x5', '\x33', '\x22F', '\n', '\x33', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', 
		'\x34', '\x24B', '\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\a', '\x34', '\x262', '\n', 
		'\x34', '\f', '\x34', '\xE', '\x34', '\x265', '\v', '\x34', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x26A', '\n', '\x35', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x5', '\x36', '\x272', '\n', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\a', '\x36', 
		'\x27A', '\n', '\x36', '\f', '\x36', '\xE', '\x36', '\x27D', '\v', '\x36', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', 
		'\x28D', '\n', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\a', '\x37', '\x29B', 
		'\n', '\x37', '\f', '\x37', '\xE', '\x37', '\x29E', '\v', '\x37', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x5', '\x38', '\x2A6', '\n', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\a', '\x38', 
		'\x2AE', '\n', '\x38', '\f', '\x38', '\xE', '\x38', '\x2B1', '\v', '\x38', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x5', '\x39', '\x2C8', '\n', '\x39', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x5', ':', '\x2D2', '\n', ':', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x5', ';', '\x2D7', '\n', ';', '\x3', '<', '\x3', '<', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x5', '=', '\x2F5', '\n', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\a', '=', '\x312', '\n', '=', '\f', '=', '\xE', '=', '\x315', '\v', '=', 
		'\x3', '>', '\x3', '>', '\x3', '?', '\x3', '?', '\x3', '@', '\x3', '@', 
		'\x3', '\x41', '\x3', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x46', '\x3', '\x46', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 
		'G', '\x32C', '\n', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', 
		'\a', 'G', '\x332', '\n', 'G', '\f', 'G', '\xE', 'G', '\x335', '\v', 'G', 
		'\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x2', '\xF', 
		'\x4', ' ', '*', '\x46', 'L', 'P', '\x62', '\x66', 'j', 'l', 'n', 'x', 
		'\x8C', 'J', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 
		'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 
		'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', '\x88', 
		'\x8A', '\x8C', '\x8E', '\x90', '\x2', '\f', '\x3', '\x2', '#', '(', '\x3', 
		'\x2', '\x18', '\x1A', '\x3', '\x2', '\x16', '\x17', '\x3', '\x2', '\x1E', 
		'!', '\x3', '\x2', '\x1C', '\x1D', '\x4', '\x2', ',', ',', '\x31', '\x31', 
		'\x3', '\x2', '-', '.', '\x3', '\x2', '*', '+', '\x3', '\x2', '/', '\x30', 
		'\x3', '\x2', '\x14', '\x15', '\x2', '\x370', '\x2', '\x92', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x6', '\xAF', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\xB1', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\xB5', '\x3', '\x2', '\x2', '\x2', '\f', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x10', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\xC0', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x16', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xCB', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xD6', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xDA', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xE3', '\x3', '\x2', '\x2', '\x2', ' ', '\xE5', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xF0', '\x3', '\x2', '\x2', '\x2', '$', '\xF2', '\x3', 
		'\x2', '\x2', '\x2', '&', '\x101', '\x3', '\x2', '\x2', '\x2', '(', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x105', '\x3', '\x2', '\x2', '\x2', 
		',', '\x112', '\x3', '\x2', '\x2', '\x2', '.', '\x118', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x32', '\x122', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x38', '\x140', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x158', '\x3', '\x2', '\x2', '\x2', '<', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x172', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x42', '\x190', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x196', '\x3', '\x2', '\x2', '\x2', '\x46', '\x198', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x1A3', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x1A5', '\x3', '\x2', '\x2', '\x2', 'L', '\x1A7', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x1B2', '\x3', '\x2', '\x2', '\x2', 'P', '\x1BD', 
		'\x3', '\x2', '\x2', '\x2', 'R', '\x1D7', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x1E1', '\x3', '\x2', '\x2', '\x2', 'V', '\x1EB', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x1F5', '\x3', '\x2', '\x2', '\x2', 'Z', '\x1FF', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x201', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x206', '\x3', '\x2', '\x2', '\x2', '`', '\x20A', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x20E', '\x3', '\x2', '\x2', '\x2', '\x64', '\x22E', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x24A', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x269', '\x3', '\x2', '\x2', '\x2', 'j', '\x271', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\x28C', '\x3', '\x2', '\x2', '\x2', 'n', '\x2A5', 
		'\x3', '\x2', '\x2', '\x2', 'p', '\x2C7', '\x3', '\x2', '\x2', '\x2', 
		'r', '\x2D1', '\x3', '\x2', '\x2', '\x2', 't', '\x2D6', '\x3', '\x2', 
		'\x2', '\x2', 'v', '\x2D8', '\x3', '\x2', '\x2', '\x2', 'x', '\x2F4', 
		'\x3', '\x2', '\x2', '\x2', 'z', '\x316', '\x3', '\x2', '\x2', '\x2', 
		'|', '\x318', '\x3', '\x2', '\x2', '\x2', '~', '\x31A', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x31C', '\x3', '\x2', '\x2', '\x2', '\x82', '\x31E', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x320', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x322', '\x3', '\x2', '\x2', '\x2', '\x88', '\x324', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x326', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x32B', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x336', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x338', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x5', '\x4', 
		'\x3', '\x2', '\x93', '\x94', '\a', '\x2', '\x2', '\x3', '\x94', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\b', '\x3', '\x1', '\x2', 
		'\x96', '\x97', '\x5', '\x6', '\x4', '\x2', '\x97', '\x98', '\x5', '\x8C', 
		'G', '\x2', '\x98', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9B', 
		'\x5', '\x8C', 'G', '\x2', '\x9A', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', '\xA2', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x9D', '\f', '\x4', '\x2', '\x2', '\x9D', '\x9E', 
		'\x5', '\x6', '\x4', '\x2', '\x9E', '\x9F', '\x5', '\x8C', 'G', '\x2', 
		'\x9F', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\xA1', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', '\x2', '\x2', '\x2', 
		'\xA3', '\x5', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA2', '\x3', '\x2', 
		'\x2', '\x2', '\xA5', '\xB0', '\x5', '\x16', '\f', '\x2', '\xA6', '\xB0', 
		'\x5', '\xE', '\b', '\x2', '\xA7', '\xB0', '\x5', '\x10', '\t', '\x2', 
		'\xA8', '\xB0', '\x5', ':', '\x1E', '\x2', '\xA9', '\xB0', '\x5', '<', 
		'\x1F', '\x2', '\xAA', '\xB0', '\x5', 'x', '=', '\x2', '\xAB', '\xB0', 
		'\x5', '$', '\x13', '\x2', '\xAC', '\xB0', '\x5', '>', ' ', '\x2', '\xAD', 
		'\xB0', '\x5', '@', '!', '\x2', '\xAE', '\xB0', '\x5', '\x12', '\n', '\x2', 
		'\xAF', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '\xAF', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAB', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '\xAF', '\xAE', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\a', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x5', 'v', 
		'<', '\x2', '\xB2', '\xB3', '\a', '\"', '\x2', '\x2', '\xB3', '\xB4', 
		'\x5', '\x88', '\x45', '\x2', '\xB4', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\xB5', '\xB6', '\x5', '\x88', '\x45', '\x2', '\xB6', '\xB7', '\a', '\"', 
		'\x2', '\x2', '\xB7', '\xB8', '\x5', '\x34', '\x1B', '\x2', '\xB8', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x5', '\x88', '\x45', '\x2', 
		'\xBA', '\r', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\x5', '&', 
		'\x14', '\x2', '\xBC', '\xF', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', 
		'\a', '\a', '\x2', '\x2', '\xBE', '\xBF', '\x5', '|', '?', '\x2', '\xBF', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\a', '\v', '\x2', 
		'\x2', '\xC1', '\xC2', '\x5', '\x90', 'I', '\x2', '\xC2', '\xC3', '\x5', 
		'\x14', '\v', '\x2', '\xC3', '\xC4', '\a', '\b', '\x2', '\x2', '\xC4', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x5', '\x4', '\x3', 
		'\x2', '\xC6', '\x15', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x5', 
		'\x1A', '\xE', '\x2', '\xC8', '\xC9', '\x5', '\x18', '\r', '\x2', '\xC9', 
		'\xCA', '\a', '\b', '\x2', '\x2', '\xCA', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xCC', '\x5', '\x4', '\x3', '\x2', '\xCC', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xCD', '\xCE', '\a', '\t', '\x2', '\x2', '\xCE', 
		'\xCF', '\x5', '\x1C', '\xF', '\x2', '\xCF', '\xD0', '\x5', '\x90', 'I', 
		'\x2', '\xD0', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\a', 
		'\t', '\x2', '\x2', '\xD2', '\xD3', '\x5', '\x1C', '\xF', '\x2', '\xD3', 
		'\xD4', '\x5', '\x1E', '\x10', '\x2', '\xD4', '\xD5', '\x5', '\x90', 'I', 
		'\x2', '\xD5', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xDB', '\x5', '\x8A', '\x46', 
		'\x2', '\xD9', '\xDB', '\x5', '\x86', '\x44', '\x2', '\xDA', '\xD8', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\a', '\x32', '\x2', 
		'\x2', '\xDD', '\xE4', '\a', '\x33', '\x2', '\x2', '\xDE', '\xDF', '\a', 
		'\x32', '\x2', '\x2', '\xDF', '\xE0', '\x5', ' ', '\x11', '\x2', '\xE0', 
		'\xE1', '\a', '\x33', '\x2', '\x2', '\xE1', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\xE4', '\x5', ' ', '\x11', '\x2', '\xE3', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '\xE4', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE6', '\b', '\x11', '\x1', '\x2', '\xE6', '\xE7', '\x5', 
		'\"', '\x12', '\x2', '\xE7', '\xED', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xE9', '\f', '\x3', '\x2', '\x2', '\xE9', '\xEA', '\a', '\x4', '\x2', 
		'\x2', '\xEA', '\xEC', '\x5', '\"', '\x12', '\x2', '\xEB', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '\xEC', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xED', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '!', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xED', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', '\xF1', '\x5', '\x86', '\x44', '\x2', '\xF1', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\a', '\n', '\x2', '\x2', 
		'\xF3', '\xF4', '\x5', '\x34', '\x1B', '\x2', '\xF4', '%', '\x3', '\x2', 
		'\x2', '\x2', '\xF5', '\xF6', '\x5', '\x1C', '\xF', '\x2', '\xF6', '\xF7', 
		'\a', '\x32', '\x2', '\x2', '\xF7', '\xF8', '\x5', '(', '\x15', '\x2', 
		'\xF8', '\xF9', '\a', '\x33', '\x2', '\x2', '\xF9', '\x102', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\xFB', '\x5', '\x1C', '\xF', '\x2', '\xFB', '\xFC', 
		'\x5', '(', '\x15', '\x2', '\xFC', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\xFD', '\xFE', '\x5', '\x1C', '\xF', '\x2', '\xFE', '\xFF', '\a', '\x32', 
		'\x2', '\x2', '\xFF', '\x100', '\a', '\x33', '\x2', '\x2', '\x100', '\x102', 
		'\x3', '\x2', '\x2', '\x2', '\x101', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\x101', '\xFA', '\x3', '\x2', '\x2', '\x2', '\x101', '\xFD', '\x3', '\x2', 
		'\x2', '\x2', '\x102', '\'', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', 
		'\x5', '*', '\x16', '\x2', '\x104', ')', '\x3', '\x2', '\x2', '\x2', '\x105', 
		'\x106', '\b', '\x16', '\x1', '\x2', '\x106', '\x107', '\x5', ',', '\x17', 
		'\x2', '\x107', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', 
		'\f', '\x3', '\x2', '\x2', '\x109', '\x10A', '\a', '\x4', '\x2', '\x2', 
		'\x10A', '\x10C', '\x5', ',', '\x17', '\x2', '\x10B', '\x108', '\x3', 
		'\x2', '\x2', '\x2', '\x10C', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10D', 
		'\x10B', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '+', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x10D', '\x3', 
		'\x2', '\x2', '\x2', '\x110', '\x113', '\x5', '.', '\x18', '\x2', '\x111', 
		'\x113', '\x5', '\x30', '\x19', '\x2', '\x112', '\x110', '\x3', '\x2', 
		'\x2', '\x2', '\x112', '\x111', '\x3', '\x2', '\x2', '\x2', '\x113', '-', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x119', '\x5', 'j', '\x36', '\x2', 
		'\x115', '\x119', '\x5', 'l', '\x37', '\x2', '\x116', '\x119', '\x5', 
		'n', '\x38', '\x2', '\x117', '\x119', '\x5', '\x66', '\x34', '\x2', '\x118', 
		'\x114', '\x3', '\x2', '\x2', '\x2', '\x118', '\x115', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '\x116', '\x3', '\x2', '\x2', '\x2', '\x118', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x11A', '\x11B', '\x5', '\x86', '\x44', '\x2', '\x11B', '\x120', '\a', 
		'\"', '\x2', '\x2', '\x11C', '\x121', '\x5', 'j', '\x36', '\x2', '\x11D', 
		'\x121', '\x5', 'l', '\x37', '\x2', '\x11E', '\x121', '\x5', 'n', '\x38', 
		'\x2', '\x11F', '\x121', '\x5', '\x66', '\x34', '\x2', '\x120', '\x11C', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11F', '\x3', 
		'\x2', '\x2', '\x2', '\x121', '\x31', '\x3', '\x2', '\x2', '\x2', '\x122', 
		'\x123', '\x5', '&', '\x14', '\x2', '\x123', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x124', '\x12A', '\x5', 'j', '\x36', '\x2', '\x125', '\x12A', 
		'\x5', 'l', '\x37', '\x2', '\x126', '\x12A', '\x5', 'n', '\x38', '\x2', 
		'\x127', '\x12A', '\x5', '\x66', '\x34', '\x2', '\x128', '\x12A', '\x5', 
		'\f', '\a', '\x2', '\x129', '\x124', '\x3', '\x2', '\x2', '\x2', '\x129', 
		'\x125', '\x3', '\x2', '\x2', '\x2', '\x129', '\x126', '\x3', '\x2', '\x2', 
		'\x2', '\x129', '\x127', '\x3', '\x2', '\x2', '\x2', '\x129', '\x128', 
		'\x3', '\x2', '\x2', '\x2', '\x12A', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x12B', '\x12C', '\x5', '\x38', '\x1D', '\x2', '\x12C', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x12D', '\x12E', '\a', '\xE', '\x2', '\x2', '\x12E', 
		'\x12F', '\x5', 'H', '%', '\x2', '\x12F', '\x130', '\x5', '\x90', 'I', 
		'\x2', '\x130', '\x131', '\x5', 'N', '(', '\x2', '\x131', '\x141', '\x3', 
		'\x2', '\x2', '\x2', '\x132', '\x133', '\a', '\xE', '\x2', '\x2', '\x133', 
		'\x134', '\x5', 'H', '%', '\x2', '\x134', '\x135', '\x5', '\x90', 'I', 
		'\x2', '\x135', '\x136', '\x5', 'N', '(', '\x2', '\x136', '\x137', '\x5', 
		'\x8E', 'H', '\x2', '\x137', '\x138', '\x5', '\x90', 'I', '\x2', '\x138', 
		'\x139', '\x5', 'N', '(', '\x2', '\x139', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\x13B', '\a', '\xE', '\x2', '\x2', '\x13B', '\x13C', 
		'\x5', 'H', '%', '\x2', '\x13C', '\x13D', '\x5', '\x90', 'I', '\x2', '\x13D', 
		'\x13E', '\x5', 'N', '(', '\x2', '\x13E', '\x13F', '\x5', '\x38', '\x1D', 
		'\x2', '\x13F', '\x141', '\x3', '\x2', '\x2', '\x2', '\x140', '\x12D', 
		'\x3', '\x2', '\x2', '\x2', '\x140', '\x132', '\x3', '\x2', '\x2', '\x2', 
		'\x140', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x141', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x142', '\x143', '\a', '\f', '\x2', '\x2', '\x143', 
		'\x144', '\x5', 'H', '%', '\x2', '\x144', '\x145', '\x5', '\x90', 'I', 
		'\x2', '\x145', '\x146', '\x5', 'N', '(', '\x2', '\x146', '\x147', '\a', 
		'\b', '\x2', '\x2', '\x147', '\x159', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'\x149', '\a', '\f', '\x2', '\x2', '\x149', '\x14A', '\x5', 'H', '%', 
		'\x2', '\x14A', '\x14B', '\x5', '\x90', 'I', '\x2', '\x14B', '\x14C', 
		'\x5', 'N', '(', '\x2', '\x14C', '\x14D', '\x5', '\x8E', 'H', '\x2', '\x14D', 
		'\x14E', '\x5', '\x90', 'I', '\x2', '\x14E', '\x14F', '\x5', 'N', '(', 
		'\x2', '\x14F', '\x150', '\a', '\b', '\x2', '\x2', '\x150', '\x159', '\x3', 
		'\x2', '\x2', '\x2', '\x151', '\x152', '\a', '\f', '\x2', '\x2', '\x152', 
		'\x153', '\x5', 'H', '%', '\x2', '\x153', '\x154', '\x5', '\x90', 'I', 
		'\x2', '\x154', '\x155', '\x5', 'N', '(', '\x2', '\x155', '\x156', '\x5', 
		'\x36', '\x1C', '\x2', '\x156', '\x157', '\a', '\b', '\x2', '\x2', '\x157', 
		'\x159', '\x3', '\x2', '\x2', '\x2', '\x158', '\x142', '\x3', '\x2', '\x2', 
		'\x2', '\x158', '\x148', '\x3', '\x2', '\x2', '\x2', '\x158', '\x151', 
		'\x3', '\x2', '\x2', '\x2', '\x159', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x15A', '\x15B', '\a', '\xF', '\x2', '\x2', '\x15B', '\x15C', '\x5', 
		'H', '%', '\x2', '\x15C', '\x15D', '\x5', '\x90', 'I', '\x2', '\x15D', 
		'\x15E', '\x5', 'N', '(', '\x2', '\x15E', '\x15F', '\a', '\b', '\x2', 
		'\x2', '\x15F', '\x171', '\x3', '\x2', '\x2', '\x2', '\x160', '\x161', 
		'\a', '\xF', '\x2', '\x2', '\x161', '\x162', '\x5', 'H', '%', '\x2', '\x162', 
		'\x163', '\x5', '\x90', 'I', '\x2', '\x163', '\x164', '\x5', 'N', '(', 
		'\x2', '\x164', '\x165', '\x5', '\x8E', 'H', '\x2', '\x165', '\x166', 
		'\x5', '\x90', 'I', '\x2', '\x166', '\x167', '\x5', 'N', '(', '\x2', '\x167', 
		'\x168', '\a', '\b', '\x2', '\x2', '\x168', '\x171', '\x3', '\x2', '\x2', 
		'\x2', '\x169', '\x16A', '\a', '\xF', '\x2', '\x2', '\x16A', '\x16B', 
		'\x5', 'H', '%', '\x2', '\x16B', '\x16C', '\x5', '\x90', 'I', '\x2', '\x16C', 
		'\x16D', '\x5', 'N', '(', '\x2', '\x16D', '\x16E', '\x5', '\x36', '\x1C', 
		'\x2', '\x16E', '\x16F', '\a', '\b', '\x2', '\x2', '\x16F', '\x171', '\x3', 
		'\x2', '\x2', '\x2', '\x170', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x170', 
		'\x160', '\x3', '\x2', '\x2', '\x2', '\x170', '\x169', '\x3', '\x2', '\x2', 
		'\x2', '\x171', '=', '\x3', '\x2', '\x2', '\x2', '\x172', '\x173', '\a', 
		'\x10', '\x2', '\x2', '\x173', '\x174', '\x5', 'H', '%', '\x2', '\x174', 
		'\x175', '\x5', '\x90', 'I', '\x2', '\x175', '\x176', '\x5', 'N', '(', 
		'\x2', '\x176', '\x177', '\a', '\b', '\x2', '\x2', '\x177', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x178', '\x179', '\a', '\x13', '\x2', '\x2', '\x179', 
		'\x17A', '\a', '\x32', '\x2', '\x2', '\x17A', '\x17B', '\x5', '\x42', 
		'\"', '\x2', '\x17B', '\x17C', '\a', '\x5', '\x2', '\x2', '\x17C', '\x17D', 
		'\x5', 'H', '%', '\x2', '\x17D', '\x17E', '\a', '\x5', '\x2', '\x2', '\x17E', 
		'\x17F', '\x5', 'J', '&', '\x2', '\x17F', '\x180', '\a', '\x33', '\x2', 
		'\x2', '\x180', '\x181', '\x5', '\x90', 'I', '\x2', '\x181', '\x182', 
		'\x5', 'N', '(', '\x2', '\x182', '\x183', '\a', '\b', '\x2', '\x2', '\x183', 
		'\x18F', '\x3', '\x2', '\x2', '\x2', '\x184', '\x185', '\a', '\x13', '\x2', 
		'\x2', '\x185', '\x186', '\x5', '\x42', '\"', '\x2', '\x186', '\x187', 
		'\a', '\x5', '\x2', '\x2', '\x187', '\x188', '\x5', 'H', '%', '\x2', '\x188', 
		'\x189', '\a', '\x5', '\x2', '\x2', '\x189', '\x18A', '\x5', 'J', '&', 
		'\x2', '\x18A', '\x18B', '\x5', '\x90', 'I', '\x2', '\x18B', '\x18C', 
		'\x5', 'N', '(', '\x2', '\x18C', '\x18D', '\a', '\b', '\x2', '\x2', '\x18D', 
		'\x18F', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x178', '\x3', '\x2', '\x2', 
		'\x2', '\x18E', '\x184', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x190', '\x191', '\x5', '\x46', '$', '\x2', 
		'\x191', '\x43', '\x3', '\x2', '\x2', '\x2', '\x192', '\x197', '\x5', 
		'V', ',', '\x2', '\x193', '\x197', '\x5', 'X', '-', '\x2', '\x194', '\x197', 
		'\x5', 'Z', '.', '\x2', '\x195', '\x197', '\x5', 'T', '+', '\x2', '\x196', 
		'\x192', '\x3', '\x2', '\x2', '\x2', '\x196', '\x193', '\x3', '\x2', '\x2', 
		'\x2', '\x196', '\x194', '\x3', '\x2', '\x2', '\x2', '\x196', '\x195', 
		'\x3', '\x2', '\x2', '\x2', '\x197', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x198', '\x199', '\b', '$', '\x1', '\x2', '\x199', '\x19A', '\x5', '\x44', 
		'#', '\x2', '\x19A', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x19C', 
		'\f', '\x4', '\x2', '\x2', '\x19C', '\x19D', '\a', '\x4', '\x2', '\x2', 
		'\x19D', '\x19F', '\x5', '\x44', '#', '\x2', '\x19E', '\x19B', '\x3', 
		'\x2', '\x2', '\x2', '\x19F', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A0', 
		'\x19E', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A1', '\x3', '\x2', '\x2', 
		'\x2', '\x1A1', 'G', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A0', '\x3', 
		'\x2', '\x2', '\x2', '\x1A3', '\x1A4', '\x5', 'p', '\x39', '\x2', '\x1A4', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A6', '\x5', 'L', '\'', '\x2', 
		'\x1A6', 'K', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A8', '\b', '\'', 
		'\x1', '\x2', '\x1A8', '\x1A9', '\x5', '\x44', '#', '\x2', '\x1A9', '\x1AF', 
		'\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\f', '\x4', '\x2', '\x2', 
		'\x1AB', '\x1AC', '\a', '\x4', '\x2', '\x2', '\x1AC', '\x1AE', '\x5', 
		'\x44', '#', '\x2', '\x1AD', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AE', 
		'\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1AD', '\x3', '\x2', '\x2', 
		'\x2', '\x1AF', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B0', 'M', '\x3', 
		'\x2', '\x2', '\x2', '\x1B1', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1B2', 
		'\x1B3', '\x5', 'P', ')', '\x2', '\x1B3', 'O', '\x3', '\x2', '\x2', '\x2', 
		'\x1B4', '\x1B5', '\b', ')', '\x1', '\x2', '\x1B5', '\x1B6', '\x5', '\x6', 
		'\x4', '\x2', '\x1B6', '\x1B7', '\x5', '\x8C', 'G', '\x2', '\x1B7', '\x1BE', 
		'\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B9', '\a', '\x11', '\x2', '\x2', 
		'\x1B9', '\x1BE', '\x5', '\x8C', 'G', '\x2', '\x1BA', '\x1BB', '\x5', 
		'z', '>', '\x2', '\x1BB', '\x1BC', '\x5', '\x8C', 'G', '\x2', '\x1BC', 
		'\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1B4', '\x3', '\x2', '\x2', 
		'\x2', '\x1BD', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1BA', 
		'\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1CC', '\x3', '\x2', '\x2', '\x2', 
		'\x1BF', '\x1C0', '\f', '\x5', '\x2', '\x2', '\x1C0', '\x1C1', '\x5', 
		'\x6', '\x4', '\x2', '\x1C1', '\x1C2', '\x5', '\x8C', 'G', '\x2', '\x1C2', 
		'\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C4', '\f', '\x4', '\x2', 
		'\x2', '\x1C4', '\x1C5', '\a', '\x11', '\x2', '\x2', '\x1C5', '\x1CB', 
		'\x5', '\x8C', 'G', '\x2', '\x1C6', '\x1C7', '\f', '\x3', '\x2', '\x2', 
		'\x1C7', '\x1C8', '\x5', 'z', '>', '\x2', '\x1C8', '\x1C9', '\x5', '\x8C', 
		'G', '\x2', '\x1C9', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1BF', 
		'\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1C3', '\x3', '\x2', '\x2', '\x2', 
		'\x1CA', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CE', '\x3', 
		'\x2', '\x2', '\x2', '\x1CC', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CC', 
		'\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1CD', 'Q', '\x3', '\x2', '\x2', 
		'\x2', '\x1CE', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1D0', 
		'\x5', 'v', '<', '\x2', '\x1D0', '\x1D1', '\a', '\"', '\x2', '\x2', '\x1D1', 
		'\x1D2', '\x5', 'x', '=', '\x2', '\x1D2', '\x1D8', '\x3', '\x2', '\x2', 
		'\x2', '\x1D3', '\x1D4', '\x5', 'v', '<', '\x2', '\x1D4', '\x1D5', '\t', 
		'\x2', '\x2', '\x2', '\x1D5', '\x1D6', '\x5', 'x', '=', '\x2', '\x1D6', 
		'\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1CF', '\x3', '\x2', '\x2', 
		'\x2', '\x1D7', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D8', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x1D9', '\x1DA', '\x5', 'v', '<', '\x2', '\x1DA', 
		'\x1DB', '\a', '\"', '\x2', '\x2', '\x1DB', '\x1DC', '\x5', '\x66', '\x34', 
		'\x2', '\x1DC', '\x1E2', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DE', 
		'\x5', 'v', '<', '\x2', '\x1DE', '\x1DF', '\t', '\x2', '\x2', '\x2', '\x1DF', 
		'\x1E0', '\x5', '\x66', '\x34', '\x2', '\x1E0', '\x1E2', '\x3', '\x2', 
		'\x2', '\x2', '\x1E1', '\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1DD', 
		'\x3', '\x2', '\x2', '\x2', '\x1E2', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x1E3', '\x1E4', '\x5', 'v', '<', '\x2', '\x1E4', '\x1E5', '\a', '\"', 
		'\x2', '\x2', '\x1E5', '\x1E6', '\x5', 'j', '\x36', '\x2', '\x1E6', '\x1EC', 
		'\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1E8', '\x5', 'v', '<', '\x2', 
		'\x1E8', '\x1E9', '\t', '\x2', '\x2', '\x2', '\x1E9', '\x1EA', '\x5', 
		'j', '\x36', '\x2', '\x1EA', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1EB', 
		'\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1E7', '\x3', '\x2', '\x2', 
		'\x2', '\x1EC', 'W', '\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EE', '\x5', 
		'v', '<', '\x2', '\x1EE', '\x1EF', '\a', '\"', '\x2', '\x2', '\x1EF', 
		'\x1F0', '\x5', 'l', '\x37', '\x2', '\x1F0', '\x1F6', '\x3', '\x2', '\x2', 
		'\x2', '\x1F1', '\x1F2', '\x5', 'v', '<', '\x2', '\x1F2', '\x1F3', '\t', 
		'\x2', '\x2', '\x2', '\x1F3', '\x1F4', '\x5', 'l', '\x37', '\x2', '\x1F4', 
		'\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1ED', '\x3', '\x2', '\x2', 
		'\x2', '\x1F5', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F6', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x1F7', '\x1F8', '\x5', 'v', '<', '\x2', '\x1F8', 
		'\x1F9', '\a', '\"', '\x2', '\x2', '\x1F9', '\x1FA', '\x5', 'n', '\x38', 
		'\x2', '\x1FA', '\x200', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FC', 
		'\x5', 'v', '<', '\x2', '\x1FC', '\x1FD', '\a', '#', '\x2', '\x2', '\x1FD', 
		'\x1FE', '\x5', 'n', '\x38', '\x2', '\x1FE', '\x200', '\x3', '\x2', '\x2', 
		'\x2', '\x1FF', '\x1F7', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x1FB', 
		'\x3', '\x2', '\x2', '\x2', '\x200', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x201', '\x202', '\x5', 'v', '<', '\x2', '\x202', '\x203', '\a', '\"', 
		'\x2', '\x2', '\x203', '\x204', '\a', '\x34', '\x2', '\x2', '\x204', '\x205', 
		'\a', '\x35', '\x2', '\x2', '\x205', ']', '\x3', '\x2', '\x2', '\x2', 
		'\x206', '\x207', '\x5', '\x64', '\x33', '\x2', '\x207', '\x208', '\a', 
		'\"', '\x2', '\x2', '\x208', '\x209', '\x5', '\x34', '\x1B', '\x2', '\x209', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x20A', '\x20B', '\a', '\x34', '\x2', 
		'\x2', '\x20B', '\x20C', '\x5', '\x62', '\x32', '\x2', '\x20C', '\x20D', 
		'\a', '\x35', '\x2', '\x2', '\x20D', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x20E', '\x211', '\b', '\x32', '\x1', '\x2', '\x20F', '\x212', '\x5', 
		'j', '\x36', '\x2', '\x210', '\x212', '\x5', '\x66', '\x34', '\x2', '\x211', 
		'\x20F', '\x3', '\x2', '\x2', '\x2', '\x211', '\x210', '\x3', '\x2', '\x2', 
		'\x2', '\x212', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x213', '\x214', 
		'\f', '\x3', '\x2', '\x2', '\x214', '\x217', '\a', '\x4', '\x2', '\x2', 
		'\x215', '\x218', '\x5', 'j', '\x36', '\x2', '\x216', '\x218', '\x5', 
		'\x66', '\x34', '\x2', '\x217', '\x215', '\x3', '\x2', '\x2', '\x2', '\x217', 
		'\x216', '\x3', '\x2', '\x2', '\x2', '\x218', '\x21A', '\x3', '\x2', '\x2', 
		'\x2', '\x219', '\x213', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x21D', 
		'\x3', '\x2', '\x2', '\x2', '\x21B', '\x219', '\x3', '\x2', '\x2', '\x2', 
		'\x21B', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x21D', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x21E', 
		'\x21F', '\x5', '\x86', '\x44', '\x2', '\x21F', '\x222', '\a', '\x34', 
		'\x2', '\x2', '\x220', '\x223', '\x5', 'j', '\x36', '\x2', '\x221', '\x223', 
		'\x5', '\x66', '\x34', '\x2', '\x222', '\x220', '\x3', '\x2', '\x2', '\x2', 
		'\x222', '\x221', '\x3', '\x2', '\x2', '\x2', '\x223', '\x224', '\x3', 
		'\x2', '\x2', '\x2', '\x224', '\x225', '\a', '\x35', '\x2', '\x2', '\x225', 
		'\x22F', '\x3', '\x2', '\x2', '\x2', '\x226', '\x227', '\x5', '\x88', 
		'\x45', '\x2', '\x227', '\x22A', '\a', '\x34', '\x2', '\x2', '\x228', 
		'\x22B', '\x5', 'j', '\x36', '\x2', '\x229', '\x22B', '\x5', '\x66', '\x34', 
		'\x2', '\x22A', '\x228', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x229', 
		'\x3', '\x2', '\x2', '\x2', '\x22B', '\x22C', '\x3', '\x2', '\x2', '\x2', 
		'\x22C', '\x22D', '\a', '\x35', '\x2', '\x2', '\x22D', '\x22F', '\x3', 
		'\x2', '\x2', '\x2', '\x22E', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x22E', 
		'\x226', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x230', '\x231', '\b', '\x34', '\x1', '\x2', '\x231', '\x232', 
		'\x5', 'j', '\x36', '\x2', '\x232', '\x233', '\t', '\x3', '\x2', '\x2', 
		'\x233', '\x234', '\x5', '\x66', '\x34', '\xF', '\x234', '\x24B', '\x3', 
		'\x2', '\x2', '\x2', '\x235', '\x236', '\x5', 'l', '\x37', '\x2', '\x236', 
		'\x237', '\t', '\x3', '\x2', '\x2', '\x237', '\x238', '\x5', '\x66', '\x34', 
		'\r', '\x238', '\x24B', '\x3', '\x2', '\x2', '\x2', '\x239', '\x23A', 
		'\x5', 'n', '\x38', '\x2', '\x23A', '\x23B', '\a', '\x18', '\x2', '\x2', 
		'\x23B', '\x23C', '\x5', '\x66', '\x34', '\n', '\x23C', '\x24B', '\x3', 
		'\x2', '\x2', '\x2', '\x23D', '\x23E', '\x5', 'j', '\x36', '\x2', '\x23E', 
		'\x23F', '\t', '\x4', '\x2', '\x2', '\x23F', '\x240', '\x5', '\x66', '\x34', 
		'\b', '\x240', '\x24B', '\x3', '\x2', '\x2', '\x2', '\x241', '\x242', 
		'\x5', 'l', '\x37', '\x2', '\x242', '\x243', '\t', '\x4', '\x2', '\x2', 
		'\x243', '\x244', '\x5', '\x66', '\x34', '\x6', '\x244', '\x24B', '\x3', 
		'\x2', '\x2', '\x2', '\x245', '\x246', '\a', '\x32', '\x2', '\x2', '\x246', 
		'\x247', '\x5', '\x66', '\x34', '\x2', '\x247', '\x248', '\a', '\x33', 
		'\x2', '\x2', '\x248', '\x24B', '\x3', '\x2', '\x2', '\x2', '\x249', '\x24B', 
		'\x5', 'h', '\x35', '\x2', '\x24A', '\x230', '\x3', '\x2', '\x2', '\x2', 
		'\x24A', '\x235', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x239', '\x3', 
		'\x2', '\x2', '\x2', '\x24A', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x24A', 
		'\x241', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x245', '\x3', '\x2', '\x2', 
		'\x2', '\x24A', '\x249', '\x3', '\x2', '\x2', '\x2', '\x24B', '\x263', 
		'\x3', '\x2', '\x2', '\x2', '\x24C', '\x24D', '\f', '\f', '\x2', '\x2', 
		'\x24D', '\x24E', '\t', '\x3', '\x2', '\x2', '\x24E', '\x262', '\x5', 
		'\x66', '\x34', '\r', '\x24F', '\x250', '\f', '\x5', '\x2', '\x2', '\x250', 
		'\x251', '\t', '\x4', '\x2', '\x2', '\x251', '\x262', '\x5', '\x66', '\x34', 
		'\x6', '\x252', '\x253', '\f', '\x10', '\x2', '\x2', '\x253', '\x254', 
		'\t', '\x3', '\x2', '\x2', '\x254', '\x262', '\x5', 'j', '\x36', '\x2', 
		'\x255', '\x256', '\f', '\xE', '\x2', '\x2', '\x256', '\x257', '\t', '\x3', 
		'\x2', '\x2', '\x257', '\x262', '\x5', 'l', '\x37', '\x2', '\x258', '\x259', 
		'\f', '\v', '\x2', '\x2', '\x259', '\x25A', '\a', '\x18', '\x2', '\x2', 
		'\x25A', '\x262', '\x5', 'n', '\x38', '\x2', '\x25B', '\x25C', '\f', '\t', 
		'\x2', '\x2', '\x25C', '\x25D', '\t', '\x4', '\x2', '\x2', '\x25D', '\x262', 
		'\x5', 'j', '\x36', '\x2', '\x25E', '\x25F', '\f', '\a', '\x2', '\x2', 
		'\x25F', '\x260', '\t', '\x4', '\x2', '\x2', '\x260', '\x262', '\x5', 
		'l', '\x37', '\x2', '\x261', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x261', 
		'\x24F', '\x3', '\x2', '\x2', '\x2', '\x261', '\x252', '\x3', '\x2', '\x2', 
		'\x2', '\x261', '\x255', '\x3', '\x2', '\x2', '\x2', '\x261', '\x258', 
		'\x3', '\x2', '\x2', '\x2', '\x261', '\x25B', '\x3', '\x2', '\x2', '\x2', 
		'\x261', '\x25E', '\x3', '\x2', '\x2', '\x2', '\x262', '\x265', '\x3', 
		'\x2', '\x2', '\x2', '\x263', '\x261', '\x3', '\x2', '\x2', '\x2', '\x263', 
		'\x264', '\x3', '\x2', '\x2', '\x2', '\x264', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x265', '\x263', '\x3', '\x2', '\x2', '\x2', '\x266', '\x26A', 
		'\x5', '\x86', '\x44', '\x2', '\x267', '\x26A', '\x5', '\x32', '\x1A', 
		'\x2', '\x268', '\x26A', '\x5', '\x64', '\x33', '\x2', '\x269', '\x266', 
		'\x3', '\x2', '\x2', '\x2', '\x269', '\x267', '\x3', '\x2', '\x2', '\x2', 
		'\x269', '\x268', '\x3', '\x2', '\x2', '\x2', '\x26A', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x26B', '\x26C', '\b', '\x36', '\x1', '\x2', '\x26C', '\x26D', 
		'\a', '\x32', '\x2', '\x2', '\x26D', '\x26E', '\x5', 'j', '\x36', '\x2', 
		'\x26E', '\x26F', '\a', '\x33', '\x2', '\x2', '\x26F', '\x272', '\x3', 
		'\x2', '\x2', '\x2', '\x270', '\x272', '\x5', '\x80', '\x41', '\x2', '\x271', 
		'\x26B', '\x3', '\x2', '\x2', '\x2', '\x271', '\x270', '\x3', '\x2', '\x2', 
		'\x2', '\x272', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x273', '\x274', 
		'\f', '\x6', '\x2', '\x2', '\x274', '\x275', '\t', '\x3', '\x2', '\x2', 
		'\x275', '\x27A', '\x5', 'j', '\x36', '\a', '\x276', '\x277', '\f', '\x5', 
		'\x2', '\x2', '\x277', '\x278', '\t', '\x4', '\x2', '\x2', '\x278', '\x27A', 
		'\x5', 'j', '\x36', '\x6', '\x279', '\x273', '\x3', '\x2', '\x2', '\x2', 
		'\x279', '\x276', '\x3', '\x2', '\x2', '\x2', '\x27A', '\x27D', '\x3', 
		'\x2', '\x2', '\x2', '\x27B', '\x279', '\x3', '\x2', '\x2', '\x2', '\x27B', 
		'\x27C', '\x3', '\x2', '\x2', '\x2', '\x27C', 'k', '\x3', '\x2', '\x2', 
		'\x2', '\x27D', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x27F', 
		'\b', '\x37', '\x1', '\x2', '\x27F', '\x280', '\x5', 'j', '\x36', '\x2', 
		'\x280', '\x281', '\t', '\x3', '\x2', '\x2', '\x281', '\x282', '\x5', 
		'l', '\x37', '\t', '\x282', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x283', 
		'\x284', '\x5', 'j', '\x36', '\x2', '\x284', '\x285', '\t', '\x4', '\x2', 
		'\x2', '\x285', '\x286', '\x5', 'l', '\x37', '\x6', '\x286', '\x28D', 
		'\x3', '\x2', '\x2', '\x2', '\x287', '\x288', '\a', '\x32', '\x2', '\x2', 
		'\x288', '\x289', '\x5', 'l', '\x37', '\x2', '\x289', '\x28A', '\a', '\x33', 
		'\x2', '\x2', '\x28A', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x28B', '\x28D', 
		'\x5', '~', '@', '\x2', '\x28C', '\x27E', '\x3', '\x2', '\x2', '\x2', 
		'\x28C', '\x283', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x287', '\x3', 
		'\x2', '\x2', '\x2', '\x28C', '\x28B', '\x3', '\x2', '\x2', '\x2', '\x28D', 
		'\x29C', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x28F', '\f', '\n', '\x2', 
		'\x2', '\x28F', '\x290', '\t', '\x3', '\x2', '\x2', '\x290', '\x29B', 
		'\x5', 'l', '\x37', '\v', '\x291', '\x292', '\f', '\a', '\x2', '\x2', 
		'\x292', '\x293', '\t', '\x4', '\x2', '\x2', '\x293', '\x29B', '\x5', 
		'l', '\x37', '\b', '\x294', '\x295', '\f', '\b', '\x2', '\x2', '\x295', 
		'\x296', '\t', '\x3', '\x2', '\x2', '\x296', '\x29B', '\x5', 'j', '\x36', 
		'\x2', '\x297', '\x298', '\f', '\x5', '\x2', '\x2', '\x298', '\x299', 
		'\t', '\x4', '\x2', '\x2', '\x299', '\x29B', '\x5', 'j', '\x36', '\x2', 
		'\x29A', '\x28E', '\x3', '\x2', '\x2', '\x2', '\x29A', '\x291', '\x3', 
		'\x2', '\x2', '\x2', '\x29A', '\x294', '\x3', '\x2', '\x2', '\x2', '\x29A', 
		'\x297', '\x3', '\x2', '\x2', '\x2', '\x29B', '\x29E', '\x3', '\x2', '\x2', 
		'\x2', '\x29C', '\x29A', '\x3', '\x2', '\x2', '\x2', '\x29C', '\x29D', 
		'\x3', '\x2', '\x2', '\x2', '\x29D', 'm', '\x3', '\x2', '\x2', '\x2', 
		'\x29E', '\x29C', '\x3', '\x2', '\x2', '\x2', '\x29F', '\x2A0', '\b', 
		'\x38', '\x1', '\x2', '\x2A0', '\x2A1', '\x5', 'j', '\x36', '\x2', '\x2A1', 
		'\x2A2', '\a', '\x18', '\x2', '\x2', '\x2A2', '\x2A3', '\x5', 'n', '\x38', 
		'\x5', '\x2A3', '\x2A6', '\x3', '\x2', '\x2', '\x2', '\x2A4', '\x2A6', 
		'\x5', '|', '?', '\x2', '\x2A5', '\x29F', '\x3', '\x2', '\x2', '\x2', 
		'\x2A5', '\x2A4', '\x3', '\x2', '\x2', '\x2', '\x2A6', '\x2AF', '\x3', 
		'\x2', '\x2', '\x2', '\x2A7', '\x2A8', '\f', '\x4', '\x2', '\x2', '\x2A8', 
		'\x2A9', '\a', '\x16', '\x2', '\x2', '\x2A9', '\x2AE', '\x5', 'n', '\x38', 
		'\x5', '\x2AA', '\x2AB', '\f', '\x6', '\x2', '\x2', '\x2AB', '\x2AC', 
		'\a', '\x18', '\x2', '\x2', '\x2AC', '\x2AE', '\x5', 'j', '\x36', '\x2', 
		'\x2AD', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2AD', '\x2AA', '\x3', 
		'\x2', '\x2', '\x2', '\x2AE', '\x2B1', '\x3', '\x2', '\x2', '\x2', '\x2AF', 
		'\x2AD', '\x3', '\x2', '\x2', '\x2', '\x2AF', '\x2B0', '\x3', '\x2', '\x2', 
		'\x2', '\x2B0', 'o', '\x3', '\x2', '\x2', '\x2', '\x2B1', '\x2AF', '\x3', 
		'\x2', '\x2', '\x2', '\x2B2', '\x2B3', '\x5', 'r', ':', '\x2', '\x2B3', 
		'\x2B4', '\a', ')', '\x2', '\x2', '\x2B4', '\x2B5', '\x5', 'p', '\x39', 
		'\x2', '\x2B5', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2B7', 
		'\x5', 'r', ':', '\x2', '\x2B7', '\x2B8', '\a', '/', '\x2', '\x2', '\x2B8', 
		'\x2B9', '\x5', 'p', '\x39', '\x2', '\x2B9', '\x2C8', '\x3', '\x2', '\x2', 
		'\x2', '\x2BA', '\x2BB', '\x5', 'r', ':', '\x2', '\x2BB', '\x2BC', '\a', 
		'*', '\x2', '\x2', '\x2BC', '\x2BD', '\x5', 'p', '\x39', '\x2', '\x2BD', 
		'\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2BF', '\x5', 'r', ':', 
		'\x2', '\x2BF', '\x2C0', '\a', '\x30', '\x2', '\x2', '\x2C0', '\x2C1', 
		'\x5', 'p', '\x39', '\x2', '\x2C1', '\x2C8', '\x3', '\x2', '\x2', '\x2', 
		'\x2C2', '\x2C3', '\a', '\x32', '\x2', '\x2', '\x2C3', '\x2C4', '\x5', 
		'p', '\x39', '\x2', '\x2C4', '\x2C5', '\a', '\x33', '\x2', '\x2', '\x2C5', 
		'\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2C6', '\x2C8', '\x5', 'r', ':', 
		'\x2', '\x2C7', '\x2B2', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2B6', 
		'\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2BA', '\x3', '\x2', '\x2', '\x2', 
		'\x2C7', '\x2BE', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2C2', '\x3', 
		'\x2', '\x2', '\x2', '\x2C7', '\x2C6', '\x3', '\x2', '\x2', '\x2', '\x2C8', 
		'q', '\x3', '\x2', '\x2', '\x2', '\x2C9', '\x2CA', '\x5', 't', ';', '\x2', 
		'\x2CA', '\x2CB', '\t', '\x5', '\x2', '\x2', '\x2CB', '\x2CC', '\x5', 
		't', ';', '\x2', '\x2CC', '\x2D2', '\x3', '\x2', '\x2', '\x2', '\x2CD', 
		'\x2CE', '\x5', 't', ';', '\x2', '\x2CE', '\x2CF', '\t', '\x6', '\x2', 
		'\x2', '\x2CF', '\x2D0', '\x5', 't', ';', '\x2', '\x2D0', '\x2D2', '\x3', 
		'\x2', '\x2', '\x2', '\x2D1', '\x2C9', '\x3', '\x2', '\x2', '\x2', '\x2D1', 
		'\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2D2', 's', '\x3', '\x2', '\x2', 
		'\x2', '\x2D3', '\x2D7', '\x5', '\x34', '\x1B', '\x2', '\x2D4', '\x2D7', 
		'\x5', '\x64', '\x33', '\x2', '\x2D5', '\x2D7', '\x5', '\x86', '\x44', 
		'\x2', '\x2D6', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2D6', '\x2D4', 
		'\x3', '\x2', '\x2', '\x2', '\x2D6', '\x2D5', '\x3', '\x2', '\x2', '\x2', 
		'\x2D7', 'u', '\x3', '\x2', '\x2', '\x2', '\x2D8', '\x2D9', '\x5', '\x86', 
		'\x44', '\x2', '\x2D9', 'w', '\x3', '\x2', '\x2', '\x2', '\x2DA', '\x2DB', 
		'\b', '=', '\x1', '\x2', '\x2DB', '\x2F5', '\x5', 'v', '<', '\x2', '\x2DC', 
		'\x2F5', '\x5', '\\', '/', '\x2', '\x2DD', '\x2F5', '\x5', '^', '\x30', 
		'\x2', '\x2DE', '\x2F5', '\x5', 'j', '\x36', '\x2', '\x2DF', '\x2F5', 
		'\x5', 'l', '\x37', '\x2', '\x2E0', '\x2F5', '\x5', 'n', '\x38', '\x2', 
		'\x2E1', '\x2F5', '\x5', '\n', '\x6', '\x2', '\x2E2', '\x2F5', '\x5', 
		'\b', '\x5', '\x2', '\x2E3', '\x2F5', '\x5', 'T', '+', '\x2', '\x2E4', 
		'\x2F5', '\x5', 'Z', '.', '\x2', '\x2E5', '\x2F5', '\x5', 'X', '-', '\x2', 
		'\x2E6', '\x2F5', '\x5', 'V', ',', '\x2', '\x2E7', '\x2F5', '\x5', 'R', 
		'*', '\x2', '\x2E8', '\x2F5', '\x5', '&', '\x14', '\x2', '\x2E9', '\x2F5', 
		'\x5', '|', '?', '\x2', '\x2EA', '\x2F5', '\x5', '\x82', '\x42', '\x2', 
		'\x2EB', '\x2F5', '\x5', '~', '@', '\x2', '\x2EC', '\x2F5', '\x5', '\x80', 
		'\x41', '\x2', '\x2ED', '\x2F5', '\x5', '\x84', '\x43', '\x2', '\x2EE', 
		'\x2EF', '\t', '\a', '\x2', '\x2', '\x2EF', '\x2F5', '\x5', 'x', '=', 
		'\f', '\x2F0', '\x2F1', '\a', '\x32', '\x2', '\x2', '\x2F1', '\x2F2', 
		'\x5', 'x', '=', '\x2', '\x2F2', '\x2F3', '\a', '\x33', '\x2', '\x2', 
		'\x2F3', '\x2F5', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2DA', '\x3', 
		'\x2', '\x2', '\x2', '\x2F4', '\x2DC', '\x3', '\x2', '\x2', '\x2', '\x2F4', 
		'\x2DD', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2DE', '\x3', '\x2', '\x2', 
		'\x2', '\x2F4', '\x2DF', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2E0', 
		'\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2E1', '\x3', '\x2', '\x2', '\x2', 
		'\x2F4', '\x2E2', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2E3', '\x3', 
		'\x2', '\x2', '\x2', '\x2F4', '\x2E4', '\x3', '\x2', '\x2', '\x2', '\x2F4', 
		'\x2E5', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2E6', '\x3', '\x2', '\x2', 
		'\x2', '\x2F4', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2E8', 
		'\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2E9', '\x3', '\x2', '\x2', '\x2', 
		'\x2F4', '\x2EA', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2EB', '\x3', 
		'\x2', '\x2', '\x2', '\x2F4', '\x2EC', '\x3', '\x2', '\x2', '\x2', '\x2F4', 
		'\x2ED', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2EE', '\x3', '\x2', '\x2', 
		'\x2', '\x2F4', '\x2F0', '\x3', '\x2', '\x2', '\x2', '\x2F5', '\x313', 
		'\x3', '\x2', '\x2', '\x2', '\x2F6', '\x2F7', '\f', '\r', '\x2', '\x2', 
		'\x2F7', '\x2F8', '\a', '\x1B', '\x2', '\x2', '\x2F8', '\x312', '\x5', 
		'x', '=', '\xE', '\x2F9', '\x2FA', '\f', '\v', '\x2', '\x2', '\x2FA', 
		'\x2FB', '\t', '\x3', '\x2', '\x2', '\x2FB', '\x312', '\x5', 'x', '=', 
		'\f', '\x2FC', '\x2FD', '\f', '\n', '\x2', '\x2', '\x2FD', '\x2FE', '\t', 
		'\x4', '\x2', '\x2', '\x2FE', '\x312', '\x5', 'x', '=', '\v', '\x2FF', 
		'\x300', '\f', '\t', '\x2', '\x2', '\x300', '\x301', '\t', '\b', '\x2', 
		'\x2', '\x301', '\x312', '\x5', 'x', '=', '\n', '\x302', '\x303', '\f', 
		'\b', '\x2', '\x2', '\x303', '\x304', '\a', ')', '\x2', '\x2', '\x304', 
		'\x312', '\x5', 'x', '=', '\t', '\x305', '\x306', '\f', '\a', '\x2', '\x2', 
		'\x306', '\x307', '\t', '\t', '\x2', '\x2', '\x307', '\x312', '\x5', 'x', 
		'=', '\b', '\x308', '\x309', '\f', '\x6', '\x2', '\x2', '\x309', '\x30A', 
		'\t', '\x5', '\x2', '\x2', '\x30A', '\x312', '\x5', 'x', '=', '\a', '\x30B', 
		'\x30C', '\f', '\x5', '\x2', '\x2', '\x30C', '\x30D', '\t', '\x6', '\x2', 
		'\x2', '\x30D', '\x312', '\x5', 'x', '=', '\x6', '\x30E', '\x30F', '\f', 
		'\x4', '\x2', '\x2', '\x30F', '\x310', '\t', '\n', '\x2', '\x2', '\x310', 
		'\x312', '\x5', 'x', '=', '\x5', '\x311', '\x2F6', '\x3', '\x2', '\x2', 
		'\x2', '\x311', '\x2F9', '\x3', '\x2', '\x2', '\x2', '\x311', '\x2FC', 
		'\x3', '\x2', '\x2', '\x2', '\x311', '\x2FF', '\x3', '\x2', '\x2', '\x2', 
		'\x311', '\x302', '\x3', '\x2', '\x2', '\x2', '\x311', '\x305', '\x3', 
		'\x2', '\x2', '\x2', '\x311', '\x308', '\x3', '\x2', '\x2', '\x2', '\x311', 
		'\x30B', '\x3', '\x2', '\x2', '\x2', '\x311', '\x30E', '\x3', '\x2', '\x2', 
		'\x2', '\x312', '\x315', '\x3', '\x2', '\x2', '\x2', '\x313', '\x311', 
		'\x3', '\x2', '\x2', '\x2', '\x313', '\x314', '\x3', '\x2', '\x2', '\x2', 
		'\x314', 'y', '\x3', '\x2', '\x2', '\x2', '\x315', '\x313', '\x3', '\x2', 
		'\x2', '\x2', '\x316', '\x317', '\a', '\x12', '\x2', '\x2', '\x317', '{', 
		'\x3', '\x2', '\x2', '\x2', '\x318', '\x319', '\a', '\x3', '\x2', '\x2', 
		'\x319', '}', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x31B', '\a', ';', 
		'\x2', '\x2', '\x31B', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x31C', '\x31D', 
		'\a', ':', '\x2', '\x2', '\x31D', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x31E', '\x31F', '\t', '\v', '\x2', '\x2', '\x31F', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x320', '\x321', '\a', '\x36', '\x2', '\x2', '\x321', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x322', '\x323', '\a', '<', '\x2', '\x2', 
		'\x323', '\x87', '\x3', '\x2', '\x2', '\x2', '\x324', '\x325', '\a', '=', 
		'\x2', '\x2', '\x325', '\x89', '\x3', '\x2', '\x2', '\x2', '\x326', '\x327', 
		'\a', '>', '\x2', '\x2', '\x327', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x328', '\x329', '\b', 'G', '\x1', '\x2', '\x329', '\x32C', '\a', '\x5', 
		'\x2', '\x2', '\x32A', '\x32C', '\x5', '\x90', 'I', '\x2', '\x32B', '\x328', 
		'\x3', '\x2', '\x2', '\x2', '\x32B', '\x32A', '\x3', '\x2', '\x2', '\x2', 
		'\x32C', '\x333', '\x3', '\x2', '\x2', '\x2', '\x32D', '\x32E', '\f', 
		'\x6', '\x2', '\x2', '\x32E', '\x332', '\a', '\x5', '\x2', '\x2', '\x32F', 
		'\x330', '\f', '\x5', '\x2', '\x2', '\x330', '\x332', '\x5', '\x90', 'I', 
		'\x2', '\x331', '\x32D', '\x3', '\x2', '\x2', '\x2', '\x331', '\x32F', 
		'\x3', '\x2', '\x2', '\x2', '\x332', '\x335', '\x3', '\x2', '\x2', '\x2', 
		'\x333', '\x331', '\x3', '\x2', '\x2', '\x2', '\x333', '\x334', '\x3', 
		'\x2', '\x2', '\x2', '\x334', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x335', 
		'\x333', '\x3', '\x2', '\x2', '\x2', '\x336', '\x337', '\a', '\r', '\x2', 
		'\x2', '\x337', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x338', '\x339', 
		'\a', '\x6', '\x2', '\x2', '\x339', '\x91', '\x3', '\x2', '\x2', '\x2', 
		':', '\x9A', '\xA2', '\xAF', '\xD6', '\xDA', '\xE3', '\xED', '\x101', 
		'\x10D', '\x112', '\x118', '\x120', '\x129', '\x140', '\x158', '\x170', 
		'\x18E', '\x196', '\x1A0', '\x1AF', '\x1BD', '\x1CA', '\x1CC', '\x1D7', 
		'\x1E1', '\x1EB', '\x1F5', '\x1FF', '\x211', '\x217', '\x21B', '\x222', 
		'\x22A', '\x22E', '\x24A', '\x261', '\x263', '\x269', '\x271', '\x279', 
		'\x27B', '\x28C', '\x29A', '\x29C', '\x2A5', '\x2AD', '\x2AF', '\x2C7', 
		'\x2D1', '\x2D6', '\x2F4', '\x311', '\x313', '\x32B', '\x331', '\x333',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
